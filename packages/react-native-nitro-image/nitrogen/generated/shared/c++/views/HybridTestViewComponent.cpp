///
/// HybridTestViewComponent.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridTestViewComponent.hpp"
#include <NitroModules/NitroDefines.hpp>
#if REACT_NATIVE_VERSION_MINOR >= 78

#include <string>
#include <exception>
#include <utility>
#include <NitroModules/JSIConverter.hpp>
#include <react/renderer/core/RawValue.h>
#include <react/renderer/core/ShadowNode.h>
#include <react/renderer/core/ComponentDescriptor.h>
#include <react/renderer/components/view/ViewProps.h>

namespace margelo::nitro::image::views {

  HybridTestViewProps::HybridTestViewProps(const react::PropsParserContext& context,
                                           const HybridTestViewProps& sourceProps,
                                           const react::RawProps& rawProps):
    react::ViewProps(context, sourceProps, rawProps, filterObjectKeys),
    someProp([&]() -> CachedProp<bool> {
      try {
        const react::RawValue* rawValue = rawProps.at("someProp", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.someProp;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, const jsi::Value&>)*rawValue;
        return CachedProp<bool>::fromRawValue(*runtime, value, sourceProps.someProp);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("TestView.someProp: ") + exc.what());
      }
    }()),
    someCallback([&]() -> CachedProp<std::function<void(double /* someParam */)>> {
      try {
        const react::RawValue* rawValue = rawProps.at("someCallback", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.someCallback;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, const jsi::Value&>)*rawValue;
        return CachedProp<std::function<void(double /* someParam */)>>::fromRawValue(*runtime, value, sourceProps.someCallback);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("TestView.someCallback: ") + exc.what());
      }
    }()) { }

  HybridTestViewProps::HybridTestViewProps(const HybridTestViewProps& other):
    react::ViewProps(),
    someProp(other.someProp),
    someCallback(other.someCallback) { }

  bool HybridTestViewProps::filterObjectKeys(const std::string& propName) {
    switch (hashString(propName)) {
      case hashString("someProp"): return true;
      case hashString("someCallback"): return true;
      default: return false;
    }
  }

  HybridTestViewComponentDescriptor::HybridTestViewComponentDescriptor(const react::ComponentDescriptorParameters& parameters)
    : ConcreteComponentDescriptor(parameters,
                                  std::make_unique<react::RawPropsParser>(/* enableJsiParser */ true)) {}

  void HybridTestViewComponentDescriptor::adopt(react::ShadowNode& shadowNode) const {
    // This is called immediately after `ShadowNode` is created, cloned or in progress.
#ifdef ANDROID
    // On Android, we need to wrap props in our state, which gets routed through Java and later unwrapped in JNI/C++.
    auto& concreteShadowNode = static_cast<HybridTestViewShadowNode&>(shadowNode);
    const HybridTestViewProps& props = concreteShadowNode.getConcreteProps();
    HybridTestViewState state;
    state.setProps(props);
    concreteShadowNode.setStateData(std::move(state));
#else
    // On iOS, prop updating happens through the updateProps: Obj-C selector.
#endif
  }

} // namespace margelo::nitro::image::views

#endif
