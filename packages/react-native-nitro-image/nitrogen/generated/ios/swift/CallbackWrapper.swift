///
/// CallbackWrapper.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `CallbackWrapper`, backed by a C++ struct.
 */
public typealias CallbackWrapper = margelo.nitro.image.CallbackWrapper

public extension CallbackWrapper {
  private typealias bridge = margelo.nitro.image.bridge.swift

  /**
   * Create a new instance of `CallbackWrapper`.
   */
  init(callback: @escaping () -> Void) {
    self.init({ () -> bridge.Func_void in
      let __closureWrapper = Func_void(callback)
      return bridge.create_Func_void(__closureWrapper.toUnsafe())
    }())
  }

  var callback: () -> Void {
    @inline(__always)
    get {
      return { () -> () -> Void in
        let __wrappedFunction = bridge.wrap_Func_void(self.__callback)
        return { () -> Void in
          __wrappedFunction.call()
        }
      }()
    }
    @inline(__always)
    set {
      self.__callback = { () -> bridge.Func_void in
        let __closureWrapper = Func_void(newValue)
        return bridge.create_Func_void(__closureWrapper.toUnsafe())
      }()
    }
  }
}
