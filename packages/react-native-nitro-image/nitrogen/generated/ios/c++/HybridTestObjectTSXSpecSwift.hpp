///
/// HybridTestObjectTSXSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridTestObjectTSXSpec.hpp"

// Forward declaration of `HybridTestObjectTSXSpec_cxx` to properly resolve imports.
namespace NitroImage { class HybridTestObjectTSXSpec_cxx; }





#include "NitroImage-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::image {

  /**
   * The C++ part of HybridTestObjectTSXSpec_cxx.swift.
   *
   * HybridTestObjectTSXSpecSwift (C++) accesses HybridTestObjectTSXSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridTestObjectTSXSpec_cxx can directly inherit from the C++ class HybridTestObjectTSXSpec
   * to simplify the whole structure and memory management.
   */
  class HybridTestObjectTSXSpecSwift: public virtual HybridTestObjectTSXSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridTestObjectTSXSpecSwift(const NitroImage::HybridTestObjectTSXSpec_cxx& swiftPart):
      HybridObject(HybridTestObjectTSXSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroImage::HybridTestObjectTSXSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    inline double getTestValue() noexcept override {
      return _swiftPart.getTestValue();
    }

  public:
    // Methods
    

  private:
    NitroImage::HybridTestObjectTSXSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::image
