///
/// JHybridTestViewSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridTestViewSpec.hpp"



#include <string>
#include <functional>
#include "JFunc_void_double.hpp"

namespace margelo::nitro::image {

  jni::local_ref<JHybridTestViewSpec::jhybriddata> JHybridTestViewSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridTestViewSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridTestViewSpec::initHybrid),
    });
  }

  size_t JHybridTestViewSpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  std::string JHybridTestViewSpec::getSomeProp() {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<jni::JString>()>("getSomeProp");
    auto __result = method(_javaPart);
    return __result->toStdString();
  }
  void JHybridTestViewSpec::setSomeProp(const std::string& someProp) {
    static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<jni::JString> /* someProp */)>("setSomeProp");
    method(_javaPart, jni::make_jstring(someProp));
  }
  std::function<void(double /* value */)> JHybridTestViewSpec::getSomeCallback() {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JFunc_void_double::javaobject>()>("getSomeCallback");
    auto __result = method(_javaPart);
    return __result->cthis()->getFunction();
  }
  void JHybridTestViewSpec::setSomeCallback(const std::function<void(double /* value */)>& someCallback) {
    static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<JFunc_void_double::javaobject> /* someCallback */)>("setSomeCallback");
    method(_javaPart, JFunc_void_double::fromCpp(someCallback));
  }

  // Methods
  double JHybridTestViewSpec::someRefMethod() {
    static const auto method = _javaPart->getClass()->getMethod<double()>("someRefMethod");
    auto __result = method(_javaPart);
    return __result;
  }

} // namespace margelo::nitro::image
