///
/// JCallbackWrapper.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "CallbackWrapper.hpp"

#include "JFunc_void.hpp"
#include <functional>

namespace margelo::nitro::image {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "CallbackWrapper" and the the Kotlin data class "CallbackWrapper".
   */
  struct JCallbackWrapper final: public jni::JavaClass<JCallbackWrapper> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/image/CallbackWrapper;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct CallbackWrapper by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    CallbackWrapper toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldCallback = clazz->getField<JFunc_void::javaobject>("callback");
      jni::local_ref<JFunc_void::javaobject> callback = this->getFieldValue(fieldCallback);
      return CallbackWrapper(
        [&]() -> std::function<void()> {
          if (callback->isInstanceOf(JFunc_void_cxx::javaClassStatic())) [[likely]] {
            auto downcast = jni::static_ref_cast<JFunc_void_cxx::javaobject>(callback);
            return downcast->cthis()->getFunction();
          } else {
            return [callback]() -> void {
              return callback->invoke();
            };
          }
        }()
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JCallbackWrapper::javaobject> fromCpp(const CallbackWrapper& value) {
      return newInstance(
        JFunc_void_cxx::fromCpp(value.callback)
      );
    }
  };

} // namespace margelo::nitro::image
