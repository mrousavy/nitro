///
/// JHybridTestObjectSwiftKotlinSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridTestObjectSwiftKotlinSpec.hpp"

// Forward declaration of `HybridTestObjectSwiftKotlinSpec` to properly resolve imports.
namespace margelo::nitro::image { class HybridTestObjectSwiftKotlinSpec; }
// Forward declaration of `Powertrain` to properly resolve imports.
namespace margelo::nitro::image { enum class Powertrain; }
// Forward declaration of `OldEnum` to properly resolve imports.
namespace margelo::nitro::image { enum class OldEnum; }
// Forward declaration of `Person` to properly resolve imports.
namespace margelo::nitro::image { struct Person; }
// Forward declaration of `AnyMap` to properly resolve imports.
namespace NitroModules { class AnyMap; }
// Forward declaration of `Car` to properly resolve imports.
namespace margelo::nitro::image { struct Car; }
// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `HybridChildSpec` to properly resolve imports.
namespace margelo::nitro::image { class HybridChildSpec; }
// Forward declaration of `HybridBaseSpec` to properly resolve imports.
namespace margelo::nitro::image { class HybridBaseSpec; }
// Forward declaration of `JsStyleStruct` to properly resolve imports.
namespace margelo::nitro::image { struct JsStyleStruct; }

#include <memory>
#include "HybridTestObjectSwiftKotlinSpec.hpp"
#include "JHybridTestObjectSwiftKotlinSpec.hpp"
#include <NitroModules/JNISharedPtr.hpp>
#include <optional>
#include <string>
#include <vector>
#include "Powertrain.hpp"
#include "JPowertrain.hpp"
#include "OldEnum.hpp"
#include "JOldEnum.hpp"
#include <functional>
#include "JFunc_void_double.hpp"
#include <variant>
#include "JVariant_String_Double.hpp"
#include "Person.hpp"
#include "JPerson.hpp"
#include <NitroModules/AnyMap.hpp>
#include <NitroModules/JAnyMap.hpp>
#include <NitroModules/Promise.hpp>
#include <NitroModules/JPromise.hpp>
#include "Car.hpp"
#include "JCar.hpp"
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/JArrayBuffer.hpp>
#include <NitroModules/JUnit.hpp>
#include "HybridChildSpec.hpp"
#include "JHybridChildSpec.hpp"
#include "HybridBaseSpec.hpp"
#include "JHybridBaseSpec.hpp"
#include "JFunc_void_std__vector_Powertrain_.hpp"
#include <exception>
#include "JFunc_void.hpp"
#include "JFunc_void_std__optional_double_.hpp"
#include "JFunc_std__shared_ptr_Promise_double__.hpp"
#include "JFunc_std__shared_ptr_Promise_std__shared_ptr_Promise_double____.hpp"
#include "JFunc_std__shared_ptr_Promise_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer_____.hpp"
#include "JFunc_std__shared_ptr_Promise_std__string__.hpp"
#include "JFunc_void_std__string.hpp"
#include "JsStyleStruct.hpp"
#include "JJsStyleStruct.hpp"

namespace margelo::nitro::image {

  jni::local_ref<JHybridTestObjectSwiftKotlinSpec::jhybriddata> JHybridTestObjectSwiftKotlinSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridTestObjectSwiftKotlinSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridTestObjectSwiftKotlinSpec::initHybrid),
    });
  }

  size_t JHybridTestObjectSwiftKotlinSpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  std::shared_ptr<margelo::nitro::image::HybridTestObjectSwiftKotlinSpec> JHybridTestObjectSwiftKotlinSpec::getThisObject() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JHybridTestObjectSwiftKotlinSpec::javaobject>()>("getThisObject");
      auto __result = method(_javaPart);
      return JNISharedPtr::make_shared_from_jni<JHybridTestObjectSwiftKotlinSpec>(jni::make_global(__result));
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::optional<std::shared_ptr<margelo::nitro::image::HybridTestObjectSwiftKotlinSpec>> JHybridTestObjectSwiftKotlinSpec::getOptionalHybrid() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JHybridTestObjectSwiftKotlinSpec::javaobject>()>("getOptionalHybrid");
      auto __result = method(_javaPart);
      return __result != nullptr ? std::make_optional(JNISharedPtr::make_shared_from_jni<JHybridTestObjectSwiftKotlinSpec>(jni::make_global(__result))) : std::nullopt;
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  void JHybridTestObjectSwiftKotlinSpec::setOptionalHybrid(const std::optional<std::shared_ptr<margelo::nitro::image::HybridTestObjectSwiftKotlinSpec>>& optionalHybrid) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<JHybridTestObjectSwiftKotlinSpec::javaobject> /* optionalHybrid */)>("setOptionalHybrid");
      method(_javaPart, optionalHybrid.has_value() ? std::dynamic_pointer_cast<JHybridTestObjectSwiftKotlinSpec>(optionalHybrid.value())->getJavaPart() : nullptr);
         
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  double JHybridTestObjectSwiftKotlinSpec::getNumberValue() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<double()>("getNumberValue");
      auto __result = method(_javaPart);
      return __result;
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  void JHybridTestObjectSwiftKotlinSpec::setNumberValue(double numberValue) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<void(double /* numberValue */)>("setNumberValue");
      method(_javaPart, numberValue);
         
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  bool JHybridTestObjectSwiftKotlinSpec::getBoolValue() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jboolean()>("getBoolValue");
      auto __result = method(_javaPart);
      return static_cast<bool>(__result);
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  void JHybridTestObjectSwiftKotlinSpec::setBoolValue(bool boolValue) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<void(jboolean /* boolValue */)>("setBoolValue");
      method(_javaPart, boolValue);
         
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::string JHybridTestObjectSwiftKotlinSpec::getStringValue() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<jni::JString>()>("getStringValue");
      auto __result = method(_javaPart);
      return __result->toStdString();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  void JHybridTestObjectSwiftKotlinSpec::setStringValue(const std::string& stringValue) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<jni::JString> /* stringValue */)>("setStringValue");
      method(_javaPart, jni::make_jstring(stringValue));
         
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  int64_t JHybridTestObjectSwiftKotlinSpec::getBigintValue() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<int64_t()>("getBigintValue");
      auto __result = method(_javaPart);
      return __result;
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  void JHybridTestObjectSwiftKotlinSpec::setBigintValue(int64_t bigintValue) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<void(int64_t /* bigintValue */)>("setBigintValue");
      method(_javaPart, bigintValue);
         
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::optional<std::string> JHybridTestObjectSwiftKotlinSpec::getStringOrUndefined() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<jni::JString>()>("getStringOrUndefined");
      auto __result = method(_javaPart);
      return __result != nullptr ? std::make_optional(__result->toStdString()) : std::nullopt;
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  void JHybridTestObjectSwiftKotlinSpec::setStringOrUndefined(const std::optional<std::string>& stringOrUndefined) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<jni::JString> /* stringOrUndefined */)>("setStringOrUndefined");
      method(_javaPart, stringOrUndefined.has_value() ? jni::make_jstring(stringOrUndefined.value()) : nullptr);
         
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::optional<std::string> JHybridTestObjectSwiftKotlinSpec::getStringOrNull() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<jni::JString>()>("getStringOrNull");
      auto __result = method(_javaPart);
      return __result != nullptr ? std::make_optional(__result->toStdString()) : std::nullopt;
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  void JHybridTestObjectSwiftKotlinSpec::setStringOrNull(const std::optional<std::string>& stringOrNull) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<jni::JString> /* stringOrNull */)>("setStringOrNull");
      method(_javaPart, stringOrNull.has_value() ? jni::make_jstring(stringOrNull.value()) : nullptr);
         
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::optional<std::string> JHybridTestObjectSwiftKotlinSpec::getOptionalString() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<jni::JString>()>("getOptionalString");
      auto __result = method(_javaPart);
      return __result != nullptr ? std::make_optional(__result->toStdString()) : std::nullopt;
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  void JHybridTestObjectSwiftKotlinSpec::setOptionalString(const std::optional<std::string>& optionalString) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<jni::JString> /* optionalString */)>("setOptionalString");
      method(_javaPart, optionalString.has_value() ? jni::make_jstring(optionalString.value()) : nullptr);
         
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::optional<std::vector<std::string>> JHybridTestObjectSwiftKotlinSpec::getOptionalArray() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<jni::JArrayClass<jni::JString>>()>("getOptionalArray");
      auto __result = method(_javaPart);
      return __result != nullptr ? std::make_optional([&]() {
        size_t __size = __result->size();
        std::vector<std::string> __vector;
        __vector.reserve(__size);
        for (size_t __i = 0; __i < __size; __i++) {
          auto __element = __result->getElement(__i);
          __vector.push_back(__element->toStdString());
        }
        return __vector;
      }()) : std::nullopt;
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  void JHybridTestObjectSwiftKotlinSpec::setOptionalArray(const std::optional<std::vector<std::string>>& optionalArray) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<jni::JArrayClass<jni::JString>> /* optionalArray */)>("setOptionalArray");
      method(_javaPart, optionalArray.has_value() ? [&]() {
        size_t __size = optionalArray.value().size();
        jni::local_ref<jni::JArrayClass<jni::JString>> __array = jni::JArrayClass<jni::JString>::newArray(__size);
        for (size_t __i = 0; __i < __size; __i++) {
          const auto& __element = optionalArray.value()[__i];
          __array->setElement(__i, *jni::make_jstring(__element));
        }
        return __array;
      }() : nullptr);
         
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::optional<Powertrain> JHybridTestObjectSwiftKotlinSpec::getOptionalEnum() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPowertrain>()>("getOptionalEnum");
      auto __result = method(_javaPart);
      return __result != nullptr ? std::make_optional(__result->toCpp()) : std::nullopt;
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  void JHybridTestObjectSwiftKotlinSpec::setOptionalEnum(std::optional<Powertrain> optionalEnum) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<JPowertrain> /* optionalEnum */)>("setOptionalEnum");
      method(_javaPart, optionalEnum.has_value() ? JPowertrain::fromCpp(optionalEnum.value()) : nullptr);
         
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::optional<OldEnum> JHybridTestObjectSwiftKotlinSpec::getOptionalOldEnum() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JOldEnum>()>("getOptionalOldEnum");
      auto __result = method(_javaPart);
      return __result != nullptr ? std::make_optional(__result->toCpp()) : std::nullopt;
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  void JHybridTestObjectSwiftKotlinSpec::setOptionalOldEnum(std::optional<OldEnum> optionalOldEnum) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<JOldEnum> /* optionalOldEnum */)>("setOptionalOldEnum");
      method(_javaPart, optionalOldEnum.has_value() ? JOldEnum::fromCpp(optionalOldEnum.value()) : nullptr);
         
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::optional<std::function<void(double /* value */)>> JHybridTestObjectSwiftKotlinSpec::getOptionalCallback() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JFunc_void_double::javaobject>()>("getOptionalCallback_cxx");
      auto __result = method(_javaPart);
      return __result != nullptr ? std::make_optional(__result->cthis()->getFunction()) : std::nullopt;
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  void JHybridTestObjectSwiftKotlinSpec::setOptionalCallback(const std::optional<std::function<void(double /* value */)>>& optionalCallback) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<JFunc_void_double::javaobject> /* optionalCallback */)>("setOptionalCallback_cxx");
      method(_javaPart, optionalCallback.has_value() ? JFunc_void_double::fromCpp(optionalCallback.value()) : nullptr);
         
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::variant<std::string, double> JHybridTestObjectSwiftKotlinSpec::getSomeVariant() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JVariant_String_Double>()>("getSomeVariant");
      auto __result = method(_javaPart);
      return __result->toCpp();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  void JHybridTestObjectSwiftKotlinSpec::setSomeVariant(const std::variant<std::string, double>& someVariant) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<JVariant_String_Double> /* someVariant */)>("setSomeVariant");
      method(_javaPart, JVariant_String_Double::fromCpp(someVariant));
         
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }

  // Methods
  std::shared_ptr<margelo::nitro::image::HybridTestObjectSwiftKotlinSpec> JHybridTestObjectSwiftKotlinSpec::newTestObject() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JHybridTestObjectSwiftKotlinSpec::javaobject>()>("newTestObject");
      auto __result = method(_javaPart);
      return JNISharedPtr::make_shared_from_jni<JHybridTestObjectSwiftKotlinSpec>(jni::make_global(__result));
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  void JHybridTestObjectSwiftKotlinSpec::simpleFunc() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<void()>("simpleFunc");
      method(_javaPart);
         
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  double JHybridTestObjectSwiftKotlinSpec::addNumbers(double a, double b) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<double(double /* a */, double /* b */)>("addNumbers");
      auto __result = method(_javaPart, a, b);
      return __result;
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::string JHybridTestObjectSwiftKotlinSpec::addStrings(const std::string& a, const std::string& b) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<jni::JString>(jni::alias_ref<jni::JString> /* a */, jni::alias_ref<jni::JString> /* b */)>("addStrings");
      auto __result = method(_javaPart, jni::make_jstring(a), jni::make_jstring(b));
      return __result->toStdString();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  void JHybridTestObjectSwiftKotlinSpec::multipleArguments(double num, const std::string& str, bool boo) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<void(double /* num */, jni::alias_ref<jni::JString> /* str */, jboolean /* boo */)>("multipleArguments");
      method(_javaPart, num, jni::make_jstring(str), boo);
         
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::vector<std::string> JHybridTestObjectSwiftKotlinSpec::bounceStrings(const std::vector<std::string>& array) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<jni::JArrayClass<jni::JString>>(jni::alias_ref<jni::JArrayClass<jni::JString>> /* array */)>("bounceStrings");
      auto __result = method(_javaPart, [&]() {
        size_t __size = array.size();
        jni::local_ref<jni::JArrayClass<jni::JString>> __array = jni::JArrayClass<jni::JString>::newArray(__size);
        for (size_t __i = 0; __i < __size; __i++) {
          const auto& __element = array[__i];
          __array->setElement(__i, *jni::make_jstring(__element));
        }
        return __array;
      }());
      return [&]() {
        size_t __size = __result->size();
        std::vector<std::string> __vector;
        __vector.reserve(__size);
        for (size_t __i = 0; __i < __size; __i++) {
          auto __element = __result->getElement(__i);
          __vector.push_back(__element->toStdString());
        }
        return __vector;
      }();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::vector<double> JHybridTestObjectSwiftKotlinSpec::bounceNumbers(const std::vector<double>& array) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<jni::JArrayDouble>(jni::alias_ref<jni::JArrayDouble> /* array */)>("bounceNumbers");
      auto __result = method(_javaPart, [&]() {
        size_t __size = array.size();
        jni::local_ref<jni::JArrayDouble> __array = jni::JArrayDouble::newArray(__size);
        __array->setRegion(0, __size, array.data());
        return __array;
      }());
      return [&]() {
        size_t __size = __result->size();
        std::vector<double> __vector(__size);
        __result->getRegion(0, __size, __vector.data());
        return __vector;
      }();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::vector<Person> JHybridTestObjectSwiftKotlinSpec::bounceStructs(const std::vector<Person>& array) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<jni::JArrayClass<JPerson>>(jni::alias_ref<jni::JArrayClass<JPerson>> /* array */)>("bounceStructs");
      auto __result = method(_javaPart, [&]() {
        size_t __size = array.size();
        jni::local_ref<jni::JArrayClass<JPerson>> __array = jni::JArrayClass<JPerson>::newArray(__size);
        for (size_t __i = 0; __i < __size; __i++) {
          const auto& __element = array[__i];
          __array->setElement(__i, *JPerson::fromCpp(__element));
        }
        return __array;
      }());
      return [&]() {
        size_t __size = __result->size();
        std::vector<Person> __vector;
        __vector.reserve(__size);
        for (size_t __i = 0; __i < __size; __i++) {
          auto __element = __result->getElement(__i);
          __vector.push_back(__element->toCpp());
        }
        return __vector;
      }();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::vector<Powertrain> JHybridTestObjectSwiftKotlinSpec::bounceEnums(const std::vector<Powertrain>& array) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<jni::JArrayClass<JPowertrain>>(jni::alias_ref<jni::JArrayClass<JPowertrain>> /* array */)>("bounceEnums");
      auto __result = method(_javaPart, [&]() {
        size_t __size = array.size();
        jni::local_ref<jni::JArrayClass<JPowertrain>> __array = jni::JArrayClass<JPowertrain>::newArray(__size);
        for (size_t __i = 0; __i < __size; __i++) {
          const auto& __element = array[__i];
          __array->setElement(__i, *JPowertrain::fromCpp(__element));
        }
        return __array;
      }());
      return [&]() {
        size_t __size = __result->size();
        std::vector<Powertrain> __vector;
        __vector.reserve(__size);
        for (size_t __i = 0; __i < __size; __i++) {
          auto __element = __result->getElement(__i);
          __vector.push_back(__element->toCpp());
        }
        return __vector;
      }();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  void JHybridTestObjectSwiftKotlinSpec::complexEnumCallback(const std::vector<Powertrain>& array, const std::function<void(const std::vector<Powertrain>& /* array */)>& callback) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<jni::JArrayClass<JPowertrain>> /* array */, jni::alias_ref<JFunc_void_std__vector_Powertrain_::javaobject> /* callback */)>("complexEnumCallback_cxx");
      method(_javaPart, [&]() {
        size_t __size = array.size();
        jni::local_ref<jni::JArrayClass<JPowertrain>> __array = jni::JArrayClass<JPowertrain>::newArray(__size);
        for (size_t __i = 0; __i < __size; __i++) {
          const auto& __element = array[__i];
          __array->setElement(__i, *JPowertrain::fromCpp(__element));
        }
        return __array;
      }(), JFunc_void_std__vector_Powertrain_::fromCpp(callback));
         
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::shared_ptr<AnyMap> JHybridTestObjectSwiftKotlinSpec::createMap() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JAnyMap::javaobject>()>("createMap");
      auto __result = method(_javaPart);
      return __result->cthis()->getMap();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::shared_ptr<AnyMap> JHybridTestObjectSwiftKotlinSpec::mapRoundtrip(const std::shared_ptr<AnyMap>& map) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JAnyMap::javaobject>(jni::alias_ref<JAnyMap::javaobject> /* map */)>("mapRoundtrip");
      auto __result = method(_javaPart, JAnyMap::create(map));
      return __result->cthis()->getMap();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  double JHybridTestObjectSwiftKotlinSpec::funcThatThrows() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<double()>("funcThatThrows");
      auto __result = method(_javaPart);
      return __result;
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::shared_ptr<Promise<void>> JHybridTestObjectSwiftKotlinSpec::funcThatThrowsBeforePromise() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPromise::javaobject>()>("funcThatThrowsBeforePromise");
      auto __result = method(_javaPart);
      return [&]() {
        auto __promise = Promise<void>::create();
        __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
          __promise->resolve();
        });
        __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
          jni::JniException __jniError(__throwable);
          __promise->reject(std::make_exception_ptr(__jniError));
        });
        return __promise;
      }();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  void JHybridTestObjectSwiftKotlinSpec::throwError(const std::exception_ptr& error) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<jni::JThrowable> /* error */)>("throwError");
      method(_javaPart, jni::getJavaExceptionForCppException(error));
         
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::string JHybridTestObjectSwiftKotlinSpec::tryOptionalParams(double num, bool boo, const std::optional<std::string>& str) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<jni::JString>(double /* num */, jboolean /* boo */, jni::alias_ref<jni::JString> /* str */)>("tryOptionalParams");
      auto __result = method(_javaPart, num, boo, str.has_value() ? jni::make_jstring(str.value()) : nullptr);
      return __result->toStdString();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::string JHybridTestObjectSwiftKotlinSpec::tryMiddleParam(double num, std::optional<bool> boo, const std::string& str) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<jni::JString>(double /* num */, jni::alias_ref<jni::JBoolean> /* boo */, jni::alias_ref<jni::JString> /* str */)>("tryMiddleParam");
      auto __result = method(_javaPart, num, boo.has_value() ? jni::JBoolean::valueOf(boo.value()) : nullptr, jni::make_jstring(str));
      return __result->toStdString();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::optional<Powertrain> JHybridTestObjectSwiftKotlinSpec::tryOptionalEnum(std::optional<Powertrain> value) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPowertrain>(jni::alias_ref<JPowertrain> /* value */)>("tryOptionalEnum");
      auto __result = method(_javaPart, value.has_value() ? JPowertrain::fromCpp(value.value()) : nullptr);
      return __result != nullptr ? std::make_optional(__result->toCpp()) : std::nullopt;
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  int64_t JHybridTestObjectSwiftKotlinSpec::calculateFibonacciSync(double value) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<int64_t(double /* value */)>("calculateFibonacciSync");
      auto __result = method(_javaPart, value);
      return __result;
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::shared_ptr<Promise<int64_t>> JHybridTestObjectSwiftKotlinSpec::calculateFibonacciAsync(double value) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPromise::javaobject>(double /* value */)>("calculateFibonacciAsync");
      auto __result = method(_javaPart, value);
      return [&]() {
        auto __promise = Promise<int64_t>::create();
        __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
          auto __result = jni::static_ref_cast<jni::JLong>(__boxedResult);
          __promise->resolve(__result->value());
        });
        __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
          jni::JniException __jniError(__throwable);
          __promise->reject(std::make_exception_ptr(__jniError));
        });
        return __promise;
      }();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::shared_ptr<Promise<void>> JHybridTestObjectSwiftKotlinSpec::wait(double seconds) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPromise::javaobject>(double /* seconds */)>("wait");
      auto __result = method(_javaPart, seconds);
      return [&]() {
        auto __promise = Promise<void>::create();
        __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
          __promise->resolve();
        });
        __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
          jni::JniException __jniError(__throwable);
          __promise->reject(std::make_exception_ptr(__jniError));
        });
        return __promise;
      }();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::shared_ptr<Promise<void>> JHybridTestObjectSwiftKotlinSpec::promiseThrows() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPromise::javaobject>()>("promiseThrows");
      auto __result = method(_javaPart);
      return [&]() {
        auto __promise = Promise<void>::create();
        __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
          __promise->resolve();
        });
        __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
          jni::JniException __jniError(__throwable);
          __promise->reject(std::make_exception_ptr(__jniError));
        });
        return __promise;
      }();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::shared_ptr<Promise<double>> JHybridTestObjectSwiftKotlinSpec::awaitAndGetPromise(const std::shared_ptr<Promise<double>>& promise) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JPromise::javaobject> /* promise */)>("awaitAndGetPromise");
      auto __result = method(_javaPart, [&]() {
        jni::local_ref<JPromise::javaobject> __localPromise = JPromise::create();
        jni::global_ref<JPromise::javaobject> __promise = jni::make_global(__localPromise);
        promise->addOnResolvedListener([=](const double& __result) {
          __promise->cthis()->resolve(jni::JDouble::valueOf(__result));
        });
        promise->addOnRejectedListener([=](const std::exception_ptr& __error) {
          auto __jniError = jni::getJavaExceptionForCppException(__error);
          __promise->cthis()->reject(__jniError);
        });
        return __localPromise;
      }());
      return [&]() {
        auto __promise = Promise<double>::create();
        __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
          auto __result = jni::static_ref_cast<jni::JDouble>(__boxedResult);
          __promise->resolve(__result->value());
        });
        __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
          jni::JniException __jniError(__throwable);
          __promise->reject(std::make_exception_ptr(__jniError));
        });
        return __promise;
      }();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::shared_ptr<Promise<Car>> JHybridTestObjectSwiftKotlinSpec::awaitAndGetComplexPromise(const std::shared_ptr<Promise<Car>>& promise) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JPromise::javaobject> /* promise */)>("awaitAndGetComplexPromise");
      auto __result = method(_javaPart, [&]() {
        jni::local_ref<JPromise::javaobject> __localPromise = JPromise::create();
        jni::global_ref<JPromise::javaobject> __promise = jni::make_global(__localPromise);
        promise->addOnResolvedListener([=](const Car& __result) {
          __promise->cthis()->resolve(JCar::fromCpp(__result));
        });
        promise->addOnRejectedListener([=](const std::exception_ptr& __error) {
          auto __jniError = jni::getJavaExceptionForCppException(__error);
          __promise->cthis()->reject(__jniError);
        });
        return __localPromise;
      }());
      return [&]() {
        auto __promise = Promise<Car>::create();
        __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
          auto __result = jni::static_ref_cast<JCar>(__boxedResult);
          __promise->resolve(__result->toCpp());
        });
        __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
          jni::JniException __jniError(__throwable);
          __promise->reject(std::make_exception_ptr(__jniError));
        });
        return __promise;
      }();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::shared_ptr<Promise<void>> JHybridTestObjectSwiftKotlinSpec::awaitPromise(const std::shared_ptr<Promise<void>>& promise) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JPromise::javaobject> /* promise */)>("awaitPromise");
      auto __result = method(_javaPart, [&]() {
        jni::local_ref<JPromise::javaobject> __localPromise = JPromise::create();
        jni::global_ref<JPromise::javaobject> __promise = jni::make_global(__localPromise);
        promise->addOnResolvedListener([=]() {
          __promise->cthis()->resolve(JUnit::instance());
        });
        promise->addOnRejectedListener([=](const std::exception_ptr& __error) {
          auto __jniError = jni::getJavaExceptionForCppException(__error);
          __promise->cthis()->reject(__jniError);
        });
        return __localPromise;
      }());
      return [&]() {
        auto __promise = Promise<void>::create();
        __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
          __promise->resolve();
        });
        __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
          jni::JniException __jniError(__throwable);
          __promise->reject(std::make_exception_ptr(__jniError));
        });
        return __promise;
      }();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  void JHybridTestObjectSwiftKotlinSpec::callCallback(const std::function<void()>& callback) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<JFunc_void::javaobject> /* callback */)>("callCallback_cxx");
      method(_javaPart, JFunc_void::fromCpp(callback));
         
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  void JHybridTestObjectSwiftKotlinSpec::callAll(const std::function<void()>& first, const std::function<void()>& second, const std::function<void()>& third) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<JFunc_void::javaobject> /* first */, jni::alias_ref<JFunc_void::javaobject> /* second */, jni::alias_ref<JFunc_void::javaobject> /* third */)>("callAll_cxx");
      method(_javaPart, JFunc_void::fromCpp(first), JFunc_void::fromCpp(second), JFunc_void::fromCpp(third));
         
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  void JHybridTestObjectSwiftKotlinSpec::callWithOptional(std::optional<double> value, const std::function<void(std::optional<double> /* maybe */)>& callback) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<jni::JDouble> /* value */, jni::alias_ref<JFunc_void_std__optional_double_::javaobject> /* callback */)>("callWithOptional_cxx");
      method(_javaPart, value.has_value() ? jni::JDouble::valueOf(value.value()) : nullptr, JFunc_void_std__optional_double_::fromCpp(callback));
         
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::shared_ptr<Promise<double>> JHybridTestObjectSwiftKotlinSpec::callSumUpNTimes(const std::function<std::shared_ptr<Promise<double>>()>& callback, double n) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JFunc_std__shared_ptr_Promise_double__::javaobject> /* callback */, double /* n */)>("callSumUpNTimes_cxx");
      auto __result = method(_javaPart, JFunc_std__shared_ptr_Promise_double__::fromCpp(callback), n);
      return [&]() {
        auto __promise = Promise<double>::create();
        __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
          auto __result = jni::static_ref_cast<jni::JDouble>(__boxedResult);
          __promise->resolve(__result->value());
        });
        __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
          jni::JniException __jniError(__throwable);
          __promise->reject(std::make_exception_ptr(__jniError));
        });
        return __promise;
      }();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::shared_ptr<Promise<double>> JHybridTestObjectSwiftKotlinSpec::callbackAsyncPromise(const std::function<std::shared_ptr<Promise<std::shared_ptr<Promise<double>>>>()>& callback) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JFunc_std__shared_ptr_Promise_std__shared_ptr_Promise_double____::javaobject> /* callback */)>("callbackAsyncPromise_cxx");
      auto __result = method(_javaPart, JFunc_std__shared_ptr_Promise_std__shared_ptr_Promise_double____::fromCpp(callback));
      return [&]() {
        auto __promise = Promise<double>::create();
        __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
          auto __result = jni::static_ref_cast<jni::JDouble>(__boxedResult);
          __promise->resolve(__result->value());
        });
        __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
          jni::JniException __jniError(__throwable);
          __promise->reject(std::make_exception_ptr(__jniError));
        });
        return __promise;
      }();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>> JHybridTestObjectSwiftKotlinSpec::callbackAsyncPromiseBuffer(const std::function<std::shared_ptr<Promise<std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>>>>()>& callback) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JFunc_std__shared_ptr_Promise_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer_____::javaobject> /* callback */)>("callbackAsyncPromiseBuffer_cxx");
      auto __result = method(_javaPart, JFunc_std__shared_ptr_Promise_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer_____::fromCpp(callback));
      return [&]() {
        auto __promise = Promise<std::shared_ptr<ArrayBuffer>>::create();
        __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
          auto __result = jni::static_ref_cast<JArrayBuffer::javaobject>(__boxedResult);
          __promise->resolve(__result->cthis()->getArrayBuffer());
        });
        __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
          jni::JniException __jniError(__throwable);
          __promise->reject(std::make_exception_ptr(__jniError));
        });
        return __promise;
      }();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::function<void(double /* value */)> JHybridTestObjectSwiftKotlinSpec::getComplexCallback() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JFunc_void_double::javaobject>()>("getComplexCallback_cxx");
      auto __result = method(_javaPart);
      return __result->cthis()->getFunction();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::shared_ptr<Promise<double>> JHybridTestObjectSwiftKotlinSpec::getValueFromJSCallbackAndWait(const std::function<std::shared_ptr<Promise<double>>()>& getValue) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JFunc_std__shared_ptr_Promise_double__::javaobject> /* getValue */)>("getValueFromJSCallbackAndWait_cxx");
      auto __result = method(_javaPart, JFunc_std__shared_ptr_Promise_double__::fromCpp(getValue));
      return [&]() {
        auto __promise = Promise<double>::create();
        __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
          auto __result = jni::static_ref_cast<jni::JDouble>(__boxedResult);
          __promise->resolve(__result->value());
        });
        __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
          jni::JniException __jniError(__throwable);
          __promise->reject(std::make_exception_ptr(__jniError));
        });
        return __promise;
      }();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::shared_ptr<Promise<void>> JHybridTestObjectSwiftKotlinSpec::getValueFromJsCallback(const std::function<std::shared_ptr<Promise<std::string>>()>& callback, const std::function<void(const std::string& /* valueFromJs */)>& andThenCall) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JFunc_std__shared_ptr_Promise_std__string__::javaobject> /* callback */, jni::alias_ref<JFunc_void_std__string::javaobject> /* andThenCall */)>("getValueFromJsCallback_cxx");
      auto __result = method(_javaPart, JFunc_std__shared_ptr_Promise_std__string__::fromCpp(callback), JFunc_void_std__string::fromCpp(andThenCall));
      return [&]() {
        auto __promise = Promise<void>::create();
        __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
          __promise->resolve();
        });
        __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
          jni::JniException __jniError(__throwable);
          __promise->reject(std::make_exception_ptr(__jniError));
        });
        return __promise;
      }();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  Car JHybridTestObjectSwiftKotlinSpec::getCar() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JCar>()>("getCar");
      auto __result = method(_javaPart);
      return __result->toCpp();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  bool JHybridTestObjectSwiftKotlinSpec::isCarElectric(const Car& car) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jboolean(jni::alias_ref<JCar> /* car */)>("isCarElectric");
      auto __result = method(_javaPart, JCar::fromCpp(car));
      return static_cast<bool>(__result);
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::optional<Person> JHybridTestObjectSwiftKotlinSpec::getDriver(const Car& car) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPerson>(jni::alias_ref<JCar> /* car */)>("getDriver");
      auto __result = method(_javaPart, JCar::fromCpp(car));
      return __result != nullptr ? std::make_optional(__result->toCpp()) : std::nullopt;
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  void JHybridTestObjectSwiftKotlinSpec::jsStyleObjectAsParameters(const JsStyleStruct& params) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<JJsStyleStruct> /* params */)>("jsStyleObjectAsParameters_cxx");
      method(_javaPart, JJsStyleStruct::fromCpp(params));
         
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::shared_ptr<ArrayBuffer> JHybridTestObjectSwiftKotlinSpec::createArrayBuffer() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JArrayBuffer::javaobject>()>("createArrayBuffer");
      auto __result = method(_javaPart);
      return __result->cthis()->getArrayBuffer();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  double JHybridTestObjectSwiftKotlinSpec::getBufferLastItem(const std::shared_ptr<ArrayBuffer>& buffer) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<double(jni::alias_ref<JArrayBuffer::javaobject> /* buffer */)>("getBufferLastItem");
      auto __result = method(_javaPart, JArrayBuffer::wrap(buffer));
      return __result;
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  void JHybridTestObjectSwiftKotlinSpec::setAllValuesTo(const std::shared_ptr<ArrayBuffer>& buffer, double value) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<JArrayBuffer::javaobject> /* buffer */, double /* value */)>("setAllValuesTo");
      method(_javaPart, JArrayBuffer::wrap(buffer), value);
         
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>> JHybridTestObjectSwiftKotlinSpec::createArrayBufferAsync() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPromise::javaobject>()>("createArrayBufferAsync");
      auto __result = method(_javaPart);
      return [&]() {
        auto __promise = Promise<std::shared_ptr<ArrayBuffer>>::create();
        __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
          auto __result = jni::static_ref_cast<JArrayBuffer::javaobject>(__boxedResult);
          __promise->resolve(__result->cthis()->getArrayBuffer());
        });
        __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
          jni::JniException __jniError(__throwable);
          __promise->reject(std::make_exception_ptr(__jniError));
        });
        return __promise;
      }();
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::shared_ptr<margelo::nitro::image::HybridChildSpec> JHybridTestObjectSwiftKotlinSpec::createChild() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JHybridChildSpec::javaobject>()>("createChild");
      auto __result = method(_javaPart);
      return JNISharedPtr::make_shared_from_jni<JHybridChildSpec>(jni::make_global(__result));
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::shared_ptr<margelo::nitro::image::HybridBaseSpec> JHybridTestObjectSwiftKotlinSpec::createBase() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JHybridBaseSpec::javaobject>()>("createBase");
      auto __result = method(_javaPart);
      return JNISharedPtr::make_shared_from_jni<JHybridBaseSpec>(jni::make_global(__result));
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::shared_ptr<margelo::nitro::image::HybridBaseSpec> JHybridTestObjectSwiftKotlinSpec::createBaseActualChild() {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JHybridBaseSpec::javaobject>()>("createBaseActualChild");
      auto __result = method(_javaPart);
      return JNISharedPtr::make_shared_from_jni<JHybridBaseSpec>(jni::make_global(__result));
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::shared_ptr<margelo::nitro::image::HybridChildSpec> JHybridTestObjectSwiftKotlinSpec::bounceChild(const std::shared_ptr<margelo::nitro::image::HybridChildSpec>& child) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JHybridChildSpec::javaobject>(jni::alias_ref<JHybridChildSpec::javaobject> /* child */)>("bounceChild");
      auto __result = method(_javaPart, std::dynamic_pointer_cast<JHybridChildSpec>(child)->getJavaPart());
      return JNISharedPtr::make_shared_from_jni<JHybridChildSpec>(jni::make_global(__result));
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::shared_ptr<margelo::nitro::image::HybridBaseSpec> JHybridTestObjectSwiftKotlinSpec::bounceBase(const std::shared_ptr<margelo::nitro::image::HybridBaseSpec>& base) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JHybridBaseSpec::javaobject>(jni::alias_ref<JHybridBaseSpec::javaobject> /* base */)>("bounceBase");
      auto __result = method(_javaPart, std::dynamic_pointer_cast<JHybridBaseSpec>(base)->getJavaPart());
      return JNISharedPtr::make_shared_from_jni<JHybridBaseSpec>(jni::make_global(__result));
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::shared_ptr<margelo::nitro::image::HybridBaseSpec> JHybridTestObjectSwiftKotlinSpec::bounceChildBase(const std::shared_ptr<margelo::nitro::image::HybridChildSpec>& child) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JHybridBaseSpec::javaobject>(jni::alias_ref<JHybridChildSpec::javaobject> /* child */)>("bounceChildBase");
      auto __result = method(_javaPart, std::dynamic_pointer_cast<JHybridChildSpec>(child)->getJavaPart());
      return JNISharedPtr::make_shared_from_jni<JHybridBaseSpec>(jni::make_global(__result));
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }
  std::shared_ptr<margelo::nitro::image::HybridChildSpec> JHybridTestObjectSwiftKotlinSpec::castBase(const std::shared_ptr<margelo::nitro::image::HybridBaseSpec>& base) {
    try {
      
      static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JHybridChildSpec::javaobject>(jni::alias_ref<JHybridBaseSpec::javaobject> /* base */)>("castBase");
      auto __result = method(_javaPart, std::dynamic_pointer_cast<JHybridBaseSpec>(base)->getJavaPart());
      return JNISharedPtr::make_shared_from_jni<JHybridChildSpec>(jni::make_global(__result));
          
    } catch (const jni::JniException& exc) {
      throw std::runtime_error(exc.what());
    }
  }

} // namespace margelo::nitro::image
