///
/// JHybridBaseSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridBaseSpec.hpp"





namespace margelo::nitro::image {

  JHybridBaseSpec::JHybridBaseSpec(jni::alias_ref<jhybridobject> javaPart):
    HybridObject(HybridBaseSpec::TAG),
    _javaPart(jni::make_global(javaPart)) {
#ifdef NITRO_DEBUG
    if (javaPart == nullptr) [[unlikely]] {
      throw std::runtime_error("Tried initializing a new C++ instance of `JHybridBaseSpec` from Java, "
                                "but `javaPart` was null!");
    } else if (!javaPart->isInstanceOf(JHybridBaseSpec::javaClassStatic())) [[unlikely]] {
      throw std::runtime_error("Tried initializing a new C++ instance of `JHybridBaseSpec` from Java, "
                                "but `javaPart` is not an instance of `HybridBaseSpec`!");
    }
#endif
  }

  jni::local_ref<JHybridBaseSpec::jhybriddata> JHybridBaseSpec::initHybrid(jni::alias_ref<jhybridobject> javaPart) {
    return makeCxxInstance(javaPart);
  }

  void JHybridBaseSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridBaseSpec::initHybrid),
    });
  }

  size_t JHybridBaseSpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  double JHybridBaseSpec::getBaseValue() {
    static const auto method = _javaPart->getClass()->getMethod<double()>("getBaseValue");
    auto __result = method(_javaPart);
    return __result;
  }

  // Methods
  

} // namespace margelo::nitro::image
