///
/// JHybridTestViewStateUpdater.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridTestViewStateUpdater.hpp"
#include <NitroModules/NitroDefines.hpp>
#if REACT_NATIVE_VERSION_MINOR >= 78

#include "views/HybridTestViewComponent.hpp"

namespace margelo::nitro::image::views {

using namespace facebook;
using ConcreteStateData = react::ConcreteState<HybridTestViewState>;

void JHybridTestViewStateUpdater::updateViewProps(jni::alias_ref<jni::JClass>,
                                           jni::alias_ref<JHybridTestViewSpec::javaobject> javaView,
                                           jni::alias_ref<react::StateWrapperImpl::javaobject> stateWrapper) {
  JHybridTestViewSpec* view = javaView->cthis();
  const react::State& state = stateWrapper->cthis()->getState();
  // TODO: Can this be a static_cast?
  const auto& concreteState = dynamic_cast<const ConcreteStateData&>(state);
  const HybridTestViewState& data = concreteState.getData();
  const std::optional<HybridTestViewProps>& maybeProps = data.getProps();
  if (!maybeProps.has_value()) {
    // Props aren't set yet!
    throw std::runtime_error("HybridTestViewState's data doesn't contain any props!");
  }
  const HybridTestViewProps& props = maybeProps.value();
  if (props.someProp.isDirty) {
    view->setSomeProp(props.someProp.value);
  }
  if (props.someCallback.isDirty) {
    view->setSomeCallback(props.someCallback.value);
  }
}

} // namespace margelo::nitro::image::views

#endif
