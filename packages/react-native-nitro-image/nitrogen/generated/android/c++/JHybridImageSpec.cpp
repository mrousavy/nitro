///
/// JHybridImageSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridImageSpec.hpp"

// Forward declaration of `ImageSize` to properly resolve imports.
namespace margelo::nitro::image { struct ImageSize; }
// Forward declaration of `PixelFormat` to properly resolve imports.
namespace margelo::nitro::image { enum class PixelFormat; }
// Forward declaration of `ImageFormat` to properly resolve imports.
namespace margelo::nitro::image { enum class ImageFormat; }

#include "ImageSize.hpp"
#include "JImageSize.hpp"
#include "PixelFormat.hpp"
#include "JPixelFormat.hpp"
#include "ImageFormat.hpp"
#include "JImageFormat.hpp"
#include <string>
#include <functional>
#include "JFunc_void_std__string.hpp"

namespace margelo::nitro::image {

  JHybridImageSpec::JHybridImageSpec(jni::alias_ref<jhybridobject> javaPart):
    HybridObject(HybridImageSpec::TAG),
    _javaPart(jni::make_global(javaPart)) {
#ifdef NITRO_DEBUG
    if (javaPart == nullptr) [[unlikely]] {
      throw std::runtime_error("Tried initializing a new C++ instance of `JHybridImageSpec` from Java, "
                                "but `javaPart` was null!");
    } else if (!javaPart->isInstanceOf(JHybridImageSpec::javaClassStatic())) [[unlikely]] {
      throw std::runtime_error("Tried initializing a new C++ instance of `JHybridImageSpec` from Java, "
                                "but `javaPart` is not an instance of `HybridImageSpec`!");
    }
#endif
  }

  jni::local_ref<JHybridImageSpec::jhybriddata> JHybridImageSpec::initHybrid(jni::alias_ref<jhybridobject> javaPart) {
    return makeCxxInstance(javaPart);
  }

  void JHybridImageSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridImageSpec::initHybrid),
    });
  }

  size_t JHybridImageSpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  ImageSize JHybridImageSpec::getSize() {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JImageSize>()>("getSize");
    auto __result = method(_javaPart);
    return __result->toCpp();
  }
  PixelFormat JHybridImageSpec::getPixelFormat() {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPixelFormat>()>("getPixelFormat");
    auto __result = method(_javaPart);
    return __result->toCpp();
  }
  double JHybridImageSpec::getSomeSettableProp() {
    static const auto method = _javaPart->getClass()->getMethod<double()>("getSomeSettableProp");
    auto __result = method(_javaPart);
    return __result;
  }
  void JHybridImageSpec::setSomeSettableProp(double someSettableProp) {
    static const auto method = _javaPart->getClass()->getMethod<void(double /* someSettableProp */)>("setSomeSettableProp");
    method(_javaPart, someSettableProp);
  }

  // Methods
  double JHybridImageSpec::toArrayBuffer(ImageFormat format) {
    static const auto method = _javaPart->getClass()->getMethod<double(jni::alias_ref<JImageFormat> /* format */)>("toArrayBuffer");
    auto __result = method(_javaPart, JImageFormat::fromCpp(format));
    return __result;
  }
  void JHybridImageSpec::saveToFile(const std::string& path, const std::function<void(const std::string& /* path */)>& onFinished) {
    static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<jni::JString> /* path */, jni::alias_ref<JFunc_void_std__string::javaobject> /* onFinished */)>("saveToFile_cxx");
    method(_javaPart, jni::make_jstring(path), JFunc_void_std__string_cxx::fromCpp(onFinished));
  }

} // namespace margelo::nitro::image
