///
/// Variant_Double_______Unit.kt
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

package com.margelo.nitro.test

import com.facebook.proguard.annotations.DoNotStrip


/**
 * Represents the TypeScript variant "Double | () -> Unit".
 */
@Suppress("ClassName")
@DoNotStrip
sealed class Variant_Double_______Unit {
  @DoNotStrip
  data class First(@DoNotStrip val value: Double): Variant_Double_______Unit()
  @DoNotStrip
  data class Second(@DoNotStrip val value: Func_void): Variant_Double_______Unit()

  @Deprecated("getAs() is not type-safe. Use fold/asFirstOrNull/asSecondOrNull instead.", level = DeprecationLevel.ERROR)
  inline fun <reified T> getAs(): T? = when (this) {
    is First -> value as? T
    is Second -> value as? T
  }

  val isFirst: Boolean
    get() = this is First
  val isSecond: Boolean
    get() = this is Second

  fun asFirstOrNull(): Double? {
    val value = (this as? First)?.value ?: return null
    return value
  }
  fun asSecondOrNull(): (() -> Unit)? {
    val value = (this as? Second)?.value ?: return null
    return value
  }

  inline fun <R> match(first: (Double) -> R, second: (() -> Unit) -> R): R {
    return when (this) {
      is First -> first(value)
      is Second -> second(value)
    }
  }

  companion object {
    @JvmStatic
    @DoNotStrip
    fun create(value: Double): Variant_Double_______Unit = First(value)
    @JvmStatic
    @DoNotStrip
    fun create(value: Func_void): Variant_Double_______Unit = Second(value)
  }
}
