///
/// JVariant_______Unit_Double.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JVariant_______Unit_Double.hpp"

namespace margelo::nitro::test {
  /**
   * Converts JVariant_______Unit_Double to std::variant<std::function<void()>, double>
   */
  std::variant<std::function<void()>, double> JVariant_______Unit_Double::toCpp() const {
    if (isInstanceOf(JVariant_______Unit_Double_impl::First::javaClassStatic())) {
      // It's a `std::function<void()>`
      auto jniValue = static_cast<const JVariant_______Unit_Double_impl::First*>(this)->getValue();
      return [&]() -> std::function<void()> {
      if (jniValue->isInstanceOf(JFunc_void_cxx::javaClassStatic())) [[likely]] {
        auto downcast = jni::static_ref_cast<JFunc_void_cxx::javaobject>(jniValue);
        return downcast->cthis()->getFunction();
      } else {
        auto jniValueRef = jni::make_global(jniValue);
        return [jniValueRef]() -> void {
          return jniValueRef->invoke();
        };
      }
    }();
    } else if (isInstanceOf(JVariant_______Unit_Double_impl::Second::javaClassStatic())) {
      // It's a `double`
      auto jniValue = static_cast<const JVariant_______Unit_Double_impl::Second*>(this)->getValue();
      return jniValue;
    }
    throw std::invalid_argument("Variant is unknown Kotlin instance!");
  }
} // namespace margelo::nitro::test
