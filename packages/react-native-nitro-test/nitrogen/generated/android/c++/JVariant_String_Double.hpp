///
/// JVariant_String_Double.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include <variant>

#include <string>
#include <variant>

namespace margelo::nitro::test {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ std::variant and the Java class "Variant_String_Double".
   */
  class JVariant_String_Double: public jni::JavaClass<JVariant_String_Double> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/Variant_String_Double;";

    static jni::local_ref<JVariant_String_Double> create_0(jni::alias_ref<jni::JString> value) {
      static const auto method = javaClassStatic()->getStaticMethod<JVariant_String_Double(jni::alias_ref<jni::JString>)>("create");
      return method(javaClassStatic(), value);
    }
    static jni::local_ref<JVariant_String_Double> create_1(double value) {
      static const auto method = javaClassStatic()->getStaticMethod<JVariant_String_Double(double)>("create");
      return method(javaClassStatic(), value);
    }

    static jni::local_ref<JVariant_String_Double> fromCpp(const std::variant<std::string, double>& variant) {
      switch (variant.index()) {
        case 0: return create_0(jni::make_jstring(std::get<0>(variant)));
        case 1: return create_1(std::get<1>(variant));
        default: throw std::invalid_argument("Variant holds unknown index! (" + std::to_string(variant.index()) + ")");
      }
    }

    [[nodiscard]] std::variant<std::string, double> toCpp() const;
  };

  namespace JVariant_String_Double_impl {
    class First: public jni::JavaClass<First, JVariant_String_Double> {
    public:
      static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/Variant_String_Double$First;";
    
      [[nodiscard]] jni::local_ref<jni::JString> getValue() const {
        static const auto field = javaClassStatic()->getField<jni::JString>("value");
        return getFieldValue(field);
      }
    };
    
    class Second: public jni::JavaClass<Second, JVariant_String_Double> {
    public:
      static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/Variant_String_Double$Second;";
    
      [[nodiscard]] double getValue() const {
        static const auto field = javaClassStatic()->getField<double>("value");
        return getFieldValue(field);
      }
    };
  } // namespace JVariant_String_Double_impl

  std::variant<std::string, double> JVariant_String_Double::toCpp() const {
    if (isInstanceOf(JVariant_String_Double_impl::First::javaClassStatic())) {
      auto jniValue = static_cast<const JVariant_String_Double_impl::First*>(this)->getValue();
      return jniValue->toStdString();
    } else if (isInstanceOf(JVariant_String_Double_impl::Second::javaClassStatic())) {
      auto jniValue = static_cast<const JVariant_String_Double_impl::Second*>(this)->getValue();
      return jniValue;
    }
    throw std::invalid_argument("Variant is unknown Kotlin instance!");
  }

} // namespace margelo::nitro::test
