///
/// JVariant_HybridTestObjectSwiftKotlinSpec_Person.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include <variant>

#include <memory>
#include "HybridTestObjectSwiftKotlinSpec.hpp"
#include "Person.hpp"
#include <variant>
#include "JHybridTestObjectSwiftKotlinSpec.hpp"
#include "JPerson.hpp"
#include <string>

namespace margelo::nitro::test {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ std::variant and the Java class "Variant_HybridTestObjectSwiftKotlinSpec_Person".
   */
  class JVariant_HybridTestObjectSwiftKotlinSpec_Person: public jni::JavaClass<JVariant_HybridTestObjectSwiftKotlinSpec_Person> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/Variant_HybridTestObjectSwiftKotlinSpec_Person;";

    static jni::local_ref<JVariant_HybridTestObjectSwiftKotlinSpec_Person> create_0(jni::alias_ref<JHybridTestObjectSwiftKotlinSpec::javaobject> value) {
      static const auto method = javaClassStatic()->getStaticMethod<JVariant_HybridTestObjectSwiftKotlinSpec_Person(jni::alias_ref<JHybridTestObjectSwiftKotlinSpec::javaobject>)>("create");
      return method(javaClassStatic(), value);
    }
    static jni::local_ref<JVariant_HybridTestObjectSwiftKotlinSpec_Person> create_1(jni::alias_ref<JPerson> value) {
      static const auto method = javaClassStatic()->getStaticMethod<JVariant_HybridTestObjectSwiftKotlinSpec_Person(jni::alias_ref<JPerson>)>("create");
      return method(javaClassStatic(), value);
    }

    static jni::local_ref<JVariant_HybridTestObjectSwiftKotlinSpec_Person> fromCpp(const std::variant<std::shared_ptr<HybridTestObjectSwiftKotlinSpec>, Person>& variant) {
      switch (variant.index()) {
        case 0: return create_0(std::dynamic_pointer_cast<JHybridTestObjectSwiftKotlinSpec>(std::get<0>(variant))->getJavaPart());
        case 1: return create_1(JPerson::fromCpp(std::get<1>(variant)));
        default: throw std::invalid_argument("Variant holds unknown index! (" + std::to_string(variant.index()) + ")");
      }
    }

    [[nodiscard]] std::variant<std::shared_ptr<HybridTestObjectSwiftKotlinSpec>, Person> toCpp() const;
  };

  namespace JVariant_HybridTestObjectSwiftKotlinSpec_Person_impl {
    class First: public jni::JavaClass<First, JVariant_HybridTestObjectSwiftKotlinSpec_Person> {
    public:
      static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/Variant_HybridTestObjectSwiftKotlinSpec_Person$First;";
    
      [[nodiscard]] jni::local_ref<JHybridTestObjectSwiftKotlinSpec::javaobject> getValue() const {
        static const auto field = javaClassStatic()->getField<JHybridTestObjectSwiftKotlinSpec::javaobject>("value");
        return getFieldValue(field);
      }
    };
    
    class Second: public jni::JavaClass<Second, JVariant_HybridTestObjectSwiftKotlinSpec_Person> {
    public:
      static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/Variant_HybridTestObjectSwiftKotlinSpec_Person$Second;";
    
      [[nodiscard]] jni::local_ref<JPerson> getValue() const {
        static const auto field = javaClassStatic()->getField<JPerson>("value");
        return getFieldValue(field);
      }
    };
  } // namespace JVariant_HybridTestObjectSwiftKotlinSpec_Person_impl
} // namespace margelo::nitro::test
