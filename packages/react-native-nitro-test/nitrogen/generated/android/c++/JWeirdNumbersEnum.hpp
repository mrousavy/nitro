///
/// JWeirdNumbersEnum.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "WeirdNumbersEnum.hpp"

namespace margelo::nitro::test {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "WeirdNumbersEnum" and the the Kotlin enum "WeirdNumbersEnum".
   */
  struct JWeirdNumbersEnum final: public jni::JavaClass<JWeirdNumbersEnum> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/WeirdNumbersEnum;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum WeirdNumbersEnum.
     */
    [[maybe_unused]]
    [[nodiscard]]
    WeirdNumbersEnum toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("value");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<WeirdNumbersEnum>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JWeirdNumbersEnum> fromCpp(WeirdNumbersEnum value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldA = clazz->getStaticField<JWeirdNumbersEnum>("A");
      static const auto fieldB = clazz->getStaticField<JWeirdNumbersEnum>("B");
      static const auto fieldC = clazz->getStaticField<JWeirdNumbersEnum>("C");
      
      switch (value) {
        case WeirdNumbersEnum::A:
          return clazz->getStaticFieldValue(fieldA);
        case WeirdNumbersEnum::B:
          return clazz->getStaticFieldValue(fieldB);
        case WeirdNumbersEnum::C:
          return clazz->getStaticFieldValue(fieldC);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::test
