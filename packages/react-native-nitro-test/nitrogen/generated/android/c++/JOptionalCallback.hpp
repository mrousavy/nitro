///
/// JOptionalCallback.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "OptionalCallback.hpp"

#include "JFunc_void.hpp"
#include "JVariant_Double_______Unit.hpp"
#include <functional>
#include <optional>
#include <variant>

namespace margelo::nitro::test {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "OptionalCallback" and the the Kotlin data class "OptionalCallback".
   */
  struct JOptionalCallback final: public jni::JavaClass<JOptionalCallback> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/OptionalCallback;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct OptionalCallback by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    OptionalCallback toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldCallback = clazz->getField<JVariant_Double_______Unit>("callback");
      jni::local_ref<JVariant_Double_______Unit> callback = this->getFieldValue(fieldCallback);
      return OptionalCallback(
        callback != nullptr ? std::make_optional(callback->toCpp()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JOptionalCallback::javaobject> fromCpp(const OptionalCallback& value) {
      using JSignature = JOptionalCallback(jni::alias_ref<JVariant_Double_______Unit>);
      static const auto clazz = javaClassStatic();
      static const auto create = clazz->getStaticMethod<JSignature>("fromCpp");
      return create(
        clazz,
        value.callback.has_value() ? JVariant_Double_______Unit::fromCpp(value.callback.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::test
