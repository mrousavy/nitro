///
/// JNitroSection.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "NitroSection.hpp"

#include "JFunc_void_std__optional_bool_.hpp"
#include "JNitroRow.hpp"
#include "NitroRow.hpp"
#include <functional>
#include <optional>
#include <string>
#include <vector>

namespace margelo::nitro::test {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "NitroSection" and the the Kotlin data class "NitroSection".
   */
  struct JNitroSection final: public jni::JavaClass<JNitroSection> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/NitroSection;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct NitroSection by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    NitroSection toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldTitle = clazz->getField<jni::JString>("title");
      jni::local_ref<jni::JString> title = this->getFieldValue(fieldTitle);
      static const auto fieldItems = clazz->getField<jni::JArrayClass<JNitroRow>>("items");
      jni::local_ref<jni::JArrayClass<JNitroRow>> items = this->getFieldValue(fieldItems);
      return NitroSection(
        title != nullptr ? std::make_optional(title->toStdString()) : std::nullopt,
        [&]() {
          size_t __size = items->size();
          std::vector<NitroRow> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = items->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }()
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JNitroSection::javaobject> fromCpp(const NitroSection& value) {
      return newInstance(
        value.title.has_value() ? jni::make_jstring(value.title.value()) : nullptr,
        [&]() {
          size_t __size = value.items.size();
          jni::local_ref<jni::JArrayClass<JNitroRow>> __array = jni::JArrayClass<JNitroRow>::newArray(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            const auto& __element = value.items[__i];
            __array->setElement(__i, *JNitroRow::fromCpp(__element));
          }
          return __array;
        }()
      );
    }
  };

} // namespace margelo::nitro::test
