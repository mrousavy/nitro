///
/// JHybridBaseSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridBaseSpec.hpp"





namespace margelo::nitro::test {

  jni::local_ref<JHybridBaseSpec::jhybriddata> JHybridBaseSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    // Initialize the C++ class
    jni::local_ref<JHybridBaseSpec::jhybriddata> ref = makeCxxInstance(jThis);
    // Initialize the std::shared_from_this base class (we are still JNI ref counting)
    ref->cthis()->initSharedBase(ref);
    return ref;
  }

  void JHybridBaseSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridBaseSpec::initHybrid),
    });
  }

  size_t JHybridBaseSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridBaseSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  double JHybridBaseSpec::getBaseValue() {
    static const auto method = javaClassStatic()->getMethod<double()>("getBaseValue");
    auto __result = method(_javaPart);
    return __result;
  }

  // Methods
  

} // namespace margelo::nitro::test
