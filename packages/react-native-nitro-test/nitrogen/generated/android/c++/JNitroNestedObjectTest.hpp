///
/// JNitroNestedObjectTest.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "NitroNestedObjectTest.hpp"

#include "JNitroRow.hpp"
#include "JNitroSection.hpp"
#include "JNitroText.hpp"
#include "NitroRow.hpp"
#include "NitroSection.hpp"
#include "NitroText.hpp"
#include <optional>
#include <string>
#include <vector>

namespace margelo::nitro::test {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "NitroNestedObjectTest" and the the Kotlin data class "NitroNestedObjectTest".
   */
  struct JNitroNestedObjectTest final: public jni::JavaClass<JNitroNestedObjectTest> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/NitroNestedObjectTest;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct NitroNestedObjectTest by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    NitroNestedObjectTest toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldSections = clazz->getField<jni::JArrayClass<JNitroSection>>("sections");
      jni::local_ref<jni::JArrayClass<JNitroSection>> sections = this->getFieldValue(fieldSections);
      return NitroNestedObjectTest(
        sections != nullptr ? std::make_optional([&]() {
          size_t __size = sections->size();
          std::vector<NitroSection> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = sections->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JNitroNestedObjectTest::javaobject> fromCpp(const NitroNestedObjectTest& value) {
      return newInstance(
        value.sections.has_value() ? [&]() {
          size_t __size = value.sections.value().size();
          jni::local_ref<jni::JArrayClass<JNitroSection>> __array = jni::JArrayClass<JNitroSection>::newArray(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            const auto& __element = value.sections.value()[__i];
            __array->setElement(__i, *JNitroSection::fromCpp(__element));
          }
          return __array;
        }() : nullptr
      );
    }
  };

} // namespace margelo::nitro::test
