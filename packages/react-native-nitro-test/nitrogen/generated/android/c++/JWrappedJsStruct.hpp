///
/// JWrappedJsStruct.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "WrappedJsStruct.hpp"

#include "JFunc_void_double.hpp"
#include "JJsStyleStruct.hpp"
#include "JsStyleStruct.hpp"
#include <functional>

namespace margelo::nitro::test {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "WrappedJsStruct" and the the Kotlin data class "WrappedJsStruct".
   */
  struct JWrappedJsStruct final: public jni::JavaClass<JWrappedJsStruct> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/WrappedJsStruct;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct WrappedJsStruct by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    WrappedJsStruct toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldValue = clazz->getField<JJsStyleStruct>("value");
      jni::local_ref<JJsStyleStruct> value = this->getFieldValue(fieldValue);
      return WrappedJsStruct(
        value->toCpp()
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JWrappedJsStruct::javaobject> fromCpp(const WrappedJsStruct& value) {
      return newInstance(
        JJsStyleStruct::fromCpp(value.value)
      );
    }
  };

} // namespace margelo::nitro::test
