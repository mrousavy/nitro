///
/// JMyCallback.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "MyCallback.hpp"

#include "JFunc_void_std__shared_ptr_ArrayBuffer_.hpp"
#include "JFunc_void_std__string.hpp"
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/JArrayBuffer.hpp>
#include <NitroModules/JUnit.hpp>
#include <functional>
#include <string>

namespace margelo::nitro::test {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "MyCallback" and the the Kotlin data class "MyCallback".
   */
  struct JMyCallback final: public jni::JavaClass<JMyCallback> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/MyCallback;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct MyCallback by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    MyCallback toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOnSimpleEvent = clazz->getField<JFunc_void_std__string::javaobject>("onSimpleEvent");
      jni::local_ref<JFunc_void_std__string::javaobject> onSimpleEvent = this->getFieldValue(fieldOnSimpleEvent);
      static const auto fieldOnMaybeData = clazz->getField<JFunc_void_std__shared_ptr_ArrayBuffer_::javaobject>("onMaybeData");
      jni::local_ref<JFunc_void_std__shared_ptr_ArrayBuffer_::javaobject> onMaybeData = this->getFieldValue(fieldOnMaybeData);
      return MyCallback(
        [&]() -> std::function<void(const std::string& /* message */)> {
          if (onSimpleEvent->isInstanceOf(JFunc_void_std__string_cxx::javaClassStatic())) [[likely]] {
            auto downcast = jni::static_ref_cast<JFunc_void_std__string_cxx::javaobject>(onSimpleEvent);
            return downcast->cthis()->getFunction();
          } else {
            auto onSimpleEventRef = jni::make_global(onSimpleEvent);
            return [onSimpleEventRef](std::string message) -> void {
              return onSimpleEventRef->invoke(message);
            };
          }
        }(),
        [&]() -> std::function<void(const std::shared_ptr<ArrayBuffer>& /* data */)> {
          if (onMaybeData->isInstanceOf(JFunc_void_std__shared_ptr_ArrayBuffer__cxx::javaClassStatic())) [[likely]] {
            auto downcast = jni::static_ref_cast<JFunc_void_std__shared_ptr_ArrayBuffer__cxx::javaobject>(onMaybeData);
            return downcast->cthis()->getFunction();
          } else {
            auto onMaybeDataRef = jni::make_global(onMaybeData);
            return [onMaybeDataRef](std::shared_ptr<ArrayBuffer> data) -> void {
              return onMaybeDataRef->invoke(data);
            };
          }
        }()
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JMyCallback::javaobject> fromCpp(const MyCallback& value) {
      using JSignature = JMyCallback(jni::alias_ref<JFunc_void_std__string::javaobject>, jni::alias_ref<JFunc_void_std__shared_ptr_ArrayBuffer_::javaobject>);
      static const auto clazz = javaClassStatic();
      static const auto create = clazz->getStaticMethod<JSignature>("fromCpp");
      return create(
        clazz,
        JFunc_void_std__string_cxx::fromCpp(value.onSimpleEvent),
        JFunc_void_std__shared_ptr_ArrayBuffer__cxx::fromCpp(value.onMaybeData)
      );
    }
  };

} // namespace margelo::nitro::test
