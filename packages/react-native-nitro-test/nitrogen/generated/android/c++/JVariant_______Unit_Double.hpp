///
/// JVariant_______Unit_Double.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include <variant>

#include <functional>
#include <variant>
#include "JFunc_void.hpp"

namespace margelo::nitro::test {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ std::variant and the Java class "Variant_______Unit_Double".
   */
  class JVariant_______Unit_Double: public jni::JavaClass<JVariant_______Unit_Double> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/Variant_______Unit_Double;";

    static jni::local_ref<JVariant_______Unit_Double> create_0(jni::alias_ref<JFunc_void::javaobject> value) {
      static const auto method = javaClassStatic()->getStaticMethod<JVariant_______Unit_Double(jni::alias_ref<JFunc_void::javaobject>)>("create");
      return method(javaClassStatic(), value);
    }
    static jni::local_ref<JVariant_______Unit_Double> create_1(double value) {
      static const auto method = javaClassStatic()->getStaticMethod<JVariant_______Unit_Double(double)>("create");
      return method(javaClassStatic(), value);
    }

    static jni::local_ref<JVariant_______Unit_Double> fromCpp(const std::variant<std::function<void()>, double>& variant) {
      switch (variant.index()) {
        case 0: return create_0(JFunc_void_cxx::fromCpp(std::get<0>(variant)));
        case 1: return create_1(std::get<1>(variant));
        default: throw std::invalid_argument("Variant holds unknown index! (" + std::to_string(variant.index()) + ")");
      }
    }

    [[nodiscard]] std::variant<std::function<void()>, double> toCpp() const;
  };

  namespace JVariant_______Unit_Double_impl {
    class First: public jni::JavaClass<First, JVariant_______Unit_Double> {
    public:
      static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/Variant_______Unit_Double$First;";
    
      [[nodiscard]] jni::local_ref<JFunc_void::javaobject> getValue() const {
        static const auto field = javaClassStatic()->getField<JFunc_void::javaobject>("value");
        return getFieldValue(field);
      }
    };
    
    class Second: public jni::JavaClass<Second, JVariant_______Unit_Double> {
    public:
      static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/Variant_______Unit_Double$Second;";
    
      [[nodiscard]] double getValue() const {
        static const auto field = javaClassStatic()->getField<double>("value");
        return getFieldValue(field);
      }
    };
  } // namespace JVariant_______Unit_Double_impl
} // namespace margelo::nitro::test
