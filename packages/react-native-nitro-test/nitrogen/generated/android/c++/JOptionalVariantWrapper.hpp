///
/// JOptionalVariantWrapper.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "OptionalVariantWrapper.hpp"

#include "Car.hpp"
#include "JCar.hpp"
#include "JNamedVariant.hpp"
#include "JPerson.hpp"
#include "JPowertrain.hpp"
#include "Person.hpp"
#include "Powertrain.hpp"
#include <optional>
#include <string>
#include <variant>
#include <vector>

namespace margelo::nitro::test {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "OptionalVariantWrapper" and the the Kotlin data class "OptionalVariantWrapper".
   */
  struct JOptionalVariantWrapper final: public jni::JavaClass<JOptionalVariantWrapper> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/OptionalVariantWrapper;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct OptionalVariantWrapper by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    OptionalVariantWrapper toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldVariant = clazz->getField<JNamedVariant>("variant");
      jni::local_ref<JNamedVariant> variant = this->getFieldValue(fieldVariant);
      return OptionalVariantWrapper(
        variant != nullptr ? std::make_optional(variant->toCpp()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JOptionalVariantWrapper::javaobject> fromCpp(const OptionalVariantWrapper& value) {
      return newInstance(
        value.variant.has_value() ? JNamedVariant::fromCpp(value.variant.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::test
