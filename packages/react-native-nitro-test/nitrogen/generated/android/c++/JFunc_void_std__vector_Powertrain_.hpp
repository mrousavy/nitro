///
/// JFunc_void_std__vector_Powertrain_.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include <functional>

#include "Powertrain.hpp"
#include <vector>
#include <functional>
#include "JPowertrain.hpp"

namespace margelo::nitro::test {

  using namespace facebook;

  /**
   * Represents the Java/Kotlin callback `(array: Array<Powertrain>) -> Unit`.
   * This can be passed around between C++ and Java/Kotlin.
   */
  struct JFunc_void_std__vector_Powertrain_: public jni::JavaClass<JFunc_void_std__vector_Powertrain_> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/Func_void_std__vector_Powertrain_;";

  public:
    /**
     * Invokes the function this `JFunc_void_std__vector_Powertrain_` instance holds through JNI.
     */
    void invoke(const std::vector<Powertrain>& array) const {
      static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JArrayClass<JPowertrain>> /* array */)>("invoke");
      method(self(), [&]() {
        size_t __size = array.size();
        jni::local_ref<jni::JArrayClass<JPowertrain>> __array = jni::JArrayClass<JPowertrain>::newArray(__size);
        for (size_t __i = 0; __i < __size; __i++) {
          const auto& __element = array[__i];
          __array->setElement(__i, *JPowertrain::fromCpp(__element));
        }
        return __array;
      }());
    }
  };

  /**
   * An implementation of Func_void_std__vector_Powertrain_ that is backed by a C++ implementation (using `std::function<...>`)
   */
  struct JFunc_void_std__vector_Powertrain__cxx final: public jni::HybridClass<JFunc_void_std__vector_Powertrain__cxx, JFunc_void_std__vector_Powertrain_> {
  public:
    static jni::local_ref<JFunc_void_std__vector_Powertrain_::javaobject> fromCpp(const std::function<void(const std::vector<Powertrain>& /* array */)>& func) {
      return JFunc_void_std__vector_Powertrain__cxx::newObjectCxxArgs(func);
    }

  public:
    /**
     * Invokes the C++ `std::function<...>` this `JFunc_void_std__vector_Powertrain__cxx` instance holds.
     */
    void invoke_cxx(jni::alias_ref<jni::JArrayClass<JPowertrain>> array) {
      _func([&]() {
              size_t __size = array->size();
              std::vector<Powertrain> __vector;
              __vector.reserve(__size);
              for (size_t __i = 0; __i < __size; __i++) {
                auto __element = array->getElement(__i);
                __vector.push_back(__element->toCpp());
              }
              return __vector;
            }());
    }

  public:
    [[nodiscard]]
    inline const std::function<void(const std::vector<Powertrain>& /* array */)>& getFunction() const {
      return _func;
    }

  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/Func_void_std__vector_Powertrain__cxx;";
    static void registerNatives() {
      registerHybrid({makeNativeMethod("invoke_cxx", JFunc_void_std__vector_Powertrain__cxx::invoke_cxx)});
    }

  private:
    explicit JFunc_void_std__vector_Powertrain__cxx(const std::function<void(const std::vector<Powertrain>& /* array */)>& func): _func(func) { }

  private:
    friend HybridBase;
    std::function<void(const std::vector<Powertrain>& /* array */)> _func;
  };

} // namespace margelo::nitro::test
