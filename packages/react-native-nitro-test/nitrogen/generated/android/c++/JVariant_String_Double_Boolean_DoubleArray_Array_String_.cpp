///
/// JVariant_String_Double_Boolean_DoubleArray_Array_String_.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JVariant_String_Double_Boolean_DoubleArray_Array_String_.hpp"

namespace margelo::nitro::test {
  /**
   * Converts JVariant_String_Double_Boolean_DoubleArray_Array_String_ to std::variant<std::string, double, bool, std::vector<double>, std::vector<std::string>>
   */
  std::variant<std::string, double, bool, std::vector<double>, std::vector<std::string>> JVariant_String_Double_Boolean_DoubleArray_Array_String_::toCpp() const {
    if (isInstanceOf(JVariant_String_Double_Boolean_DoubleArray_Array_String__impl::First::javaClassStatic())) {
      // It's a `std::string`
      auto jniValue = static_cast<const JVariant_String_Double_Boolean_DoubleArray_Array_String__impl::First*>(this)->getValue();
      return jniValue->toStdString();
    } else if (isInstanceOf(JVariant_String_Double_Boolean_DoubleArray_Array_String__impl::Second::javaClassStatic())) {
      // It's a `double`
      auto jniValue = static_cast<const JVariant_String_Double_Boolean_DoubleArray_Array_String__impl::Second*>(this)->getValue();
      return jniValue;
    } else if (isInstanceOf(JVariant_String_Double_Boolean_DoubleArray_Array_String__impl::Third::javaClassStatic())) {
      // It's a `bool`
      auto jniValue = static_cast<const JVariant_String_Double_Boolean_DoubleArray_Array_String__impl::Third*>(this)->getValue();
      return static_cast<bool>(jniValue);
    } else if (isInstanceOf(JVariant_String_Double_Boolean_DoubleArray_Array_String__impl::Fourth::javaClassStatic())) {
      // It's a `std::vector<double>`
      auto jniValue = static_cast<const JVariant_String_Double_Boolean_DoubleArray_Array_String__impl::Fourth*>(this)->getValue();
      return [&]() {
      size_t __size = jniValue->size();
      std::vector<double> __vector(__size);
      jniValue->getRegion(0, __size, __vector.data());
      return __vector;
    }();
    } else if (isInstanceOf(JVariant_String_Double_Boolean_DoubleArray_Array_String__impl::Fifth::javaClassStatic())) {
      // It's a `std::vector<std::string>`
      auto jniValue = static_cast<const JVariant_String_Double_Boolean_DoubleArray_Array_String__impl::Fifth*>(this)->getValue();
      return [&]() {
      size_t __size = jniValue->size();
      std::vector<std::string> __vector;
      __vector.reserve(__size);
      for (size_t __i = 0; __i < __size; __i++) {
        auto __element = jniValue->getElement(__i);
        __vector.push_back(__element->toStdString());
      }
      return __vector;
    }();
    }
    throw std::invalid_argument("Variant is unknown Kotlin instance!");
  }
} // namespace margelo::nitro::test
