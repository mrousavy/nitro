///
/// JHybridTestViewSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridTestViewSpec.hpp"

// Forward declaration of `ColorScheme` to properly resolve imports.
namespace margelo::nitro::test { enum class ColorScheme; }

#include "ColorScheme.hpp"
#include "JColorScheme.hpp"
#include <functional>
#include "JFunc_void.hpp"

namespace margelo::nitro::test {

  jni::local_ref<JHybridTestViewSpec::jhybriddata> JHybridTestViewSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridTestViewSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridTestViewSpec::initHybrid),
    });
  }

  size_t JHybridTestViewSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridTestViewSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  bool JHybridTestViewSpec::getIsBlue() {
    static const auto method = javaClassStatic()->getMethod<jboolean()>("isBlue");
    auto __result = method(_javaPart);
    return static_cast<bool>(__result);
  }
  void JHybridTestViewSpec::setIsBlue(bool isBlue) {
    static const auto method = javaClassStatic()->getMethod<void(jboolean /* isBlue */)>("setBlue");
    method(_javaPart, isBlue);
  }
  bool JHybridTestViewSpec::getHasBeenCalled() {
    static const auto method = javaClassStatic()->getMethod<jboolean()>("hasBeenCalled");
    auto __result = method(_javaPart);
    return static_cast<bool>(__result);
  }
  void JHybridTestViewSpec::setHasBeenCalled(bool hasBeenCalled) {
    static const auto method = javaClassStatic()->getMethod<void(jboolean /* hasBeenCalled */)>("setHasBeenCalled");
    method(_javaPart, hasBeenCalled);
  }
  ColorScheme JHybridTestViewSpec::getColorScheme() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JColorScheme>()>("getColorScheme");
    auto __result = method(_javaPart);
    return __result->toCpp();
  }
  void JHybridTestViewSpec::setColorScheme(ColorScheme colorScheme) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JColorScheme> /* colorScheme */)>("setColorScheme");
    method(_javaPart, JColorScheme::fromCpp(colorScheme));
  }
  std::function<void()> JHybridTestViewSpec::getSomeCallback() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JFunc_void::javaobject>()>("getSomeCallback_cxx");
    auto __result = method(_javaPart);
    return [&]() -> std::function<void()> {
      if (__result->isInstanceOf(JFunc_void_cxx::javaClassStatic())) [[likely]] {
        auto downcast = jni::static_ref_cast<JFunc_void_cxx::javaobject>(__result);
        return downcast->cthis()->getFunction();
      } else {
        auto __resultRef = jni::make_global(__result);
        return [__resultRef]() -> void {
          return __resultRef->invoke();
        };
      }
    }();
  }
  void JHybridTestViewSpec::setSomeCallback(const std::function<void()>& someCallback) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JFunc_void::javaobject> /* someCallback */)>("setSomeCallback_cxx");
    method(_javaPart, JFunc_void_cxx::fromCpp(someCallback));
  }

  // Methods
  void JHybridTestViewSpec::someMethod() {
    static const auto method = javaClassStatic()->getMethod<void()>("someMethod");
    method(_javaPart);
  }

} // namespace margelo::nitro::test
