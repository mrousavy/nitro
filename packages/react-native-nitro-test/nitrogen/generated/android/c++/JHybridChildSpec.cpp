///
/// JHybridChildSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridChildSpec.hpp"

// Forward declaration of `Car` to properly resolve imports.
namespace margelo::nitro::test { struct Car; }
// Forward declaration of `Powertrain` to properly resolve imports.
namespace margelo::nitro::test { enum class Powertrain; }
// Forward declaration of `Person` to properly resolve imports.
namespace margelo::nitro::test { struct Person; }

#include <string>
#include "Car.hpp"
#include <variant>
#include "JNamedVariant.hpp"
#include "JCar.hpp"
#include "Powertrain.hpp"
#include "JPowertrain.hpp"
#include "Person.hpp"
#include <optional>
#include "JPerson.hpp"
#include <vector>

namespace margelo::nitro::test {

  jni::local_ref<JHybridChildSpec::jhybriddata> JHybridChildSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridChildSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridChildSpec::initHybrid),
    });
  }

  size_t JHybridChildSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridChildSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  double JHybridChildSpec::getChildValue() {
    static const auto method = javaClassStatic()->getMethod<double()>("getChildValue");
    auto __result = method(_javaPart);
    return __result;
  }
  double JHybridChildSpec::getBaseValue() {
    static const auto method = javaClassStatic()->getMethod<double()>("getBaseValue");
    auto __result = method(_javaPart);
    return __result;
  }

  // Methods
  std::variant<std::string, Car> JHybridChildSpec::bounceVariant(const std::variant<std::string, Car>& variant) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JNamedVariant>(jni::alias_ref<JNamedVariant> /* variant */)>("bounceVariant");
    auto __result = method(_javaPart, JNamedVariant::fromCpp(variant));
    return __result->toCpp();
  }

} // namespace margelo::nitro::test
