///
/// JOptionalWrapper.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "OptionalWrapper.hpp"

#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/JArrayBuffer.hpp>
#include <NitroModules/JUnit.hpp>
#include <optional>
#include <string>

namespace margelo::nitro::test {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "OptionalWrapper" and the the Kotlin data class "OptionalWrapper".
   */
  struct JOptionalWrapper final: public jni::JavaClass<JOptionalWrapper> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/OptionalWrapper;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct OptionalWrapper by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    OptionalWrapper toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOptionalArrayBuffer = clazz->getField<JArrayBuffer::javaobject>("optionalArrayBuffer");
      jni::local_ref<JArrayBuffer::javaobject> optionalArrayBuffer = this->getFieldValue(fieldOptionalArrayBuffer);
      static const auto fieldOptionalString = clazz->getField<jni::JString>("optionalString");
      jni::local_ref<jni::JString> optionalString = this->getFieldValue(fieldOptionalString);
      return OptionalWrapper(
        optionalArrayBuffer != nullptr ? std::make_optional(optionalArrayBuffer->cthis()->getArrayBuffer()) : std::nullopt,
        optionalString != nullptr ? std::make_optional(optionalString->toStdString()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JOptionalWrapper::javaobject> fromCpp(const OptionalWrapper& value) {
      return newInstance(
        value.optionalArrayBuffer.has_value() ? JArrayBuffer::wrap(value.optionalArrayBuffer.value()) : nullptr,
        value.optionalString.has_value() ? jni::make_jstring(value.optionalString.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::test
