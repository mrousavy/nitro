///
/// JGarage.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "Garage.hpp"

#include "Car.hpp"
#include "JCar.hpp"
#include "JPerson.hpp"
#include "JPowertrain.hpp"
#include "Person.hpp"
#include "Powertrain.hpp"
#include <optional>
#include <string>
#include <vector>

namespace margelo::nitro::test {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "Garage" and the the Kotlin data class "Garage".
   */
  struct JGarage final: public jni::JavaClass<JGarage> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/Garage;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct Garage by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    Garage toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldCars = clazz->getField<jni::JArrayClass<JCar>>("cars");
      jni::local_ref<jni::JArrayClass<JCar>> cars = this->getFieldValue(fieldCars);
      return Garage(
        cars != nullptr ? std::make_optional([&]() {
          size_t __size = cars->size();
          std::vector<Car> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = cars->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JGarage::javaobject> fromCpp(const Garage& value) {
      return newInstance(
        value.cars.has_value() ? [&]() {
          size_t __size = value.cars.value().size();
          jni::local_ref<jni::JArrayClass<JCar>> __array = jni::JArrayClass<JCar>::newArray(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            const auto& __element = value.cars.value()[__i];
            __array->setElement(__i, *JCar::fromCpp(__element));
          }
          return __array;
        }() : nullptr
      );
    }
  };

} // namespace margelo::nitro::test
