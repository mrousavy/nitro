///
/// JCoreTypesVariant.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include <variant>

#include <NitroModules/ArrayBuffer.hpp>
#include <functional>
#include "WrappedJsStruct.hpp"
#include <chrono>
#include <NitroModules/Promise.hpp>
#include <NitroModules/AnyMap.hpp>
#include <variant>
#include <NitroModules/JArrayBuffer.hpp>
#include <NitroModules/JUnit.hpp>
#include "JFunc_void_double.hpp"
#include "JWrappedJsStruct.hpp"
#include "JsStyleStruct.hpp"
#include "JJsStyleStruct.hpp"
#include <vector>
#include <NitroModules/JInstant.hpp>
#include <NitroModules/JPromise.hpp>
#include <NitroModules/JAnyMap.hpp>

namespace margelo::nitro::test {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ std::variant and the Java class "CoreTypesVariant".
   */
  class JCoreTypesVariant: public jni::JavaClass<JCoreTypesVariant> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/CoreTypesVariant;";

    static jni::local_ref<JCoreTypesVariant> create_0(jni::alias_ref<JArrayBuffer::javaobject> value) {
      static const auto method = javaClassStatic()->getStaticMethod<JCoreTypesVariant(jni::alias_ref<JArrayBuffer::javaobject>)>("create");
      return method(javaClassStatic(), value);
    }
    static jni::local_ref<JCoreTypesVariant> create_1(jni::alias_ref<JFunc_void_double::javaobject> value) {
      static const auto method = javaClassStatic()->getStaticMethod<JCoreTypesVariant(jni::alias_ref<JFunc_void_double::javaobject>)>("create");
      return method(javaClassStatic(), value);
    }
    static jni::local_ref<JCoreTypesVariant> create_2(jni::alias_ref<JWrappedJsStruct> value) {
      static const auto method = javaClassStatic()->getStaticMethod<JCoreTypesVariant(jni::alias_ref<JWrappedJsStruct>)>("create");
      return method(javaClassStatic(), value);
    }
    static jni::local_ref<JCoreTypesVariant> create_3(jni::alias_ref<JInstant> value) {
      static const auto method = javaClassStatic()->getStaticMethod<JCoreTypesVariant(jni::alias_ref<JInstant>)>("create");
      return method(javaClassStatic(), value);
    }
    static jni::local_ref<JCoreTypesVariant> create_4(jni::alias_ref<JPromise::javaobject> value) {
      static const auto method = javaClassStatic()->getStaticMethod<JCoreTypesVariant(jni::alias_ref<JPromise::javaobject>)>("create");
      return method(javaClassStatic(), value);
    }
    static jni::local_ref<JCoreTypesVariant> create_5(jni::alias_ref<JAnyMap::javaobject> value) {
      static const auto method = javaClassStatic()->getStaticMethod<JCoreTypesVariant(jni::alias_ref<JAnyMap::javaobject>)>("create");
      return method(javaClassStatic(), value);
    }

    static jni::local_ref<JCoreTypesVariant> fromCpp(const std::variant<std::shared_ptr<ArrayBuffer>, std::function<void(double /* value */)>, WrappedJsStruct, std::chrono::system_clock::time_point, std::shared_ptr<Promise<double>>, std::shared_ptr<AnyMap>>& variant) {
      switch (variant.index()) {
        case 0: return create_0(JArrayBuffer::wrap(std::get<0>(variant)));
        case 1: return create_1(JFunc_void_double_cxx::fromCpp(std::get<1>(variant)));
        case 2: return create_2(JWrappedJsStruct::fromCpp(std::get<2>(variant)));
        case 3: return create_3(JInstant::fromChrono(std::get<3>(variant)));
        case 4: return create_4([&]() {
          jni::local_ref<JPromise::javaobject> __localPromise = JPromise::create();
          jni::global_ref<JPromise::javaobject> __promise = jni::make_global(__localPromise);
          std::get<4>(variant)->addOnResolvedListener([=](const double& __result) {
            __promise->cthis()->resolve(jni::JDouble::valueOf(__result));
          });
          std::get<4>(variant)->addOnRejectedListener([=](const std::exception_ptr& __error) {
            auto __jniError = jni::getJavaExceptionForCppException(__error);
            __promise->cthis()->reject(__jniError);
          });
          return __localPromise;
        }());
        case 5: return create_5(JAnyMap::create(std::get<5>(variant)));
        default: throw std::invalid_argument("Variant holds unknown index! (" + std::to_string(variant.index()) + ")");
      }
    }

    [[nodiscard]] std::variant<std::shared_ptr<ArrayBuffer>, std::function<void(double /* value */)>, WrappedJsStruct, std::chrono::system_clock::time_point, std::shared_ptr<Promise<double>>, std::shared_ptr<AnyMap>> toCpp() const;
  };

  namespace JCoreTypesVariant_impl {
    class First: public jni::JavaClass<First, JCoreTypesVariant> {
    public:
      static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/CoreTypesVariant$First;";
    
      [[nodiscard]] jni::local_ref<JArrayBuffer::javaobject> getValue() const {
        static const auto field = javaClassStatic()->getField<JArrayBuffer::javaobject>("value");
        return getFieldValue(field);
      }
    };
    
    class Second: public jni::JavaClass<Second, JCoreTypesVariant> {
    public:
      static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/CoreTypesVariant$Second;";
    
      [[nodiscard]] jni::local_ref<JFunc_void_double::javaobject> getValue() const {
        static const auto field = javaClassStatic()->getField<JFunc_void_double::javaobject>("value");
        return getFieldValue(field);
      }
    };
    
    class Third: public jni::JavaClass<Third, JCoreTypesVariant> {
    public:
      static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/CoreTypesVariant$Third;";
    
      [[nodiscard]] jni::local_ref<JWrappedJsStruct> getValue() const {
        static const auto field = javaClassStatic()->getField<JWrappedJsStruct>("value");
        return getFieldValue(field);
      }
    };
    
    class Fourth: public jni::JavaClass<Fourth, JCoreTypesVariant> {
    public:
      static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/CoreTypesVariant$Fourth;";
    
      [[nodiscard]] jni::local_ref<JInstant> getValue() const {
        static const auto field = javaClassStatic()->getField<JInstant>("value");
        return getFieldValue(field);
      }
    };
    
    class Fifth: public jni::JavaClass<Fifth, JCoreTypesVariant> {
    public:
      static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/CoreTypesVariant$Fifth;";
    
      [[nodiscard]] jni::local_ref<JPromise::javaobject> getValue() const {
        static const auto field = javaClassStatic()->getField<JPromise::javaobject>("value");
        return getFieldValue(field);
      }
    };
    
    class Sixth: public jni::JavaClass<Sixth, JCoreTypesVariant> {
    public:
      static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/CoreTypesVariant$Sixth;";
    
      [[nodiscard]] jni::local_ref<JAnyMap::javaobject> getValue() const {
        static const auto field = javaClassStatic()->getField<JAnyMap::javaobject>("value");
        return getFieldValue(field);
      }
    };
  } // namespace JCoreTypesVariant_impl
} // namespace margelo::nitro::test
