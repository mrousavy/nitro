///
/// JNitroRow.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "NitroRow.hpp"

#include "JFunc_void_std__optional_bool_.hpp"
#include <functional>
#include <optional>
#include <string>

namespace margelo::nitro::test {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "NitroRow" and the the Kotlin data class "NitroRow".
   */
  struct JNitroRow final: public jni::JavaClass<JNitroRow> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/NitroRow;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct NitroRow by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    NitroRow toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldTitle = clazz->getField<jni::JString>("title");
      jni::local_ref<jni::JString> title = this->getFieldValue(fieldTitle);
      static const auto fieldOnPress = clazz->getField<JFunc_void_std__optional_bool_::javaobject>("onPress");
      jni::local_ref<JFunc_void_std__optional_bool_::javaobject> onPress = this->getFieldValue(fieldOnPress);
      return NitroRow(
        title->toStdString(),
        [&]() -> std::function<void(std::optional<bool> /* checked */)> {
          if (onPress->isInstanceOf(JFunc_void_std__optional_bool__cxx::javaClassStatic())) [[likely]] {
            auto downcast = jni::static_ref_cast<JFunc_void_std__optional_bool__cxx::javaobject>(onPress);
            return downcast->cthis()->getFunction();
          } else {
            auto onPressRef = jni::make_global(onPress);
            return [onPressRef](std::optional<bool> checked) -> void {
              return onPressRef->invoke(checked);
            };
          }
        }()
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JNitroRow::javaobject> fromCpp(const NitroRow& value) {
      return newInstance(
        jni::make_jstring(value.title),
        JFunc_void_std__optional_bool__cxx::fromCpp(value.onPress)
      );
    }
  };

} // namespace margelo::nitro::test
