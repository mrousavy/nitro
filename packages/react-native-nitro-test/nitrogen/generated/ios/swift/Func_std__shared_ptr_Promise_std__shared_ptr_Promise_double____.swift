///
/// Func_std__shared_ptr_Promise_std__shared_ptr_Promise_double____.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules
import NitroModules

/**
 * Wraps a Swift `() -> Promise<Promise<Double>>` as a class.
 * This class can be used from C++, e.g. to wrap the Swift closure as a `std::function`.
 */
public final class Func_std__shared_ptr_Promise_std__shared_ptr_Promise_double____: UnsafeTransferable {
  public typealias bridge = margelo.nitro.test.bridge.swift

  private let closure: () -> Promise<Promise<Double>>

  public init(_ closure: @escaping () -> Promise<Promise<Double>>) {
    self.closure = closure
  }

  @inline(__always)
  public func call() -> bridge.std__shared_ptr_Promise_std__shared_ptr_Promise_double____ {
    let __result: Promise<Promise<Double>> = self.closure()
    return { () -> bridge.std__shared_ptr_Promise_std__shared_ptr_Promise_double____ in
      let __promise = bridge.create_std__shared_ptr_Promise_std__shared_ptr_Promise_double____()
      let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__shared_ptr_Promise_double____(__promise)
      __result
        .then({ __result in __promiseHolder.resolve({ () -> bridge.std__shared_ptr_Promise_double__ in
            let __promise = bridge.create_std__shared_ptr_Promise_double__()
            let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_double__(__promise)
            __result
              .then({ __result in __promiseHolder.resolve(__result) })
              .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
            return __promise
          }()) })
        .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
      return __promise
    }()
  }

  @inline(__always)
  public func toUnsafe() -> UnsafeMutableRawPointer {
    return self.toUnsafeRetained()
  }

  @inline(__always)
  public static func fromUnsafe(_ pointer: UnsafeMutableRawPointer) -> Func_std__shared_ptr_Promise_std__shared_ptr_Promise_double____ {
    return Self.fromUnsafeRetained(pointer)
  }
}
