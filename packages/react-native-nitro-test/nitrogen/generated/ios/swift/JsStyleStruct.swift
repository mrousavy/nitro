///
/// JsStyleStruct.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `JsStyleStruct`, backed by a C++ struct.
 */
public typealias JsStyleStruct = margelo.nitro.test.JsStyleStruct

public extension JsStyleStruct {
  private typealias bridge = margelo.nitro.test.bridge.swift

  /**
   * Create a new instance of `JsStyleStruct`.
   */
  init(value: Double, onChanged: @escaping (_ num: Double) -> Void) {
    self.init(value, { () -> bridge.Func_void_double in
      let __closureWrapper = Func_void_double(onChanged)
      return bridge.create_Func_void_double(__closureWrapper.toUnsafe())
    }())
  }

  var valueCached: Double? = nil
  var value: Double {
    @inline(__always)
    mutating get {
      if let valueCached {
        return valueCached
      }
      let __result = self.__value
      valueCached = __result
      return __result
    }
    @inline(__always)
    set {
      self.__value = newValue
    }
  }
  
  var onChangedCached: (_ num: Double) -> Void? = nil
  var onChanged: (_ num: Double) -> Void {
    @inline(__always)
    mutating get {
      if let onChangedCached {
        return onChangedCached
      }
      let __result = { () -> (Double) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_double(self.__onChanged)
        return { (__num: Double) -> Void in
          __wrappedFunction.call(__num)
        }
      }()
      onChangedCached = __result
      return __result
    }
    @inline(__always)
    set {
      self.__onChanged = { () -> bridge.Func_void_double in
        let __closureWrapper = Func_void_double(newValue)
        return bridge.create_Func_void_double(__closureWrapper.toUnsafe())
      }()
    }
  }
}
