///
/// NitroNestedObjectTest.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `NitroNestedObjectTest`, backed by a C++ struct.
 */
public typealias NitroNestedObjectTest = margelo.nitro.test.NitroNestedObjectTest

public extension NitroNestedObjectTest {
  private typealias bridge = margelo.nitro.test.bridge.swift

  /**
   * Create a new instance of `NitroNestedObjectTest`.
   */
  init(sections: [NitroSection]?) {
    self.init({ () -> bridge.std__optional_std__vector_NitroSection__ in
      if let __unwrappedValue = sections {
        return bridge.create_std__optional_std__vector_NitroSection__(__unwrappedValue.withUnsafeBufferPointer { __pointer -> bridge.std__vector_NitroSection_ in
          return bridge.copy_std__vector_NitroSection_(__pointer.baseAddress!, __unwrappedValue.count)
        })
      } else {
        return .init()
      }
    }())
  }

  var sections: [NitroSection]? {
    @inline(__always)
    get {
      return { () -> [NitroSection]? in
        if bridge.has_value_std__optional_std__vector_NitroSection__(self.__sections) {
          let __unwrapped = bridge.get_std__optional_std__vector_NitroSection__(self.__sections)
          return { () -> [NitroSection] in
            let __data = bridge.get_data_std__vector_NitroSection_(__unwrapped)
            let __size = __unwrapped.size()
            return Array(UnsafeBufferPointer(start: __data, count: __size))
          }()
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__sections = { () -> bridge.std__optional_std__vector_NitroSection__ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__vector_NitroSection__(__unwrappedValue.withUnsafeBufferPointer { __pointer -> bridge.std__vector_NitroSection_ in
            return bridge.copy_std__vector_NitroSection_(__pointer.baseAddress!, __unwrappedValue.count)
          })
        } else {
          return .init()
        }
      }()
    }
  }
}
