///
/// OptionalWrapper.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `OptionalWrapper`, backed by a C++ struct.
 */
public typealias OptionalWrapper = margelo.nitro.test.OptionalWrapper

public extension OptionalWrapper {
  private typealias bridge = margelo.nitro.test.bridge.swift

  /**
   * Create a new instance of `OptionalWrapper`.
   */
  init(optionalArrayBuffer: ArrayBuffer?, optionalString: String?) {
    self.init({ () -> bridge.std__optional_std__shared_ptr_ArrayBuffer__ in
      if let __unwrappedValue = optionalArrayBuffer {
        return bridge.create_std__optional_std__shared_ptr_ArrayBuffer__(__unwrappedValue.getArrayBuffer())
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = optionalString {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }())
  }

  private var self.__cache__optionalArrayBuffer ArrayBuffer?? = nil
  var optionalArrayBuffer: ArrayBuffer? {
    @inline(__always)
    mutating get {
      if let self.__cache__optionalArrayBuffer {
        return self.__cache__optionalArrayBuffer
      }
      let __result = { () -> ArrayBuffer? in
        if bridge.has_value_std__optional_std__shared_ptr_ArrayBuffer__(self.__optionalArrayBuffer) {
          let __unwrapped = bridge.get_std__optional_std__shared_ptr_ArrayBuffer__(self.__optionalArrayBuffer)
          return ArrayBuffer(__unwrapped)
        } else {
          return nil
        }
      }()
      self.__cache__optionalArrayBuffer = __result
      return __result
    }
    @inline(__always)
    set {
      self.__cache__optionalArrayBuffer = newValue
      self.__optionalArrayBuffer = { () -> bridge.std__optional_std__shared_ptr_ArrayBuffer__ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__shared_ptr_ArrayBuffer__(__unwrappedValue.getArrayBuffer())
        } else {
          return .init()
        }
      }()
    }
  }
  
  private var self.__cache__optionalString String?? = nil
  var optionalString: String? {
    @inline(__always)
    mutating get {
      if let self.__cache__optionalString {
        return self.__cache__optionalString
      }
      let __result = { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__optionalString) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__optionalString)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
      self.__cache__optionalString = __result
      return __result
    }
    @inline(__always)
    set {
      self.__cache__optionalString = newValue
      self.__optionalString = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
}
