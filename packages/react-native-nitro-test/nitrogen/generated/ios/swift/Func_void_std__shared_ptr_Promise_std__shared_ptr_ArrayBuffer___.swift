///
/// Func_void_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Wraps a Swift `(_ value: Promise<ArrayBuffer>) -> Void` as a class.
 * This class can be used from C++, e.g. to wrap the Swift closure as a `std::function`.
 */
public final class Func_void_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___ {
  public typealias bridge = margelo.nitro.test.bridge.swift

  private let closure: (_ value: Promise<ArrayBuffer>) -> Void

  public init(_ closure: @escaping (_ value: Promise<ArrayBuffer>) -> Void) {
    self.closure = closure
  }

  @inline(__always)
  public func call(value: bridge.std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___) -> Void {
    self.closure({ () -> Promise<ArrayBuffer> in
      let __promise = Promise<ArrayBuffer>()
      let __resolver = { (__result: ArrayBuffer) in
        __promise.resolve(withResult: __result)
      }
      let __rejecter = { (__error: Error) in
        __promise.reject(withError: __error)
      }
      let __resolverCpp = { () -> bridge.Func_void_std__shared_ptr_ArrayBuffer_ in
        let __closureWrapper = Func_void_std__shared_ptr_ArrayBuffer_(__resolver)
        return bridge.create_Func_void_std__shared_ptr_ArrayBuffer_(__closureWrapper.toUnsafe())
      }()
      let __rejecterCpp = { () -> bridge.Func_void_std__exception_ptr in
        let __closureWrapper = Func_void_std__exception_ptr(__rejecter)
        return bridge.create_Func_void_std__exception_ptr(__closureWrapper.toUnsafe())
      }()
      let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___(value)
      __promiseHolder.addOnResolvedListener(__resolverCpp)
      __promiseHolder.addOnRejectedListener(__rejecterCpp)
      return __promise
    }())
  }

  /**
   * Casts this instance to a retained unsafe raw pointer.
   * This acquires one additional strong reference on the object!
   */
  @inline(__always)
  public func toUnsafe() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(self).toOpaque()
  }

  /**
   * Casts an unsafe pointer to a `Func_void_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___`.
   * The pointer has to be a retained opaque `Unmanaged<Func_void_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___>`.
   * This removes one strong reference from the object!
   */
  @inline(__always)
  public static func fromUnsafe(_ pointer: UnsafeMutableRawPointer) -> Func_void_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___ {
    return Unmanaged<Func_void_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___>.fromOpaque(pointer).takeRetainedValue()
  }
}
