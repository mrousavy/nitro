///
/// OptionalVariantWrapper.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `OptionalVariantWrapper`, backed by a C++ struct.
 */
public typealias OptionalVariantWrapper = margelo.nitro.test.OptionalVariantWrapper

public extension OptionalVariantWrapper {
  private typealias bridge = margelo.nitro.test.bridge.swift

  /**
   * Create a new instance of `OptionalVariantWrapper`.
   */
  init(variant: NamedVariant?) {
    self.init({ () -> bridge.std__optional_std__variant_std__string__Car__ in
      if let __unwrappedValue = variant {
        return bridge.create_std__optional_std__variant_std__string__Car__({ () -> bridge.std__variant_std__string__Car_ in
          switch __unwrappedValue {
            case .first(let __value):
              return bridge.create_std__variant_std__string__Car_(std.string(__value))
            case .second(let __value):
              return bridge.create_std__variant_std__string__Car_(__value)
          }
        }().variant)
      } else {
        return .init()
      }
    }())
  }

  var variant: NamedVariant? {
    @inline(__always)
    get {
      return { () -> NamedVariant? in
        if bridge.has_value_std__optional_std__variant_std__string__Car__(self.__variant) {
          let __unwrapped = bridge.get_std__optional_std__variant_std__string__Car__(self.__variant)
          return { () -> NamedVariant in
            let __variant = bridge.std__variant_std__string__Car_(__unwrapped)
            switch __variant.index() {
              case 0:
                let __actual = __variant.get_0()
                return .first(String(__actual))
              case 1:
                let __actual = __variant.get_1()
                return .second(__actual)
              default:
                fatalError("Variant can never have index \(__variant.index())!")
            }
          }()
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__variant = { () -> bridge.std__optional_std__variant_std__string__Car__ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__variant_std__string__Car__({ () -> bridge.std__variant_std__string__Car_ in
            switch __unwrappedValue {
              case .first(let __value):
                return bridge.create_std__variant_std__string__Car_(std.string(__value))
              case .second(let __value):
                return bridge.create_std__variant_std__string__Car_(__value)
            }
          }().variant)
        } else {
          return .init()
        }
      }()
    }
  }
}
