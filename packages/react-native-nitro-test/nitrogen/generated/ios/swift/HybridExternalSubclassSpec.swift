///
/// HybridExternalSubclassSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules
import NitroTestExternal

/// See ``HybridExternalSubclassSpec``
public protocol HybridExternalSubclassSpec_protocol: HybridObject, HybridSomeExternalObjectSpec_protocol {
  // Properties
  

  // Methods
  func getSubclassValue() throws -> String
}

public extension HybridExternalSubclassSpec_protocol {
  /// Default implementation of ``HybridObject.toString``
  func toString() -> String {
    return "[HybridObject ExternalSubclass]"
  }
}

/// See ``HybridExternalSubclassSpec``
open class HybridExternalSubclassSpec_base: HybridSomeExternalObjectSpec_base {
  private weak var cxxWrapper: HybridExternalSubclassSpec_cxx? = nil
  public override init() { super.init() }
  public override func getCxxWrapper() -> HybridExternalSubclassSpec_cxx {
  #if DEBUG
    guard self is HybridExternalSubclassSpec else {
      fatalError("`self` is not a `HybridExternalSubclassSpec`! Did you accidentally inherit from `HybridExternalSubclassSpec_base` instead of `HybridExternalSubclassSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridExternalSubclassSpec_cxx(self as! HybridExternalSubclassSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the ExternalSubclass HybridObject.
 * Implement this protocol to create Swift-based instances of ExternalSubclass.
 * ```swift
 * class HybridExternalSubclass : HybridExternalSubclassSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridExternalSubclassSpec = HybridExternalSubclassSpec_protocol & HybridExternalSubclassSpec_base
