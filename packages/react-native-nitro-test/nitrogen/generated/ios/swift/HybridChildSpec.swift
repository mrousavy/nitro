///
/// HybridChildSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridChildSpec``
public protocol HybridChildSpec_protocol: HybridObject, HybridBaseSpec_protocol {
  // Properties
  var childValue: Double { get }

  // Methods
  func bounceVariant(variant: NamedVariant) throws -> NamedVariant
}

public extension HybridChildSpec_protocol {
  /// Default implementation of ``HybridObject.toString``
  func toString() -> String {
    return "[HybridObject Child]"
  }
}

open class HybridChildSpec_base: HybridBaseSpec_base {
  public typealias bridge = margelo.nitro.test.bridge.swift
  private var _cxxPart: bridge.std__weak_ptr_HybridChildSpec_ = .init()

  public override init() {
    super.init()
  }
  
  open override func getCxxPart() -> bridge.std__shared_ptr_HybridBaseSpec_ {
    let __child: bridge.std__shared_ptr_HybridChildSpec_ = getCxxPart()
    return bridge.upcast_Child_to_Base(__child)
  }
  
  open func getCxxPart() -> bridge.std__shared_ptr_HybridChildSpec_ {
    let cachedCxxPart = self._cxxPart.lock()
    if Bool(fromCxx: cachedCxxPart) {
      return cachedCxxPart
    } else {
      let unsafe = Unmanaged.passUnretained(self).toOpaque()
      let cxxPart = bridge.create_std__shared_ptr_HybridChildSpec_(unsafe)
      _cxxPart = bridge.weakify_std__shared_ptr_HybridChildSpec_(cxxPart)
      return cxxPart
    }
  }
}

public typealias HybridChildSpec = HybridChildSpec_protocol & HybridChildSpec_base
