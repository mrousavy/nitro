///
/// HybridSomeExternalObjectSubclassSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules
import NitroTestExternal

/// See ``HybridSomeExternalObjectSubclassSpec``
public protocol HybridSomeExternalObjectSubclassSpec_protocol: HybridObject, HybridSomeExternalObjectSpec_protocol {
  // Properties
  

  // Methods
  func getSubclassedValue() throws -> String
}

/// See ``HybridSomeExternalObjectSubclassSpec``
public extension HybridSomeExternalObjectSubclassSpec_protocol {
  /// Default implementation of ``HybridObject.toString``
  func toString() -> String {
    return "[HybridObject SomeExternalObjectSubclass]"
  }
}

/// See ``HybridSomeExternalObjectSubclassSpec``
open class HybridSomeExternalObjectSubclassSpec_base: HybridSomeExternalObjectSpec_base {
  public typealias bridge = margelo.nitro.test.bridge.swift
  private var _cxxPart: bridge.std__weak_ptr_HybridSomeExternalObjectSubclassSpec_ = .init()

  public override init() {
    super.init()
  }
  
  open override func getCxxPart() -> bridge.std__shared_ptr_margelo__nitro__test__external__HybridSomeExternalObjectSpec_ {
    let __child: bridge.std__shared_ptr_HybridSomeExternalObjectSubclassSpec_ = getCxxPart()
    return bridge.upcast_SomeExternalObjectSubclass_to_SomeExternalObject(__child)
  }
  
  open func getCxxPart() -> bridge.std__shared_ptr_HybridSomeExternalObjectSubclassSpec_ {
    let cachedCxxPart = self._cxxPart.lock()
    if Bool(fromCxx: cachedCxxPart) {
      return cachedCxxPart
    } else {
      let unsafe = Unmanaged.passUnretained(self).toOpaque()
      let cxxPart = bridge.create_std__shared_ptr_HybridSomeExternalObjectSubclassSpec_(unsafe)
      _cxxPart = bridge.weakify_std__shared_ptr_HybridSomeExternalObjectSubclassSpec_(cxxPart)
      return cxxPart
    }
  }
}

/**
 * A Swift base-protocol (+ base class) representing the HybridObject "SomeExternalObjectSubclass".
 * Implement this protocol to create Swift-based instances of SomeExternalObjectSubclass.
 * ```swift
 * class HybridSomeExternalObjectSubclass: HybridSomeExternalObjectSubclassSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridSomeExternalObjectSubclassSpec = HybridSomeExternalObjectSubclassSpec_protocol & HybridSomeExternalObjectSubclassSpec_base
