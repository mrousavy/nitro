///
/// NitroSection.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `NitroSection`, backed by a C++ struct.
 */
public typealias NitroSection = margelo.nitro.test.NitroSection

public extension NitroSection {
  private typealias bridge = margelo.nitro.test.bridge.swift

  /**
   * Create a new instance of `NitroSection`.
   */
  init(title: String?, items: [NitroRow]) {
    self.init({ () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = title {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__vector_NitroRow_ in
      var __vector = bridge.create_std__vector_NitroRow_(items.count)
      for __item in items {
        __vector.push_back(__item)
      }
      return __vector
    }())
  }

  var title: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__title) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__title)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__title = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var items: [NitroRow] {
    @inline(__always)
    get {
      return self.__items.map({ __item in __item })
    }
    @inline(__always)
    set {
      self.__items = { () -> bridge.std__vector_NitroRow_ in
        var __vector = bridge.create_std__vector_NitroRow_(newValue.count)
        for __item in newValue {
          __vector.push_back(__item)
        }
        return __vector
      }()
    }
  }
}
