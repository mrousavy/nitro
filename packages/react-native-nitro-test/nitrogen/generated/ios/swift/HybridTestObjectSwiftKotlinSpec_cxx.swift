///
/// HybridTestObjectSwiftKotlinSpec_cxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges HybridTestObjectSwiftKotlinSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
public class HybridTestObjectSwiftKotlinSpec_cxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::test::bridge::swift`)
   * from `NitroTest-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.test.bridge.swift

  /**
   * Holds an instance of the `HybridTestObjectSwiftKotlinSpec` Swift protocol.
   */
  private var __implementation: any HybridTestObjectSwiftKotlinSpec

  /**
   * Holds a weak pointer to the C++ class that wraps the Swift class.
   */
  private var __cxxPart: bridge.std__weak_ptr_margelo__nitro__test__HybridTestObjectSwiftKotlinSpec_

  /**
   * Create a new `HybridTestObjectSwiftKotlinSpec_cxx` that wraps the given `HybridTestObjectSwiftKotlinSpec`.
   * All properties and methods bridge to C++ types.
   */
  public init(_ implementation: any HybridTestObjectSwiftKotlinSpec) {
    self.__implementation = implementation
    self.__cxxPart = .init()
    /* no base class */
  }

  /**
   * Get the actual `HybridTestObjectSwiftKotlinSpec` instance this class wraps.
   */
  @inline(__always)
  public func getHybridTestObjectSwiftKotlinSpec() -> any HybridTestObjectSwiftKotlinSpec {
    return __implementation
  }

  /**
   * Casts this instance to a retained unsafe raw pointer.
   * This acquires one additional strong reference on the object!
   */
  public func toUnsafe() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(self).toOpaque()
  }

  /**
   * Casts an unsafe pointer to a `HybridTestObjectSwiftKotlinSpec_cxx`.
   * The pointer has to be a retained opaque `Unmanaged<HybridTestObjectSwiftKotlinSpec_cxx>`.
   * This removes one strong reference from the object!
   */
  public class func fromUnsafe(_ pointer: UnsafeMutableRawPointer) -> HybridTestObjectSwiftKotlinSpec_cxx {
    return Unmanaged<HybridTestObjectSwiftKotlinSpec_cxx>.fromOpaque(pointer).takeRetainedValue()
  }

  /**
   * Gets (or creates) the C++ part of this Hybrid Object.
   * The C++ part is a `std::shared_ptr<margelo::nitro::test::HybridTestObjectSwiftKotlinSpec>`.
   */
  public func getCxxPart() -> bridge.std__shared_ptr_margelo__nitro__test__HybridTestObjectSwiftKotlinSpec_ {
    let cachedCxxPart = self.__cxxPart.lock()
    if cachedCxxPart.__convertToBool() {
      return cachedCxxPart
    } else {
      let newCxxPart = bridge.create_std__shared_ptr_margelo__nitro__test__HybridTestObjectSwiftKotlinSpec_(self.toUnsafe())
      __cxxPart = bridge.weakify_std__shared_ptr_margelo__nitro__test__HybridTestObjectSwiftKotlinSpec_(newCxxPart)
      return newCxxPart
    }
  }

  

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  @inline(__always)
  public var memorySize: Int {
    return MemoryHelper.getSizeOf(self.__implementation) + self.__implementation.memorySize
  }

  // Properties
  public final var thisObject: bridge.std__shared_ptr_margelo__nitro__test__HybridTestObjectSwiftKotlinSpec_ {
    @inline(__always)
    get {
      return { () -> bridge.std__shared_ptr_margelo__nitro__test__HybridTestObjectSwiftKotlinSpec_ in
        let __cxxWrapped = self.__implementation.thisObject.getCxxWrapper()
        return __cxxWrapped.getCxxPart()
      }()
    }
  }
  
  public final var optionalHybrid: bridge.std__optional_std__shared_ptr_margelo__nitro__test__HybridTestObjectSwiftKotlinSpec__ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__shared_ptr_margelo__nitro__test__HybridTestObjectSwiftKotlinSpec__ in
        if let __unwrappedValue = self.__implementation.optionalHybrid {
          return bridge.create_std__optional_std__shared_ptr_margelo__nitro__test__HybridTestObjectSwiftKotlinSpec__({ () -> bridge.std__shared_ptr_margelo__nitro__test__HybridTestObjectSwiftKotlinSpec_ in
            let __cxxWrapped = __unwrappedValue.getCxxWrapper()
            return __cxxWrapped.getCxxPart()
          }())
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.optionalHybrid = { () -> (any HybridTestObjectSwiftKotlinSpec)? in
        if let __unwrapped = newValue.value {
          return { () -> HybridTestObjectSwiftKotlinSpec in
            let __unsafePointer = bridge.get_std__shared_ptr_margelo__nitro__test__HybridTestObjectSwiftKotlinSpec_(__unwrapped)
            let __instance = HybridTestObjectSwiftKotlinSpec_cxx.fromUnsafe(__unsafePointer)
            return __instance.getHybridTestObjectSwiftKotlinSpec()
          }()
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var numberValue: Double {
    @inline(__always)
    get {
      return self.__implementation.numberValue
    }
    @inline(__always)
    set {
      self.__implementation.numberValue = newValue
    }
  }
  
  public final var boolValue: Bool {
    @inline(__always)
    get {
      return self.__implementation.boolValue
    }
    @inline(__always)
    set {
      self.__implementation.boolValue = newValue
    }
  }
  
  public final var stringValue: std.string {
    @inline(__always)
    get {
      return std.string(self.__implementation.stringValue)
    }
    @inline(__always)
    set {
      self.__implementation.stringValue = String(newValue)
    }
  }
  
  public final var bigintValue: Int64 {
    @inline(__always)
    get {
      return self.__implementation.bigintValue
    }
    @inline(__always)
    set {
      self.__implementation.bigintValue = newValue
    }
  }
  
  public final var stringOrUndefined: bridge.std__optional_std__string_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = self.__implementation.stringOrUndefined {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.stringOrUndefined = { () -> String? in
        if let __unwrapped = newValue.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var stringOrNull: bridge.std__optional_std__string_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = self.__implementation.stringOrNull {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.stringOrNull = { () -> String? in
        if let __unwrapped = newValue.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var optionalString: bridge.std__optional_std__string_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = self.__implementation.optionalString {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.optionalString = { () -> String? in
        if let __unwrapped = newValue.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var optionalArray: bridge.std__optional_std__vector_std__string__ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__vector_std__string__ in
        if let __unwrappedValue = self.__implementation.optionalArray {
          return bridge.create_std__optional_std__vector_std__string__({ () -> bridge.std__vector_std__string_ in
            var __vector = bridge.create_std__vector_std__string_(__unwrappedValue.count)
            for __item in __unwrappedValue {
              __vector.push_back(std.string(__item))
            }
            return __vector
          }())
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.optionalArray = { () -> [String]? in
        if let __unwrapped = newValue.value {
          return __unwrapped.map({ __item in String(__item) })
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var optionalEnum: bridge.std__optional_Powertrain_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_Powertrain_ in
        if let __unwrappedValue = self.__implementation.optionalEnum {
          return bridge.create_std__optional_Powertrain_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.optionalEnum = newValue.value
    }
  }
  
  public final var optionalOldEnum: bridge.std__optional_OldEnum_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_OldEnum_ in
        if let __unwrappedValue = self.__implementation.optionalOldEnum {
          return bridge.create_std__optional_OldEnum_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.optionalOldEnum = newValue.has_value() ? newValue.pointee : nil
    }
  }
  
  public final var optionalCallback: bridge.std__optional_std__function_void_double____value______ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__function_void_double____value______ in
        if let __unwrappedValue = self.__implementation.optionalCallback {
          return bridge.create_std__optional_std__function_void_double____value______({ () -> bridge.Func_void_double in
            let __closureWrapper = Func_void_double(__unwrappedValue)
            return bridge.create_Func_void_double(__closureWrapper.toUnsafe())
          }())
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.optionalCallback = { () -> ((_ value: Double) -> Void)? in
        if let __unwrapped = newValue.value {
          return { () -> (Double) -> Void in
            let __wrappedFunction = bridge.wrap_Func_void_double(__unwrapped)
            return { (__value: Double) -> Void in
              __wrappedFunction.call(__value)
            }
          }()
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var someVariant: bridge.std__variant_std__string__double_ {
    @inline(__always)
    get {
      return { () -> bridge.std__variant_std__string__double_ in
        switch self.__implementation.someVariant {
          case .first(let __value):
            return bridge.create_std__variant_std__string__double_(std.string(__value))
          case .second(let __value):
            return bridge.create_std__variant_std__string__double_(__value)
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.someVariant = { () -> Variant_String_Double in
        let __variant = newValue
        switch __variant.index() {
          case 0:
            let __actual = __variant.get_0()
            return .first(String(__actual))
          case 1:
            let __actual = __variant.get_1()
            return .second(__actual)
          default:
            fatalError("Variant can never have index \(__variant.index())!")
        }
      }()
    }
  }

  // Methods
  @inline(__always)
  public final func newTestObject() -> bridge.Result_std__shared_ptr_margelo__nitro__test__HybridTestObjectSwiftKotlinSpec__ {
    do {
      let __result = try self.__implementation.newTestObject()
      let __resultCpp = { () -> bridge.std__shared_ptr_margelo__nitro__test__HybridTestObjectSwiftKotlinSpec_ in
        let __cxxWrapped = __result.getCxxWrapper()
        return __cxxWrapped.getCxxPart()
      }()
      return bridge.create_Result_std__shared_ptr_margelo__nitro__test__HybridTestObjectSwiftKotlinSpec__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_margelo__nitro__test__HybridTestObjectSwiftKotlinSpec__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getVariantHybrid(variant: bridge.std__variant_Person__std__shared_ptr_margelo__nitro__test__HybridTestObjectSwiftKotlinSpec__) -> bridge.Result_std__variant_Person__std__shared_ptr_margelo__nitro__test__HybridTestObjectSwiftKotlinSpec___ {
    do {
      let __result = try self.__implementation.getVariantHybrid(variant: { () -> Variant_Person__any_HybridTestObjectSwiftKotlinSpec_ in
        let __variant = variant
        switch __variant.index() {
          case 0:
            let __actual = __variant.get_0()
            return .first(__actual)
          case 1:
            let __actual = __variant.get_1()
            return .second({ () -> HybridTestObjectSwiftKotlinSpec in
              let __unsafePointer = bridge.get_std__shared_ptr_margelo__nitro__test__HybridTestObjectSwiftKotlinSpec_(__actual)
              let __instance = HybridTestObjectSwiftKotlinSpec_cxx.fromUnsafe(__unsafePointer)
              return __instance.getHybridTestObjectSwiftKotlinSpec()
            }())
          default:
            fatalError("Variant can never have index \(__variant.index())!")
        }
      }())
      let __resultCpp = { () -> bridge.std__variant_Person__std__shared_ptr_margelo__nitro__test__HybridTestObjectSwiftKotlinSpec__ in
        switch __result {
          case .first(let __value):
            return bridge.create_std__variant_Person__std__shared_ptr_margelo__nitro__test__HybridTestObjectSwiftKotlinSpec__(__value)
          case .second(let __value):
            return bridge.create_std__variant_Person__std__shared_ptr_margelo__nitro__test__HybridTestObjectSwiftKotlinSpec__({ () -> bridge.std__shared_ptr_margelo__nitro__test__HybridTestObjectSwiftKotlinSpec_ in
              let __cxxWrapped = __value.getCxxWrapper()
              return __cxxWrapped.getCxxPart()
            }())
        }
      }().variant
      return bridge.create_Result_std__variant_Person__std__shared_ptr_margelo__nitro__test__HybridTestObjectSwiftKotlinSpec___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__variant_Person__std__shared_ptr_margelo__nitro__test__HybridTestObjectSwiftKotlinSpec___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func simpleFunc() -> bridge.Result_void_ {
    do {
      try self.__implementation.simpleFunc()
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func addNumbers(a: Double, b: Double) -> bridge.Result_double_ {
    do {
      let __result = try self.__implementation.addNumbers(a: a, b: b)
      let __resultCpp = __result
      return bridge.create_Result_double_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_double_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func addStrings(a: std.string, b: std.string) -> bridge.Result_std__string_ {
    do {
      let __result = try self.__implementation.addStrings(a: String(a), b: String(b))
      let __resultCpp = std.string(__result)
      return bridge.create_Result_std__string_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__string_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func multipleArguments(num: Double, str: std.string, boo: Bool) -> bridge.Result_void_ {
    do {
      try self.__implementation.multipleArguments(num: num, str: String(str), boo: boo)
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func bounceStrings(array: bridge.std__vector_std__string_) -> bridge.Result_std__vector_std__string__ {
    do {
      let __result = try self.__implementation.bounceStrings(array: array.map({ __item in String(__item) }))
      let __resultCpp = { () -> bridge.std__vector_std__string_ in
        var __vector = bridge.create_std__vector_std__string_(__result.count)
        for __item in __result {
          __vector.push_back(std.string(__item))
        }
        return __vector
      }()
      return bridge.create_Result_std__vector_std__string__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__vector_std__string__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func bounceNumbers(array: bridge.std__vector_double_) -> bridge.Result_std__vector_double__ {
    do {
      let __result = try self.__implementation.bounceNumbers(array: array.map({ __item in __item }))
      let __resultCpp = { () -> bridge.std__vector_double_ in
        var __vector = bridge.create_std__vector_double_(__result.count)
        for __item in __result {
          __vector.push_back(__item)
        }
        return __vector
      }()
      return bridge.create_Result_std__vector_double__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__vector_double__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func bounceStructs(array: bridge.std__vector_Person_) -> bridge.Result_std__vector_Person__ {
    do {
      let __result = try self.__implementation.bounceStructs(array: array.map({ __item in __item }))
      let __resultCpp = { () -> bridge.std__vector_Person_ in
        var __vector = bridge.create_std__vector_Person_(__result.count)
        for __item in __result {
          __vector.push_back(__item)
        }
        return __vector
      }()
      return bridge.create_Result_std__vector_Person__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__vector_Person__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func bounceEnums(array: bridge.std__vector_Powertrain_) -> bridge.Result_std__vector_Powertrain__ {
    do {
      let __result = try self.__implementation.bounceEnums(array: array.map({ __item in __item }))
      let __resultCpp = { () -> bridge.std__vector_Powertrain_ in
        var __vector = bridge.create_std__vector_Powertrain_(__result.count)
        for __item in __result {
          __vector.push_back(__item)
        }
        return __vector
      }()
      return bridge.create_Result_std__vector_Powertrain__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__vector_Powertrain__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func complexEnumCallback(array: bridge.std__vector_Powertrain_, callback: bridge.Func_void_std__vector_Powertrain_) -> bridge.Result_void_ {
    do {
      try self.__implementation.complexEnumCallback(array: array.map({ __item in __item }), callback: { () -> ([Powertrain]) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_std__vector_Powertrain_(callback)
        return { (__array: [Powertrain]) -> Void in
          __wrappedFunction.call({ () -> bridge.std__vector_Powertrain_ in
            var __vector = bridge.create_std__vector_Powertrain_(__array.count)
            for __item in __array {
              __vector.push_back(__item)
            }
            return __vector
          }())
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func createMap() -> bridge.Result_std__shared_ptr_AnyMap__ {
    do {
      let __result = try self.__implementation.createMap()
      let __resultCpp = __result.cppPart
      return bridge.create_Result_std__shared_ptr_AnyMap__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_AnyMap__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func mapRoundtrip(map: margelo.nitro.SharedAnyMap) -> bridge.Result_std__shared_ptr_AnyMap__ {
    do {
      let __result = try self.__implementation.mapRoundtrip(map: AnyMap(withCppPart: map))
      let __resultCpp = __result.cppPart
      return bridge.create_Result_std__shared_ptr_AnyMap__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_AnyMap__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getMapKeys(map: margelo.nitro.SharedAnyMap) -> bridge.Result_std__vector_std__string__ {
    do {
      let __result = try self.__implementation.getMapKeys(map: AnyMap(withCppPart: map))
      let __resultCpp = { () -> bridge.std__vector_std__string_ in
        var __vector = bridge.create_std__vector_std__string_(__result.count)
        for __item in __result {
          __vector.push_back(std.string(__item))
        }
        return __vector
      }()
      return bridge.create_Result_std__vector_std__string__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__vector_std__string__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func bounceMap(map: bridge.std__unordered_map_std__string__std__variant_double__bool__) -> bridge.Result_std__unordered_map_std__string__std__variant_double__bool___ {
    do {
      let __result = try self.__implementation.bounceMap(map: { () -> Dictionary<String, Variant_Double_Bool> in
        var __dictionary = Dictionary<String, Variant_Double_Bool>(minimumCapacity: map.size())
        let __keys = bridge.get_std__unordered_map_std__string__std__variant_double__bool___keys(map)
        for __key in __keys {
          let __value = map[__key]!
          __dictionary[String(__key)] = { () -> Variant_Double_Bool in
            let __variant = bridge.std__variant_double__bool_(__value)
            switch __variant.index() {
              case 0:
                let __actual = __variant.get_0()
                return .first(__actual)
              case 1:
                let __actual = __variant.get_1()
                return .second(__actual)
              default:
                fatalError("Variant can never have index \(__variant.index())!")
            }
          }()
        }
        return __dictionary
      }())
      let __resultCpp = { () -> bridge.std__unordered_map_std__string__std__variant_double__bool__ in
        var __map = bridge.create_std__unordered_map_std__string__std__variant_double__bool__(__result.count)
        for (__k, __v) in __result {
          bridge.emplace_std__unordered_map_std__string__std__variant_double__bool__(&__map, std.string(__k), { () -> bridge.std__variant_double__bool_ in
            switch __v {
              case .first(let __value):
                return bridge.create_std__variant_double__bool_(__value)
              case .second(let __value):
                return bridge.create_std__variant_double__bool_(__value)
            }
          }().variant)
        }
        return __map
      }()
      return bridge.create_Result_std__unordered_map_std__string__std__variant_double__bool___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__unordered_map_std__string__std__variant_double__bool___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func extractMap(mapWrapper: MapWrapper) -> bridge.Result_std__unordered_map_std__string__std__string__ {
    do {
      let __result = try self.__implementation.extractMap(mapWrapper: mapWrapper)
      let __resultCpp = { () -> bridge.std__unordered_map_std__string__std__string_ in
        var __map = bridge.create_std__unordered_map_std__string__std__string_(__result.count)
        for (__k, __v) in __result {
          bridge.emplace_std__unordered_map_std__string__std__string_(&__map, std.string(__k), std.string(__v))
        }
        return __map
      }()
      return bridge.create_Result_std__unordered_map_std__string__std__string__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__unordered_map_std__string__std__string__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func funcThatThrows() -> bridge.Result_double_ {
    do {
      let __result = try self.__implementation.funcThatThrows()
      let __resultCpp = __result
      return bridge.create_Result_double_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_double_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func funcThatThrowsBeforePromise() -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __result = try self.__implementation.funcThatThrowsBeforePromise()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func throwError(error: std.exception_ptr) -> bridge.Result_void_ {
    do {
      try self.__implementation.throwError(error: RuntimeError.from(cppError: error))
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func tryOptionalParams(num: Double, boo: Bool, str: bridge.std__optional_std__string_) -> bridge.Result_std__string_ {
    do {
      let __result = try self.__implementation.tryOptionalParams(num: num, boo: boo, str: { () -> String? in
        if let __unwrapped = str.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }())
      let __resultCpp = std.string(__result)
      return bridge.create_Result_std__string_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__string_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func tryMiddleParam(num: Double, boo: bridge.std__optional_bool_, str: std.string) -> bridge.Result_std__string_ {
    do {
      let __result = try self.__implementation.tryMiddleParam(num: num, boo: boo.value, str: String(str))
      let __resultCpp = std.string(__result)
      return bridge.create_Result_std__string_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__string_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func tryOptionalEnum(value: bridge.std__optional_Powertrain_) -> bridge.Result_std__optional_Powertrain__ {
    do {
      let __result = try self.__implementation.tryOptionalEnum(value: value.value)
      let __resultCpp = { () -> bridge.std__optional_Powertrain_ in
        if let __unwrappedValue = __result {
          return bridge.create_std__optional_Powertrain_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
      return bridge.create_Result_std__optional_Powertrain__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__optional_Powertrain__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func add1Hour(date: margelo.nitro.chrono_time) -> bridge.Result_std__chrono__system_clock__time_point_ {
    do {
      let __result = try self.__implementation.add1Hour(date: Date(fromChrono: date))
      let __resultCpp = __result.toCpp()
      return bridge.create_Result_std__chrono__system_clock__time_point_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__chrono__system_clock__time_point_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func currentDate() -> bridge.Result_std__chrono__system_clock__time_point_ {
    do {
      let __result = try self.__implementation.currentDate()
      let __resultCpp = __result.toCpp()
      return bridge.create_Result_std__chrono__system_clock__time_point_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__chrono__system_clock__time_point_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func calculateFibonacciSync(value: Double) -> bridge.Result_int64_t_ {
    do {
      let __result = try self.__implementation.calculateFibonacciSync(value: value)
      let __resultCpp = __result
      return bridge.create_Result_int64_t_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_int64_t_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func calculateFibonacciAsync(value: Double) -> bridge.Result_std__shared_ptr_Promise_int64_t___ {
    do {
      let __result = try self.__implementation.calculateFibonacciAsync(value: value)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_int64_t__ in
        let __promise = bridge.create_std__shared_ptr_Promise_int64_t__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_int64_t__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_int64_t___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_int64_t___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func wait(seconds: Double) -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __result = try self.__implementation.wait(seconds: seconds)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func promiseThrows() -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __result = try self.__implementation.promiseThrows()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func awaitAndGetPromise(promise: bridge.std__shared_ptr_Promise_double__) -> bridge.Result_std__shared_ptr_Promise_double___ {
    do {
      let __result = try self.__implementation.awaitAndGetPromise(promise: { () -> Promise<Double> in
        let __promise = Promise<Double>()
        let __resolver = { (__result: Double) in
          __promise.resolve(withResult: __result)
        }
        let __rejecter = { (__error: Error) in
          __promise.reject(withError: __error)
        }
        let __resolverCpp = { () -> bridge.Func_void_double in
          let __closureWrapper = Func_void_double(__resolver)
          return bridge.create_Func_void_double(__closureWrapper.toUnsafe())
        }()
        let __rejecterCpp = { () -> bridge.Func_void_std__exception_ptr in
          let __closureWrapper = Func_void_std__exception_ptr(__rejecter)
          return bridge.create_Func_void_std__exception_ptr(__closureWrapper.toUnsafe())
        }()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_double__(promise)
        __promiseHolder.addOnResolvedListenerCopy(__resolverCpp)
        __promiseHolder.addOnRejectedListener(__rejecterCpp)
        return __promise
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_double__ in
        let __promise = bridge.create_std__shared_ptr_Promise_double__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_double__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_double___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_double___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func awaitAndGetComplexPromise(promise: bridge.std__shared_ptr_Promise_Car__) -> bridge.Result_std__shared_ptr_Promise_Car___ {
    do {
      let __result = try self.__implementation.awaitAndGetComplexPromise(promise: { () -> Promise<Car> in
        let __promise = Promise<Car>()
        let __resolver = { (__result: Car) in
          __promise.resolve(withResult: __result)
        }
        let __rejecter = { (__error: Error) in
          __promise.reject(withError: __error)
        }
        let __resolverCpp = { () -> bridge.Func_void_Car in
          let __closureWrapper = Func_void_Car(__resolver)
          return bridge.create_Func_void_Car(__closureWrapper.toUnsafe())
        }()
        let __rejecterCpp = { () -> bridge.Func_void_std__exception_ptr in
          let __closureWrapper = Func_void_std__exception_ptr(__rejecter)
          return bridge.create_Func_void_std__exception_ptr(__closureWrapper.toUnsafe())
        }()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_Car__(promise)
        __promiseHolder.addOnResolvedListener(__resolverCpp)
        __promiseHolder.addOnRejectedListener(__rejecterCpp)
        return __promise
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_Car__ in
        let __promise = bridge.create_std__shared_ptr_Promise_Car__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_Car__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_Car___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_Car___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func awaitPromise(promise: bridge.std__shared_ptr_Promise_void__) -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __result = try self.__implementation.awaitPromise(promise: { () -> Promise<Void> in
        let __promise = Promise<Void>()
        let __resolver = { __promise.resolve(withResult: ()) }
        let __rejecter = { (__error: Error) in
          __promise.reject(withError: __error)
        }
        let __resolverCpp = { () -> bridge.Func_void in
          let __closureWrapper = Func_void(__resolver)
          return bridge.create_Func_void(__closureWrapper.toUnsafe())
        }()
        let __rejecterCpp = { () -> bridge.Func_void_std__exception_ptr in
          let __closureWrapper = Func_void_std__exception_ptr(__rejecter)
          return bridge.create_Func_void_std__exception_ptr(__closureWrapper.toUnsafe())
        }()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(promise)
        __promiseHolder.addOnResolvedListener(__resolverCpp)
        __promiseHolder.addOnRejectedListener(__rejecterCpp)
        return __promise
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func callCallback(callback: bridge.Func_void) -> bridge.Result_void_ {
    do {
      try self.__implementation.callCallback(callback: { () -> () -> Void in
        let __wrappedFunction = bridge.wrap_Func_void(callback)
        return { () -> Void in
          __wrappedFunction.call()
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func callAll(first: bridge.Func_void, second: bridge.Func_void, third: bridge.Func_void) -> bridge.Result_void_ {
    do {
      try self.__implementation.callAll(first: { () -> () -> Void in
        let __wrappedFunction = bridge.wrap_Func_void(first)
        return { () -> Void in
          __wrappedFunction.call()
        }
      }(), second: { () -> () -> Void in
        let __wrappedFunction = bridge.wrap_Func_void(second)
        return { () -> Void in
          __wrappedFunction.call()
        }
      }(), third: { () -> () -> Void in
        let __wrappedFunction = bridge.wrap_Func_void(third)
        return { () -> Void in
          __wrappedFunction.call()
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func callWithOptional(value: bridge.std__optional_double_, callback: bridge.Func_void_std__optional_double_) -> bridge.Result_void_ {
    do {
      try self.__implementation.callWithOptional(value: value.value, callback: { () -> (Double?) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_std__optional_double_(callback)
        return { (__maybe: Double?) -> Void in
          __wrappedFunction.call({ () -> bridge.std__optional_double_ in
            if let __unwrappedValue = __maybe {
              return bridge.create_std__optional_double_(__unwrappedValue)
            } else {
              return .init()
            }
          }())
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func callSumUpNTimes(callback: bridge.Func_std__shared_ptr_Promise_double__, n: Double) -> bridge.Result_std__shared_ptr_Promise_double___ {
    do {
      let __result = try self.__implementation.callSumUpNTimes(callback: { () -> () -> Promise<Double> in
        let __wrappedFunction = bridge.wrap_Func_std__shared_ptr_Promise_double__(callback)
        return { () -> Promise<Double> in
          let __result = __wrappedFunction.call()
          return { () -> Promise<Double> in
            let __promise = Promise<Double>()
            let __resolver = { (__result: Double) in
              __promise.resolve(withResult: __result)
            }
            let __rejecter = { (__error: Error) in
              __promise.reject(withError: __error)
            }
            let __resolverCpp = { () -> bridge.Func_void_double in
              let __closureWrapper = Func_void_double(__resolver)
              return bridge.create_Func_void_double(__closureWrapper.toUnsafe())
            }()
            let __rejecterCpp = { () -> bridge.Func_void_std__exception_ptr in
              let __closureWrapper = Func_void_std__exception_ptr(__rejecter)
              return bridge.create_Func_void_std__exception_ptr(__closureWrapper.toUnsafe())
            }()
            let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_double__(__result)
            __promiseHolder.addOnResolvedListenerCopy(__resolverCpp)
            __promiseHolder.addOnRejectedListener(__rejecterCpp)
            return __promise
          }()
        }
      }(), n: n)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_double__ in
        let __promise = bridge.create_std__shared_ptr_Promise_double__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_double__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_double___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_double___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func callbackAsyncPromise(callback: bridge.Func_std__shared_ptr_Promise_std__shared_ptr_Promise_double____) -> bridge.Result_std__shared_ptr_Promise_double___ {
    do {
      let __result = try self.__implementation.callbackAsyncPromise(callback: { () -> () -> Promise<Promise<Double>> in
        let __wrappedFunction = bridge.wrap_Func_std__shared_ptr_Promise_std__shared_ptr_Promise_double____(callback)
        return { () -> Promise<Promise<Double>> in
          let __result = __wrappedFunction.call()
          return { () -> Promise<Promise<Double>> in
            let __promise = Promise<Promise<Double>>()
            let __resolver = { (__result: Promise<Double>) in
              __promise.resolve(withResult: __result)
            }
            let __rejecter = { (__error: Error) in
              __promise.reject(withError: __error)
            }
            let __resolverCpp = { () -> bridge.Func_void_std__shared_ptr_Promise_double__ in
              let __closureWrapper = Func_void_std__shared_ptr_Promise_double__(__resolver)
              return bridge.create_Func_void_std__shared_ptr_Promise_double__(__closureWrapper.toUnsafe())
            }()
            let __rejecterCpp = { () -> bridge.Func_void_std__exception_ptr in
              let __closureWrapper = Func_void_std__exception_ptr(__rejecter)
              return bridge.create_Func_void_std__exception_ptr(__closureWrapper.toUnsafe())
            }()
            let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__shared_ptr_Promise_double____(__result)
            __promiseHolder.addOnResolvedListener(__resolverCpp)
            __promiseHolder.addOnRejectedListener(__rejecterCpp)
            return __promise
          }()
        }
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_double__ in
        let __promise = bridge.create_std__shared_ptr_Promise_double__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_double__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_double___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_double___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func callbackAsyncPromiseBuffer(callback: bridge.Func_std__shared_ptr_Promise_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer_____) -> bridge.Result_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer____ {
    do {
      let __result = try self.__implementation.callbackAsyncPromiseBuffer(callback: { () -> () -> Promise<Promise<ArrayBuffer>> in
        let __wrappedFunction = bridge.wrap_Func_std__shared_ptr_Promise_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer_____(callback)
        return { () -> Promise<Promise<ArrayBuffer>> in
          let __result = __wrappedFunction.call()
          return { () -> Promise<Promise<ArrayBuffer>> in
            let __promise = Promise<Promise<ArrayBuffer>>()
            let __resolver = { (__result: Promise<ArrayBuffer>) in
              __promise.resolve(withResult: __result)
            }
            let __rejecter = { (__error: Error) in
              __promise.reject(withError: __error)
            }
            let __resolverCpp = { () -> bridge.Func_void_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___ in
              let __closureWrapper = Func_void_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___(__resolver)
              return bridge.create_Func_void_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___(__closureWrapper.toUnsafe())
            }()
            let __rejecterCpp = { () -> bridge.Func_void_std__exception_ptr in
              let __closureWrapper = Func_void_std__exception_ptr(__rejecter)
              return bridge.create_Func_void_std__exception_ptr(__closureWrapper.toUnsafe())
            }()
            let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer_____(__result)
            __promiseHolder.addOnResolvedListener(__resolverCpp)
            __promiseHolder.addOnRejectedListener(__rejecterCpp)
            return __promise
          }()
        }
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result.getArrayBuffer()) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getComplexCallback() -> bridge.Result_std__function_void_double____value______ {
    do {
      let __result = try self.__implementation.getComplexCallback()
      let __resultCpp = { () -> bridge.Func_void_double in
        let __closureWrapper = Func_void_double(__result)
        return bridge.create_Func_void_double(__closureWrapper.toUnsafe())
      }()
      return bridge.create_Result_std__function_void_double____value______(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__function_void_double____value______(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getValueFromJSCallbackAndWait(getValue: bridge.Func_std__shared_ptr_Promise_double__) -> bridge.Result_std__shared_ptr_Promise_double___ {
    do {
      let __result = try self.__implementation.getValueFromJSCallbackAndWait(getValue: { () -> () -> Promise<Double> in
        let __wrappedFunction = bridge.wrap_Func_std__shared_ptr_Promise_double__(getValue)
        return { () -> Promise<Double> in
          let __result = __wrappedFunction.call()
          return { () -> Promise<Double> in
            let __promise = Promise<Double>()
            let __resolver = { (__result: Double) in
              __promise.resolve(withResult: __result)
            }
            let __rejecter = { (__error: Error) in
              __promise.reject(withError: __error)
            }
            let __resolverCpp = { () -> bridge.Func_void_double in
              let __closureWrapper = Func_void_double(__resolver)
              return bridge.create_Func_void_double(__closureWrapper.toUnsafe())
            }()
            let __rejecterCpp = { () -> bridge.Func_void_std__exception_ptr in
              let __closureWrapper = Func_void_std__exception_ptr(__rejecter)
              return bridge.create_Func_void_std__exception_ptr(__closureWrapper.toUnsafe())
            }()
            let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_double__(__result)
            __promiseHolder.addOnResolvedListenerCopy(__resolverCpp)
            __promiseHolder.addOnRejectedListener(__rejecterCpp)
            return __promise
          }()
        }
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_double__ in
        let __promise = bridge.create_std__shared_ptr_Promise_double__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_double__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_double___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_double___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getValueFromJsCallback(callback: bridge.Func_std__shared_ptr_Promise_std__string__, andThenCall: bridge.Func_void_std__string) -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __result = try self.__implementation.getValueFromJsCallback(callback: { () -> () -> Promise<String> in
        let __wrappedFunction = bridge.wrap_Func_std__shared_ptr_Promise_std__string__(callback)
        return { () -> Promise<String> in
          let __result = __wrappedFunction.call()
          return { () -> Promise<String> in
            let __promise = Promise<String>()
            let __resolver = { (__result: String) in
              __promise.resolve(withResult: __result)
            }
            let __rejecter = { (__error: Error) in
              __promise.reject(withError: __error)
            }
            let __resolverCpp = { () -> bridge.Func_void_std__string in
              let __closureWrapper = Func_void_std__string(__resolver)
              return bridge.create_Func_void_std__string(__closureWrapper.toUnsafe())
            }()
            let __rejecterCpp = { () -> bridge.Func_void_std__exception_ptr in
              let __closureWrapper = Func_void_std__exception_ptr(__rejecter)
              return bridge.create_Func_void_std__exception_ptr(__closureWrapper.toUnsafe())
            }()
            let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__string__(__result)
            __promiseHolder.addOnResolvedListener(__resolverCpp)
            __promiseHolder.addOnRejectedListener(__rejecterCpp)
            return __promise
          }()
        }
      }(), andThenCall: { () -> (String) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_std__string(andThenCall)
        return { (__valueFromJs: String) -> Void in
          __wrappedFunction.call(std.string(__valueFromJs))
        }
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getCar() -> bridge.Result_Car_ {
    do {
      let __result = try self.__implementation.getCar()
      let __resultCpp = __result
      return bridge.create_Result_Car_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_Car_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func isCarElectric(car: Car) -> bridge.Result_bool_ {
    do {
      let __result = try self.__implementation.isCarElectric(car: car)
      let __resultCpp = __result
      return bridge.create_Result_bool_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_bool_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getDriver(car: Car) -> bridge.Result_std__optional_Person__ {
    do {
      let __result = try self.__implementation.getDriver(car: car)
      let __resultCpp = { () -> bridge.std__optional_Person_ in
        if let __unwrappedValue = __result {
          return bridge.create_std__optional_Person_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
      return bridge.create_Result_std__optional_Person__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__optional_Person__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func jsStyleObjectAsParameters(params: JsStyleStruct) -> bridge.Result_void_ {
    do {
      try self.__implementation.jsStyleObjectAsParameters(params: params)
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func createArrayBuffer() -> bridge.Result_std__shared_ptr_ArrayBuffer__ {
    do {
      let __result = try self.__implementation.createArrayBuffer()
      let __resultCpp = __result.getArrayBuffer()
      return bridge.create_Result_std__shared_ptr_ArrayBuffer__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_ArrayBuffer__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func createArrayBufferFromNativeBuffer(copy: Bool) -> bridge.Result_std__shared_ptr_ArrayBuffer__ {
    do {
      let __result = try self.__implementation.createArrayBufferFromNativeBuffer(copy: copy)
      let __resultCpp = __result.getArrayBuffer()
      return bridge.create_Result_std__shared_ptr_ArrayBuffer__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_ArrayBuffer__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func copyBuffer(buffer: ArrayBuffer) -> bridge.Result_std__shared_ptr_ArrayBuffer__ {
    do {
      let __result = try self.__implementation.copyBuffer(buffer: buffer)
      let __resultCpp = __result.getArrayBuffer()
      return bridge.create_Result_std__shared_ptr_ArrayBuffer__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_ArrayBuffer__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getBufferLastItem(buffer: ArrayBuffer) -> bridge.Result_double_ {
    do {
      let __result = try self.__implementation.getBufferLastItem(buffer: buffer)
      let __resultCpp = __result
      return bridge.create_Result_double_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_double_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func setAllValuesTo(buffer: ArrayBuffer, value: Double) -> bridge.Result_void_ {
    do {
      try self.__implementation.setAllValuesTo(buffer: buffer, value: value)
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func createArrayBufferAsync() -> bridge.Result_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer____ {
    do {
      let __result = try self.__implementation.createArrayBufferAsync()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result.getArrayBuffer()) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func bounceArrayBuffer(buffer: ArrayBuffer) -> bridge.Result_std__shared_ptr_ArrayBuffer__ {
    do {
      let __result = try self.__implementation.bounceArrayBuffer(buffer: buffer)
      let __resultCpp = __result.getArrayBuffer()
      return bridge.create_Result_std__shared_ptr_ArrayBuffer__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_ArrayBuffer__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func passVariant(either: bridge.std__variant_std__string__double__bool__std__vector_double___std__vector_std__string__) -> bridge.Result_std__variant_std__string__double__ {
    do {
      let __result = try self.__implementation.passVariant(either: { () -> Variant_String_Double_Bool__Double___String_ in
        let __variant = either
        switch __variant.index() {
          case 0:
            let __actual = __variant.get_0()
            return .first(String(__actual))
          case 1:
            let __actual = __variant.get_1()
            return .second(__actual)
          case 2:
            let __actual = __variant.get_2()
            return .third(__actual)
          case 3:
            let __actual = __variant.get_3()
            return .fourth(__actual.map({ __item in __item }))
          case 4:
            let __actual = __variant.get_4()
            return .fifth(__actual.map({ __item in String(__item) }))
          default:
            fatalError("Variant can never have index \(__variant.index())!")
        }
      }())
      let __resultCpp = { () -> bridge.std__variant_std__string__double_ in
        switch __result {
          case .first(let __value):
            return bridge.create_std__variant_std__string__double_(std.string(__value))
          case .second(let __value):
            return bridge.create_std__variant_std__string__double_(__value)
        }
      }().variant
      return bridge.create_Result_std__variant_std__string__double__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__variant_std__string__double__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getVariantEnum(variant: bridge.std__variant_bool__OldEnum_) -> bridge.Result_std__variant_bool__OldEnum__ {
    do {
      let __result = try self.__implementation.getVariantEnum(variant: { () -> Variant_Bool_OldEnum in
        let __variant = variant
        switch __variant.index() {
          case 0:
            let __actual = __variant.get_0()
            return .first(__actual)
          case 1:
            let __actual = __variant.get_1()
            return .second(__actual)
          default:
            fatalError("Variant can never have index \(__variant.index())!")
        }
      }())
      let __resultCpp = { () -> bridge.std__variant_bool__OldEnum_ in
        switch __result {
          case .first(let __value):
            return bridge.create_std__variant_bool__OldEnum_(__value)
          case .second(let __value):
            return bridge.create_std__variant_bool__OldEnum_(__value)
        }
      }().variant
      return bridge.create_Result_std__variant_bool__OldEnum__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__variant_bool__OldEnum__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getVariantObjects(variant: bridge.std__variant_Car__Person_) -> bridge.Result_std__variant_Car__Person__ {
    do {
      let __result = try self.__implementation.getVariantObjects(variant: { () -> Variant_Car_Person in
        let __variant = variant
        switch __variant.index() {
          case 0:
            let __actual = __variant.get_0()
            return .first(__actual)
          case 1:
            let __actual = __variant.get_1()
            return .second(__actual)
          default:
            fatalError("Variant can never have index \(__variant.index())!")
        }
      }())
      let __resultCpp = { () -> bridge.std__variant_Car__Person_ in
        switch __result {
          case .first(let __value):
            return bridge.create_std__variant_Car__Person_(__value)
          case .second(let __value):
            return bridge.create_std__variant_Car__Person_(__value)
        }
      }().variant
      return bridge.create_Result_std__variant_Car__Person__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__variant_Car__Person__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func passNamedVariant(variant: bridge.std__variant_std__string__Car_) -> bridge.Result_std__variant_std__string__Car__ {
    do {
      let __result = try self.__implementation.passNamedVariant(variant: { () -> NamedVariant in
        let __variant = variant
        switch __variant.index() {
          case 0:
            let __actual = __variant.get_0()
            return .first(String(__actual))
          case 1:
            let __actual = __variant.get_1()
            return .second(__actual)
          default:
            fatalError("Variant can never have index \(__variant.index())!")
        }
      }())
      let __resultCpp = { () -> bridge.std__variant_std__string__Car_ in
        switch __result {
          case .first(let __value):
            return bridge.create_std__variant_std__string__Car_(std.string(__value))
          case .second(let __value):
            return bridge.create_std__variant_std__string__Car_(__value)
        }
      }().variant
      return bridge.create_Result_std__variant_std__string__Car__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__variant_std__string__Car__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func createChild() -> bridge.Result_std__shared_ptr_margelo__nitro__test__HybridChildSpec__ {
    do {
      let __result = try self.__implementation.createChild()
      let __resultCpp = { () -> bridge.std__shared_ptr_margelo__nitro__test__HybridChildSpec_ in
        let __cxxWrapped = __result.getCxxWrapper()
        return __cxxWrapped.getCxxPart()
      }()
      return bridge.create_Result_std__shared_ptr_margelo__nitro__test__HybridChildSpec__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_margelo__nitro__test__HybridChildSpec__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func createBase() -> bridge.Result_std__shared_ptr_margelo__nitro__test__HybridBaseSpec__ {
    do {
      let __result = try self.__implementation.createBase()
      let __resultCpp = { () -> bridge.std__shared_ptr_margelo__nitro__test__HybridBaseSpec_ in
        let __cxxWrapped = __result.getCxxWrapper()
        return __cxxWrapped.getCxxPart()
      }()
      return bridge.create_Result_std__shared_ptr_margelo__nitro__test__HybridBaseSpec__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_margelo__nitro__test__HybridBaseSpec__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func createBaseActualChild() -> bridge.Result_std__shared_ptr_margelo__nitro__test__HybridBaseSpec__ {
    do {
      let __result = try self.__implementation.createBaseActualChild()
      let __resultCpp = { () -> bridge.std__shared_ptr_margelo__nitro__test__HybridBaseSpec_ in
        let __cxxWrapped = __result.getCxxWrapper()
        return __cxxWrapped.getCxxPart()
      }()
      return bridge.create_Result_std__shared_ptr_margelo__nitro__test__HybridBaseSpec__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_margelo__nitro__test__HybridBaseSpec__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func bounceChild(child: bridge.std__shared_ptr_margelo__nitro__test__HybridChildSpec_) -> bridge.Result_std__shared_ptr_margelo__nitro__test__HybridChildSpec__ {
    do {
      let __result = try self.__implementation.bounceChild(child: { () -> HybridChildSpec in
        let __unsafePointer = bridge.get_std__shared_ptr_margelo__nitro__test__HybridChildSpec_(child)
        let __instance = HybridChildSpec_cxx.fromUnsafe(__unsafePointer)
        return __instance.getHybridChildSpec()
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_margelo__nitro__test__HybridChildSpec_ in
        let __cxxWrapped = __result.getCxxWrapper()
        return __cxxWrapped.getCxxPart()
      }()
      return bridge.create_Result_std__shared_ptr_margelo__nitro__test__HybridChildSpec__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_margelo__nitro__test__HybridChildSpec__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func bounceBase(base: bridge.std__shared_ptr_margelo__nitro__test__HybridBaseSpec_) -> bridge.Result_std__shared_ptr_margelo__nitro__test__HybridBaseSpec__ {
    do {
      let __result = try self.__implementation.bounceBase(base: { () -> HybridBaseSpec in
        let __unsafePointer = bridge.get_std__shared_ptr_margelo__nitro__test__HybridBaseSpec_(base)
        let __instance = HybridBaseSpec_cxx.fromUnsafe(__unsafePointer)
        return __instance.getHybridBaseSpec()
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_margelo__nitro__test__HybridBaseSpec_ in
        let __cxxWrapped = __result.getCxxWrapper()
        return __cxxWrapped.getCxxPart()
      }()
      return bridge.create_Result_std__shared_ptr_margelo__nitro__test__HybridBaseSpec__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_margelo__nitro__test__HybridBaseSpec__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func bounceChildBase(child: bridge.std__shared_ptr_margelo__nitro__test__HybridChildSpec_) -> bridge.Result_std__shared_ptr_margelo__nitro__test__HybridBaseSpec__ {
    do {
      let __result = try self.__implementation.bounceChildBase(child: { () -> HybridChildSpec in
        let __unsafePointer = bridge.get_std__shared_ptr_margelo__nitro__test__HybridChildSpec_(child)
        let __instance = HybridChildSpec_cxx.fromUnsafe(__unsafePointer)
        return __instance.getHybridChildSpec()
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_margelo__nitro__test__HybridBaseSpec_ in
        let __cxxWrapped = __result.getCxxWrapper()
        return __cxxWrapped.getCxxPart()
      }()
      return bridge.create_Result_std__shared_ptr_margelo__nitro__test__HybridBaseSpec__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_margelo__nitro__test__HybridBaseSpec__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func castBase(base: bridge.std__shared_ptr_margelo__nitro__test__HybridBaseSpec_) -> bridge.Result_std__shared_ptr_margelo__nitro__test__HybridChildSpec__ {
    do {
      let __result = try self.__implementation.castBase(base: { () -> HybridBaseSpec in
        let __unsafePointer = bridge.get_std__shared_ptr_margelo__nitro__test__HybridBaseSpec_(base)
        let __instance = HybridBaseSpec_cxx.fromUnsafe(__unsafePointer)
        return __instance.getHybridBaseSpec()
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_margelo__nitro__test__HybridChildSpec_ in
        let __cxxWrapped = __result.getCxxWrapper()
        return __cxxWrapped.getCxxPart()
      }()
      return bridge.create_Result_std__shared_ptr_margelo__nitro__test__HybridChildSpec__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_margelo__nitro__test__HybridChildSpec__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func callbackSync(callback: bridge.Func_double) -> bridge.Result_double_ {
    do {
      let __result = try self.__implementation.callbackSync(callback: { () -> () -> Double in
        let __wrappedFunction = bridge.wrap_Func_double(callback)
        return { () -> Double in
          let __result = __wrappedFunction.call()
          return __result
        }
      }())
      let __resultCpp = __result
      return bridge.create_Result_double_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_double_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getIsViewBlue(view: bridge.std__shared_ptr_margelo__nitro__test__HybridTestViewSpec_) -> bridge.Result_bool_ {
    do {
      let __result = try self.__implementation.getIsViewBlue(view: { () -> HybridTestViewSpec in
        let __unsafePointer = bridge.get_std__shared_ptr_margelo__nitro__test__HybridTestViewSpec_(view)
        let __instance = HybridTestViewSpec_cxx.fromUnsafe(__unsafePointer)
        return __instance.getHybridTestViewSpec()
      }())
      let __resultCpp = __result
      return bridge.create_Result_bool_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_bool_(__exceptionPtr)
    }
  }
}
