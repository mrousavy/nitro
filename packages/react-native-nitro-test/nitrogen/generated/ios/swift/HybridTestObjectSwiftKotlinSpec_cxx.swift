///
/// HybridTestObjectSwiftKotlinSpec_cxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules
import NitroModules
import NitroTestExternal

/**
 * A class implementation that bridges HybridTestObjectSwiftKotlinSpec over to C++.
 * This does multiple things:
 *
 * 1. In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 * 2. To avoid exposing the whole inheritance chain to C++, we only expose the methods HybridTestObjectSwiftKotlinSpec defines itself,
 *    otherwise C++ would see HybridTestObjectSwiftKotlinSpec's base class and if that's an external symbol the build fails.
 * 3. We use void* to hold the Swift instance to avoid exposing the class to C++, this way we only see the static funcs.
 * 4. A lot of types have to be bridged from C++ to Swift and back - e.g. arrays or functions. This does all that.
 * 5. Since C++ cannot catch Swift errors, we wrap them in a Result<T> type here that holds either T or Error.
 */
public class HybridTestObjectSwiftKotlinSpec_cxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::test::bridge::swift`)
   * from `NitroTest-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.test.bridge.swift

  @inline(__always)
  private static func cast(_ this: UnsafeRawPointer) -> HybridTestObjectSwiftKotlinSpec {
    return MemoryHelper.castUnsafe(this)
  }

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  @inline(__always)
  public static func getMemorySize(this: UnsafeRawPointer) -> Int {
    let __instance = cast(this)
    return MemoryHelper.getSizeOf(__instance) + __instance.memorySize
  }

  /**
   * Call dispose() on the Swift class.
   * This _may_ be called manually from JS.
   */
  @inline(__always)
  public static func dispose(this: UnsafeRawPointer) {
    let __instance = cast(this)
    __instance.dispose()
  }

  /**
   * Call toString() on the Swift class.
   */
  @inline(__always)
  public static func toString(this: UnsafeRawPointer) -> String {
    let __instance = cast(this)
    return __instance.toString()
  }

  /**
   * Call equals() on the Swift class.
   */
  @inline(__always)
  public static func equals(this: UnsafeRawPointer, other: UnsafeRawPointer) -> Bool {
    let __instance = cast(this)
    let __other = cast(other)
    return __instance === __other
  }

  // Properties
  @inline(__always)
  public static func getThisObject(this: UnsafeRawPointer) -> bridge.std__shared_ptr_HybridTestObjectSwiftKotlinSpec_ {
    let __instance = cast(this)
    let __value = __instance.thisObject
    return { () -> bridge.std__shared_ptr_HybridTestObjectSwiftKotlinSpec_ in
      return __value.getCxxPart()
    }()
  }
  
  @inline(__always)
  public static func getOptionalHybrid(this: UnsafeRawPointer) -> bridge.std__optional_std__shared_ptr_HybridTestObjectSwiftKotlinSpec__ {
    let __instance = cast(this)
    let __value = __instance.optionalHybrid
    return { () -> bridge.std__optional_std__shared_ptr_HybridTestObjectSwiftKotlinSpec__ in
      if let __unwrappedValue = __value {
        return bridge.create_std__optional_std__shared_ptr_HybridTestObjectSwiftKotlinSpec__({ () -> bridge.std__shared_ptr_HybridTestObjectSwiftKotlinSpec_ in
          return __unwrappedValue.getCxxPart()
        }())
      } else {
        return .init()
      }
    }()
  }
  @inline(__always)
  public static func setOptionalHybrid(this: UnsafeRawPointer, newValue: bridge.std__optional_std__shared_ptr_HybridTestObjectSwiftKotlinSpec__) {
    let __instance = cast(this)
    __instance.optionalHybrid = { () -> (any HybridTestObjectSwiftKotlinSpec)? in
      if bridge.has_value_std__optional_std__shared_ptr_HybridTestObjectSwiftKotlinSpec__(newValue) {
        let __unwrapped = bridge.get_std__optional_std__shared_ptr_HybridTestObjectSwiftKotlinSpec__(newValue)
        return { () -> HybridTestObjectSwiftKotlinSpec in
          let __unsafePointer = bridge.get_std__shared_ptr_HybridTestObjectSwiftKotlinSpec_(__unwrapped)
          return MemoryHelper.castUnsafe(__unsafePointer)
        }()
      } else {
        return nil
      }
    }()
  }
  
  @inline(__always)
  public static func getNumberValue(this: UnsafeRawPointer) -> Double {
    let __instance = cast(this)
    let __value = __instance.numberValue
    return __value
  }
  @inline(__always)
  public static func setNumberValue(this: UnsafeRawPointer, newValue: Double) {
    let __instance = cast(this)
    __instance.numberValue = newValue
  }
  
  @inline(__always)
  public static func getBoolValue(this: UnsafeRawPointer) -> Bool {
    let __instance = cast(this)
    let __value = __instance.boolValue
    return __value
  }
  @inline(__always)
  public static func setBoolValue(this: UnsafeRawPointer, newValue: Bool) {
    let __instance = cast(this)
    __instance.boolValue = newValue
  }
  
  @inline(__always)
  public static func getStringValue(this: UnsafeRawPointer) -> std.string {
    let __instance = cast(this)
    let __value = __instance.stringValue
    return std.string(__value)
  }
  @inline(__always)
  public static func setStringValue(this: UnsafeRawPointer, newValue: std.string) {
    let __instance = cast(this)
    __instance.stringValue = String(newValue)
  }
  
  @inline(__always)
  public static func getBigintValue(this: UnsafeRawPointer) -> Int64 {
    let __instance = cast(this)
    let __value = __instance.bigintValue
    return __value
  }
  @inline(__always)
  public static func setBigintValue(this: UnsafeRawPointer, newValue: Int64) {
    let __instance = cast(this)
    __instance.bigintValue = newValue
  }
  
  @inline(__always)
  public static func getStringOrUndefined(this: UnsafeRawPointer) -> bridge.std__optional_std__string_ {
    let __instance = cast(this)
    let __value = __instance.stringOrUndefined
    return { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = __value {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }()
  }
  @inline(__always)
  public static func setStringOrUndefined(this: UnsafeRawPointer, newValue: bridge.std__optional_std__string_) {
    let __instance = cast(this)
    __instance.stringOrUndefined = { () -> String? in
      if bridge.has_value_std__optional_std__string_(newValue) {
        let __unwrapped = bridge.get_std__optional_std__string_(newValue)
        return String(__unwrapped)
      } else {
        return nil
      }
    }()
  }
  
  @inline(__always)
  public static func getStringOrNull(this: UnsafeRawPointer) -> bridge.std__optional_std__string_ {
    let __instance = cast(this)
    let __value = __instance.stringOrNull
    return { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = __value {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }()
  }
  @inline(__always)
  public static func setStringOrNull(this: UnsafeRawPointer, newValue: bridge.std__optional_std__string_) {
    let __instance = cast(this)
    __instance.stringOrNull = { () -> String? in
      if bridge.has_value_std__optional_std__string_(newValue) {
        let __unwrapped = bridge.get_std__optional_std__string_(newValue)
        return String(__unwrapped)
      } else {
        return nil
      }
    }()
  }
  
  @inline(__always)
  public static func getOptionalString(this: UnsafeRawPointer) -> bridge.std__optional_std__string_ {
    let __instance = cast(this)
    let __value = __instance.optionalString
    return { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = __value {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }()
  }
  @inline(__always)
  public static func setOptionalString(this: UnsafeRawPointer, newValue: bridge.std__optional_std__string_) {
    let __instance = cast(this)
    __instance.optionalString = { () -> String? in
      if bridge.has_value_std__optional_std__string_(newValue) {
        let __unwrapped = bridge.get_std__optional_std__string_(newValue)
        return String(__unwrapped)
      } else {
        return nil
      }
    }()
  }
  
  @inline(__always)
  public static func getOptionalArray(this: UnsafeRawPointer) -> bridge.std__optional_std__vector_std__string__ {
    let __instance = cast(this)
    let __value = __instance.optionalArray
    return { () -> bridge.std__optional_std__vector_std__string__ in
      if let __unwrappedValue = __value {
        return bridge.create_std__optional_std__vector_std__string__({ () -> bridge.std__vector_std__string_ in
          var __vector = bridge.create_std__vector_std__string_(__unwrappedValue.count)
          for __item in __unwrappedValue {
            __vector.push_back(std.string(__item))
          }
          return __vector
        }())
      } else {
        return .init()
      }
    }()
  }
  @inline(__always)
  public static func setOptionalArray(this: UnsafeRawPointer, newValue: bridge.std__optional_std__vector_std__string__) {
    let __instance = cast(this)
    __instance.optionalArray = { () -> [String]? in
      if bridge.has_value_std__optional_std__vector_std__string__(newValue) {
        let __unwrapped = bridge.get_std__optional_std__vector_std__string__(newValue)
        return __unwrapped.map({ __item in String(__item) })
      } else {
        return nil
      }
    }()
  }
  
  @inline(__always)
  public static func getOptionalEnum(this: UnsafeRawPointer) -> bridge.std__optional_Powertrain_ {
    let __instance = cast(this)
    let __value = __instance.optionalEnum
    return { () -> bridge.std__optional_Powertrain_ in
      if let __unwrappedValue = __value {
        return bridge.create_std__optional_Powertrain_(__unwrappedValue)
      } else {
        return .init()
      }
    }()
  }
  @inline(__always)
  public static func setOptionalEnum(this: UnsafeRawPointer, newValue: bridge.std__optional_Powertrain_) {
    let __instance = cast(this)
    __instance.optionalEnum = newValue.value
  }
  
  @inline(__always)
  public static func getOptionalOldEnum(this: UnsafeRawPointer) -> bridge.std__optional_OldEnum_ {
    let __instance = cast(this)
    let __value = __instance.optionalOldEnum
    return { () -> bridge.std__optional_OldEnum_ in
      if let __unwrappedValue = __value {
        return bridge.create_std__optional_OldEnum_(__unwrappedValue)
      } else {
        return .init()
      }
    }()
  }
  @inline(__always)
  public static func setOptionalOldEnum(this: UnsafeRawPointer, newValue: bridge.std__optional_OldEnum_) {
    let __instance = cast(this)
    __instance.optionalOldEnum = newValue.has_value() ? newValue.pointee : nil
  }
  
  @inline(__always)
  public static func getOptionalCallback(this: UnsafeRawPointer) -> bridge.std__optional_std__function_void_double____value______ {
    let __instance = cast(this)
    let __value = __instance.optionalCallback
    return { () -> bridge.std__optional_std__function_void_double____value______ in
      if let __unwrappedValue = __value {
        return bridge.create_std__optional_std__function_void_double____value______({ () -> bridge.Func_void_double in
          let __closureWrapper = Func_void_double(__unwrappedValue)
          return bridge.create_Func_void_double(__closureWrapper.toUnsafe())
        }())
      } else {
        return .init()
      }
    }()
  }
  @inline(__always)
  public static func setOptionalCallback(this: UnsafeRawPointer, newValue: bridge.std__optional_std__function_void_double____value______) {
    let __instance = cast(this)
    __instance.optionalCallback = { () -> ((_ value: Double) -> Void)? in
      if bridge.has_value_std__optional_std__function_void_double____value______(newValue) {
        let __unwrapped = bridge.get_std__optional_std__function_void_double____value______(newValue)
        return { () -> (Double) -> Void in
          let __wrappedFunction = bridge.wrap_Func_void_double(__unwrapped)
          return { (__value: Double) -> Void in
            __wrappedFunction.call(__value)
          }
        }()
      } else {
        return nil
      }
    }()
  }
  
  @inline(__always)
  public static func getSomeVariant(this: UnsafeRawPointer) -> bridge.std__variant_std__string__double_ {
    let __instance = cast(this)
    let __value = __instance.someVariant
    return { () -> bridge.std__variant_std__string__double_ in
      switch __value {
        case .first(let __value):
          return bridge.create_std__variant_std__string__double_(std.string(__value))
        case .second(let __value):
          return bridge.create_std__variant_std__string__double_(__value)
      }
    }()
  }
  @inline(__always)
  public static func setSomeVariant(this: UnsafeRawPointer, newValue: bridge.std__variant_std__string__double_) {
    let __instance = cast(this)
    __instance.someVariant = { () -> Variant_String_Double in
      let __variant = newValue
      switch __variant.index() {
        case 0:
          let __actual = __variant.get_0()
          return .first(String(__actual))
        case 1:
          let __actual = __variant.get_1()
          return .second(__actual)
        default:
          fatalError("Variant can never have index \(__variant.index())!")
      }
    }()
  }

  // Methods
  @inline(__always)
  public static func newTestObject(this: UnsafeRawPointer) -> bridge.Result_std__shared_ptr_HybridTestObjectSwiftKotlinSpec__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.newTestObject()
      let __resultCpp = { () -> bridge.std__shared_ptr_HybridTestObjectSwiftKotlinSpec_ in
        return __result.getCxxPart()
      }()
      return bridge.create_Result_std__shared_ptr_HybridTestObjectSwiftKotlinSpec__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_HybridTestObjectSwiftKotlinSpec__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func getVariantHybrid(this: UnsafeRawPointer, variant: bridge.std__variant_std__shared_ptr_HybridTestObjectSwiftKotlinSpec___Person_) -> bridge.Result_std__variant_std__shared_ptr_HybridTestObjectSwiftKotlinSpec___Person__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.getVariantHybrid(variant: { () -> Variant__any_HybridTestObjectSwiftKotlinSpec__Person in
        let __variant = variant
        switch __variant.index() {
          case 0:
            let __actual = __variant.get_0()
            return .first({ () -> HybridTestObjectSwiftKotlinSpec in
              let __unsafePointer = bridge.get_std__shared_ptr_HybridTestObjectSwiftKotlinSpec_(__actual)
              return MemoryHelper.castUnsafe(__unsafePointer)
            }())
          case 1:
            let __actual = __variant.get_1()
            return .second(__actual)
          default:
            fatalError("Variant can never have index \(__variant.index())!")
        }
      }())
      let __resultCpp = { () -> bridge.std__variant_std__shared_ptr_HybridTestObjectSwiftKotlinSpec___Person_ in
        switch __result {
          case .first(let __value):
            return bridge.create_std__variant_std__shared_ptr_HybridTestObjectSwiftKotlinSpec___Person_({ () -> bridge.std__shared_ptr_HybridTestObjectSwiftKotlinSpec_ in
              return __value.getCxxPart()
            }())
          case .second(let __value):
            return bridge.create_std__variant_std__shared_ptr_HybridTestObjectSwiftKotlinSpec___Person_(__value)
        }
      }().variant
      return bridge.create_Result_std__variant_std__shared_ptr_HybridTestObjectSwiftKotlinSpec___Person__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__variant_std__shared_ptr_HybridTestObjectSwiftKotlinSpec___Person__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func simpleFunc(this: UnsafeRawPointer) -> bridge.Result_void_ {
    do {
      let __instance = cast(this)
      try __instance.simpleFunc()
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func addNumbers(this: UnsafeRawPointer, a: Double, b: Double) -> bridge.Result_double_ {
    do {
      let __instance = cast(this)
      let __result = try __instance.addNumbers(a: a, b: b)
      let __resultCpp = __result
      return bridge.create_Result_double_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_double_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func addStrings(this: UnsafeRawPointer, a: std.string, b: std.string) -> bridge.Result_std__string_ {
    do {
      let __instance = cast(this)
      let __result = try __instance.addStrings(a: String(a), b: String(b))
      let __resultCpp = std.string(__result)
      return bridge.create_Result_std__string_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__string_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func multipleArguments(this: UnsafeRawPointer, num: Double, str: std.string, boo: Bool) -> bridge.Result_void_ {
    do {
      let __instance = cast(this)
      try __instance.multipleArguments(num: num, str: String(str), boo: boo)
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func bounceStrings(this: UnsafeRawPointer, array: bridge.std__vector_std__string_) -> bridge.Result_std__vector_std__string__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.bounceStrings(array: array.map({ __item in String(__item) }))
      let __resultCpp = { () -> bridge.std__vector_std__string_ in
        var __vector = bridge.create_std__vector_std__string_(__result.count)
        for __item in __result {
          __vector.push_back(std.string(__item))
        }
        return __vector
      }()
      return bridge.create_Result_std__vector_std__string__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__vector_std__string__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func bounceNumbers(this: UnsafeRawPointer, array: bridge.std__vector_double_) -> bridge.Result_std__vector_double__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.bounceNumbers(array: array.map({ __item in __item }))
      let __resultCpp = { () -> bridge.std__vector_double_ in
        var __vector = bridge.create_std__vector_double_(__result.count)
        for __item in __result {
          __vector.push_back(__item)
        }
        return __vector
      }()
      return bridge.create_Result_std__vector_double__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__vector_double__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func bounceStructs(this: UnsafeRawPointer, array: bridge.std__vector_Person_) -> bridge.Result_std__vector_Person__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.bounceStructs(array: array.map({ __item in __item }))
      let __resultCpp = { () -> bridge.std__vector_Person_ in
        var __vector = bridge.create_std__vector_Person_(__result.count)
        for __item in __result {
          __vector.push_back(__item)
        }
        return __vector
      }()
      return bridge.create_Result_std__vector_Person__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__vector_Person__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func sumUpAllPassengers(this: UnsafeRawPointer, cars: bridge.std__vector_Car_) -> bridge.Result_std__string_ {
    do {
      let __instance = cast(this)
      let __result = try __instance.sumUpAllPassengers(cars: cars.map({ __item in __item }))
      let __resultCpp = std.string(__result)
      return bridge.create_Result_std__string_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__string_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func bounceEnums(this: UnsafeRawPointer, array: bridge.std__vector_Powertrain_) -> bridge.Result_std__vector_Powertrain__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.bounceEnums(array: array.map({ __item in __item }))
      let __resultCpp = { () -> bridge.std__vector_Powertrain_ in
        var __vector = bridge.create_std__vector_Powertrain_(__result.count)
        for __item in __result {
          __vector.push_back(__item)
        }
        return __vector
      }()
      return bridge.create_Result_std__vector_Powertrain__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__vector_Powertrain__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func complexEnumCallback(this: UnsafeRawPointer, array: bridge.std__vector_Powertrain_, callback: bridge.Func_void_std__vector_Powertrain_) -> bridge.Result_void_ {
    do {
      let __instance = cast(this)
      try __instance.complexEnumCallback(array: array.map({ __item in __item }), callback: { () -> ([Powertrain]) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_std__vector_Powertrain_(callback)
        return { (__array: [Powertrain]) -> Void in
          __wrappedFunction.call({ () -> bridge.std__vector_Powertrain_ in
            var __vector = bridge.create_std__vector_Powertrain_(__array.count)
            for __item in __array {
              __vector.push_back(__item)
            }
            return __vector
          }())
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func createMap(this: UnsafeRawPointer) -> bridge.Result_std__shared_ptr_AnyMap__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.createMap()
      let __resultCpp = __result.cppPart
      return bridge.create_Result_std__shared_ptr_AnyMap__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_AnyMap__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func mapRoundtrip(this: UnsafeRawPointer, map: margelo.nitro.SharedAnyMap) -> bridge.Result_std__shared_ptr_AnyMap__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.mapRoundtrip(map: AnyMap(withCppPart: map))
      let __resultCpp = __result.cppPart
      return bridge.create_Result_std__shared_ptr_AnyMap__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_AnyMap__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func getMapKeys(this: UnsafeRawPointer, map: margelo.nitro.SharedAnyMap) -> bridge.Result_std__vector_std__string__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.getMapKeys(map: AnyMap(withCppPart: map))
      let __resultCpp = { () -> bridge.std__vector_std__string_ in
        var __vector = bridge.create_std__vector_std__string_(__result.count)
        for __item in __result {
          __vector.push_back(std.string(__item))
        }
        return __vector
      }()
      return bridge.create_Result_std__vector_std__string__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__vector_std__string__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func bounceMap(this: UnsafeRawPointer, map: bridge.std__unordered_map_std__string__std__variant_bool__double__) -> bridge.Result_std__unordered_map_std__string__std__variant_bool__double___ {
    do {
      let __instance = cast(this)
      let __result = try __instance.bounceMap(map: { () -> Dictionary<String, Variant_Bool_Double> in
        var __dictionary = Dictionary<String, Variant_Bool_Double>(minimumCapacity: map.size())
        let __keys = bridge.get_std__unordered_map_std__string__std__variant_bool__double___keys(map)
        for __key in __keys {
          let __value = bridge.get_std__unordered_map_std__string__std__variant_bool__double___value(map, __key)
          __dictionary[String(__key)] = { () -> Variant_Bool_Double in
            let __variant = bridge.std__variant_bool__double_(__value)
            switch __variant.index() {
              case 0:
                let __actual = __variant.get_0()
                return .first(__actual)
              case 1:
                let __actual = __variant.get_1()
                return .second(__actual)
              default:
                fatalError("Variant can never have index \(__variant.index())!")
            }
          }()
        }
        return __dictionary
      }())
      let __resultCpp = { () -> bridge.std__unordered_map_std__string__std__variant_bool__double__ in
        var __map = bridge.create_std__unordered_map_std__string__std__variant_bool__double__(__result.count)
        for (__k, __v) in __result {
          bridge.emplace_std__unordered_map_std__string__std__variant_bool__double__(&__map, std.string(__k), { () -> bridge.std__variant_bool__double_ in
            switch __v {
              case .first(let __value):
                return bridge.create_std__variant_bool__double_(__value)
              case .second(let __value):
                return bridge.create_std__variant_bool__double_(__value)
            }
          }().variant)
        }
        return __map
      }()
      return bridge.create_Result_std__unordered_map_std__string__std__variant_bool__double___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__unordered_map_std__string__std__variant_bool__double___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func extractMap(this: UnsafeRawPointer, mapWrapper: MapWrapper) -> bridge.Result_std__unordered_map_std__string__std__string__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.extractMap(mapWrapper: mapWrapper)
      let __resultCpp = { () -> bridge.std__unordered_map_std__string__std__string_ in
        var __map = bridge.create_std__unordered_map_std__string__std__string_(__result.count)
        for (__k, __v) in __result {
          bridge.emplace_std__unordered_map_std__string__std__string_(&__map, std.string(__k), std.string(__v))
        }
        return __map
      }()
      return bridge.create_Result_std__unordered_map_std__string__std__string__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__unordered_map_std__string__std__string__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func funcThatThrows(this: UnsafeRawPointer) -> bridge.Result_double_ {
    do {
      let __instance = cast(this)
      let __result = try __instance.funcThatThrows()
      let __resultCpp = __result
      return bridge.create_Result_double_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_double_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func funcThatThrowsBeforePromise(this: UnsafeRawPointer) -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __instance = cast(this)
      let __result = try __instance.funcThatThrowsBeforePromise()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func throwError(this: UnsafeRawPointer, error: std.exception_ptr) -> bridge.Result_void_ {
    do {
      let __instance = cast(this)
      try __instance.throwError(error: RuntimeError.from(cppError: error))
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func tryOptionalParams(this: UnsafeRawPointer, num: Double, boo: Bool, str: bridge.std__optional_std__string_) -> bridge.Result_std__string_ {
    do {
      let __instance = cast(this)
      let __result = try __instance.tryOptionalParams(num: num, boo: boo, str: { () -> String? in
        if bridge.has_value_std__optional_std__string_(str) {
          let __unwrapped = bridge.get_std__optional_std__string_(str)
          return String(__unwrapped)
        } else {
          return nil
        }
      }())
      let __resultCpp = std.string(__result)
      return bridge.create_Result_std__string_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__string_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func tryMiddleParam(this: UnsafeRawPointer, num: Double, boo: bridge.std__optional_bool_, str: std.string) -> bridge.Result_std__string_ {
    do {
      let __instance = cast(this)
      let __result = try __instance.tryMiddleParam(num: num, boo: { () -> Bool? in
        if bridge.has_value_std__optional_bool_(boo) {
          let __unwrapped = bridge.get_std__optional_bool_(boo)
          return __unwrapped
        } else {
          return nil
        }
      }(), str: String(str))
      let __resultCpp = std.string(__result)
      return bridge.create_Result_std__string_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__string_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func tryOptionalEnum(this: UnsafeRawPointer, value: bridge.std__optional_Powertrain_) -> bridge.Result_std__optional_Powertrain__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.tryOptionalEnum(value: value.value)
      let __resultCpp = { () -> bridge.std__optional_Powertrain_ in
        if let __unwrappedValue = __result {
          return bridge.create_std__optional_Powertrain_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
      return bridge.create_Result_std__optional_Powertrain__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__optional_Powertrain__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func tryTrailingOptional(this: UnsafeRawPointer, num: Double, str: std.string, boo: bridge.std__optional_bool_) -> bridge.Result_bool_ {
    do {
      let __instance = cast(this)
      let __result = try __instance.tryTrailingOptional(num: num, str: String(str), boo: { () -> Bool? in
        if bridge.has_value_std__optional_bool_(boo) {
          let __unwrapped = bridge.get_std__optional_bool_(boo)
          return __unwrapped
        } else {
          return nil
        }
      }())
      let __resultCpp = __result
      return bridge.create_Result_bool_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_bool_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func add1Hour(this: UnsafeRawPointer, date: margelo.nitro.chrono_time) -> bridge.Result_std__chrono__system_clock__time_point_ {
    do {
      let __instance = cast(this)
      let __result = try __instance.add1Hour(date: Date(fromChrono: date))
      let __resultCpp = __result.toCpp()
      return bridge.create_Result_std__chrono__system_clock__time_point_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__chrono__system_clock__time_point_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func currentDate(this: UnsafeRawPointer) -> bridge.Result_std__chrono__system_clock__time_point_ {
    do {
      let __instance = cast(this)
      let __result = try __instance.currentDate()
      let __resultCpp = __result.toCpp()
      return bridge.create_Result_std__chrono__system_clock__time_point_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__chrono__system_clock__time_point_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func calculateFibonacciSync(this: UnsafeRawPointer, value: Double) -> bridge.Result_int64_t_ {
    do {
      let __instance = cast(this)
      let __result = try __instance.calculateFibonacciSync(value: value)
      let __resultCpp = __result
      return bridge.create_Result_int64_t_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_int64_t_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func calculateFibonacciAsync(this: UnsafeRawPointer, value: Double) -> bridge.Result_std__shared_ptr_Promise_int64_t___ {
    do {
      let __instance = cast(this)
      let __result = try __instance.calculateFibonacciAsync(value: value)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_int64_t__ in
        let __promise = bridge.create_std__shared_ptr_Promise_int64_t__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_int64_t__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_int64_t___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_int64_t___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func wait(this: UnsafeRawPointer, seconds: Double) -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __instance = cast(this)
      let __result = try __instance.wait(seconds: seconds)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func promiseThrows(this: UnsafeRawPointer) -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __instance = cast(this)
      let __result = try __instance.promiseThrows()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func promiseReturnsInstantly(this: UnsafeRawPointer) -> bridge.Result_std__shared_ptr_Promise_double___ {
    do {
      let __instance = cast(this)
      let __result = try __instance.promiseReturnsInstantly()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_double__ in
        let __promise = bridge.create_std__shared_ptr_Promise_double__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_double__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_double___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_double___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func promiseReturnsInstantlyAsync(this: UnsafeRawPointer) -> bridge.Result_std__shared_ptr_Promise_double___ {
    do {
      let __instance = cast(this)
      let __result = try __instance.promiseReturnsInstantlyAsync()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_double__ in
        let __promise = bridge.create_std__shared_ptr_Promise_double__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_double__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_double___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_double___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func awaitAndGetPromise(this: UnsafeRawPointer, promise: bridge.std__shared_ptr_Promise_double__) -> bridge.Result_std__shared_ptr_Promise_double___ {
    do {
      let __instance = cast(this)
      let __result = try __instance.awaitAndGetPromise(promise: { () -> Promise<Double> in
        let __promise = Promise<Double>()
        let __resolver = { (__result: Double) in
          __promise.resolve(withResult: __result)
        }
        let __rejecter = { (__error: Error) in
          __promise.reject(withError: __error)
        }
        let __resolverCpp = { () -> bridge.Func_void_double in
          let __closureWrapper = Func_void_double(__resolver)
          return bridge.create_Func_void_double(__closureWrapper.toUnsafe())
        }()
        let __rejecterCpp = { () -> bridge.Func_void_std__exception_ptr in
          let __closureWrapper = Func_void_std__exception_ptr(__rejecter)
          return bridge.create_Func_void_std__exception_ptr(__closureWrapper.toUnsafe())
        }()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_double__(promise)
        __promiseHolder.addOnResolvedListenerCopy(__resolverCpp)
        __promiseHolder.addOnRejectedListener(__rejecterCpp)
        return __promise
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_double__ in
        let __promise = bridge.create_std__shared_ptr_Promise_double__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_double__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_double___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_double___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func awaitAndGetComplexPromise(this: UnsafeRawPointer, promise: bridge.std__shared_ptr_Promise_Car__) -> bridge.Result_std__shared_ptr_Promise_Car___ {
    do {
      let __instance = cast(this)
      let __result = try __instance.awaitAndGetComplexPromise(promise: { () -> Promise<Car> in
        let __promise = Promise<Car>()
        let __resolver = { (__result: Car) in
          __promise.resolve(withResult: __result)
        }
        let __rejecter = { (__error: Error) in
          __promise.reject(withError: __error)
        }
        let __resolverCpp = { () -> bridge.Func_void_Car in
          let __closureWrapper = Func_void_Car(__resolver)
          return bridge.create_Func_void_Car(__closureWrapper.toUnsafe())
        }()
        let __rejecterCpp = { () -> bridge.Func_void_std__exception_ptr in
          let __closureWrapper = Func_void_std__exception_ptr(__rejecter)
          return bridge.create_Func_void_std__exception_ptr(__closureWrapper.toUnsafe())
        }()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_Car__(promise)
        __promiseHolder.addOnResolvedListener(__resolverCpp)
        __promiseHolder.addOnRejectedListener(__rejecterCpp)
        return __promise
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_Car__ in
        let __promise = bridge.create_std__shared_ptr_Promise_Car__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_Car__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_Car___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_Car___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func awaitPromise(this: UnsafeRawPointer, promise: bridge.std__shared_ptr_Promise_void__) -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __instance = cast(this)
      let __result = try __instance.awaitPromise(promise: { () -> Promise<Void> in
        let __promise = Promise<Void>()
        let __resolver = { __promise.resolve(withResult: ()) }
        let __rejecter = { (__error: Error) in
          __promise.reject(withError: __error)
        }
        let __resolverCpp = { () -> bridge.Func_void in
          let __closureWrapper = Func_void(__resolver)
          return bridge.create_Func_void(__closureWrapper.toUnsafe())
        }()
        let __rejecterCpp = { () -> bridge.Func_void_std__exception_ptr in
          let __closureWrapper = Func_void_std__exception_ptr(__rejecter)
          return bridge.create_Func_void_std__exception_ptr(__closureWrapper.toUnsafe())
        }()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(promise)
        __promiseHolder.addOnResolvedListener(__resolverCpp)
        __promiseHolder.addOnRejectedListener(__rejecterCpp)
        return __promise
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func callCallback(this: UnsafeRawPointer, callback: bridge.Func_void) -> bridge.Result_void_ {
    do {
      let __instance = cast(this)
      try __instance.callCallback(callback: { () -> () -> Void in
        let __wrappedFunction = bridge.wrap_Func_void(callback)
        return { () -> Void in
          __wrappedFunction.call()
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func callAll(this: UnsafeRawPointer, first: bridge.Func_void, second: bridge.Func_void, third: bridge.Func_void) -> bridge.Result_void_ {
    do {
      let __instance = cast(this)
      try __instance.callAll(first: { () -> () -> Void in
        let __wrappedFunction = bridge.wrap_Func_void(first)
        return { () -> Void in
          __wrappedFunction.call()
        }
      }(), second: { () -> () -> Void in
        let __wrappedFunction = bridge.wrap_Func_void(second)
        return { () -> Void in
          __wrappedFunction.call()
        }
      }(), third: { () -> () -> Void in
        let __wrappedFunction = bridge.wrap_Func_void(third)
        return { () -> Void in
          __wrappedFunction.call()
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func callWithOptional(this: UnsafeRawPointer, value: bridge.std__optional_double_, callback: bridge.Func_void_std__optional_double_) -> bridge.Result_void_ {
    do {
      let __instance = cast(this)
      try __instance.callWithOptional(value: value.value, callback: { () -> (Double?) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_std__optional_double_(callback)
        return { (__maybe: Double?) -> Void in
          __wrappedFunction.call({ () -> bridge.std__optional_double_ in
            if let __unwrappedValue = __maybe {
              return bridge.create_std__optional_double_(__unwrappedValue)
            } else {
              return .init()
            }
          }())
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func callSumUpNTimes(this: UnsafeRawPointer, callback: bridge.Func_std__shared_ptr_Promise_double__, n: Double) -> bridge.Result_std__shared_ptr_Promise_double___ {
    do {
      let __instance = cast(this)
      let __result = try __instance.callSumUpNTimes(callback: { () -> () -> Promise<Double> in
        let __wrappedFunction = bridge.wrap_Func_std__shared_ptr_Promise_double__(callback)
        return { () -> Promise<Double> in
          let __result = __wrappedFunction.call()
          return { () -> Promise<Double> in
            let __promise = Promise<Double>()
            let __resolver = { (__result: Double) in
              __promise.resolve(withResult: __result)
            }
            let __rejecter = { (__error: Error) in
              __promise.reject(withError: __error)
            }
            let __resolverCpp = { () -> bridge.Func_void_double in
              let __closureWrapper = Func_void_double(__resolver)
              return bridge.create_Func_void_double(__closureWrapper.toUnsafe())
            }()
            let __rejecterCpp = { () -> bridge.Func_void_std__exception_ptr in
              let __closureWrapper = Func_void_std__exception_ptr(__rejecter)
              return bridge.create_Func_void_std__exception_ptr(__closureWrapper.toUnsafe())
            }()
            let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_double__(__result)
            __promiseHolder.addOnResolvedListenerCopy(__resolverCpp)
            __promiseHolder.addOnRejectedListener(__rejecterCpp)
            return __promise
          }()
        }
      }(), n: n)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_double__ in
        let __promise = bridge.create_std__shared_ptr_Promise_double__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_double__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_double___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_double___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func callbackAsyncPromise(this: UnsafeRawPointer, callback: bridge.Func_std__shared_ptr_Promise_std__shared_ptr_Promise_double____) -> bridge.Result_std__shared_ptr_Promise_double___ {
    do {
      let __instance = cast(this)
      let __result = try __instance.callbackAsyncPromise(callback: { () -> () -> Promise<Promise<Double>> in
        let __wrappedFunction = bridge.wrap_Func_std__shared_ptr_Promise_std__shared_ptr_Promise_double____(callback)
        return { () -> Promise<Promise<Double>> in
          let __result = __wrappedFunction.call()
          return { () -> Promise<Promise<Double>> in
            let __promise = Promise<Promise<Double>>()
            let __resolver = { (__result: Promise<Double>) in
              __promise.resolve(withResult: __result)
            }
            let __rejecter = { (__error: Error) in
              __promise.reject(withError: __error)
            }
            let __resolverCpp = { () -> bridge.Func_void_std__shared_ptr_Promise_double__ in
              let __closureWrapper = Func_void_std__shared_ptr_Promise_double__(__resolver)
              return bridge.create_Func_void_std__shared_ptr_Promise_double__(__closureWrapper.toUnsafe())
            }()
            let __rejecterCpp = { () -> bridge.Func_void_std__exception_ptr in
              let __closureWrapper = Func_void_std__exception_ptr(__rejecter)
              return bridge.create_Func_void_std__exception_ptr(__closureWrapper.toUnsafe())
            }()
            let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__shared_ptr_Promise_double____(__result)
            __promiseHolder.addOnResolvedListener(__resolverCpp)
            __promiseHolder.addOnRejectedListener(__rejecterCpp)
            return __promise
          }()
        }
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_double__ in
        let __promise = bridge.create_std__shared_ptr_Promise_double__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_double__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_double___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_double___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func callbackAsyncPromiseBuffer(this: UnsafeRawPointer, callback: bridge.Func_std__shared_ptr_Promise_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer_____) -> bridge.Result_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer____ {
    do {
      let __instance = cast(this)
      let __result = try __instance.callbackAsyncPromiseBuffer(callback: { () -> () -> Promise<Promise<ArrayBuffer>> in
        let __wrappedFunction = bridge.wrap_Func_std__shared_ptr_Promise_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer_____(callback)
        return { () -> Promise<Promise<ArrayBuffer>> in
          let __result = __wrappedFunction.call()
          return { () -> Promise<Promise<ArrayBuffer>> in
            let __promise = Promise<Promise<ArrayBuffer>>()
            let __resolver = { (__result: Promise<ArrayBuffer>) in
              __promise.resolve(withResult: __result)
            }
            let __rejecter = { (__error: Error) in
              __promise.reject(withError: __error)
            }
            let __resolverCpp = { () -> bridge.Func_void_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___ in
              let __closureWrapper = Func_void_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___(__resolver)
              return bridge.create_Func_void_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___(__closureWrapper.toUnsafe())
            }()
            let __rejecterCpp = { () -> bridge.Func_void_std__exception_ptr in
              let __closureWrapper = Func_void_std__exception_ptr(__rejecter)
              return bridge.create_Func_void_std__exception_ptr(__closureWrapper.toUnsafe())
            }()
            let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer_____(__result)
            __promiseHolder.addOnResolvedListener(__resolverCpp)
            __promiseHolder.addOnRejectedListener(__rejecterCpp)
            return __promise
          }()
        }
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result.getArrayBuffer()) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func getComplexCallback(this: UnsafeRawPointer) -> bridge.Result_std__function_void_double____value______ {
    do {
      let __instance = cast(this)
      let __result = try __instance.getComplexCallback()
      let __resultCpp = { () -> bridge.Func_void_double in
        let __closureWrapper = Func_void_double(__result)
        return bridge.create_Func_void_double(__closureWrapper.toUnsafe())
      }()
      return bridge.create_Result_std__function_void_double____value______(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__function_void_double____value______(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func twoOptionalCallbacks(this: UnsafeRawPointer, value: Double, first: bridge.std__optional_std__function_void_double____value______, second: bridge.std__optional_std__function_void_const_std__string_____value______) -> bridge.Result_void_ {
    do {
      let __instance = cast(this)
      try __instance.twoOptionalCallbacks(value: value, first: { () -> ((_ value: Double) -> Void)? in
        if bridge.has_value_std__optional_std__function_void_double____value______(first) {
          let __unwrapped = bridge.get_std__optional_std__function_void_double____value______(first)
          return { () -> (Double) -> Void in
            let __wrappedFunction = bridge.wrap_Func_void_double(__unwrapped)
            return { (__value: Double) -> Void in
              __wrappedFunction.call(__value)
            }
          }()
        } else {
          return nil
        }
      }(), second: { () -> ((_ value: String) -> Void)? in
        if bridge.has_value_std__optional_std__function_void_const_std__string_____value______(second) {
          let __unwrapped = bridge.get_std__optional_std__function_void_const_std__string_____value______(second)
          return { () -> (String) -> Void in
            let __wrappedFunction = bridge.wrap_Func_void_std__string(__unwrapped)
            return { (__value: String) -> Void in
              __wrappedFunction.call(std.string(__value))
            }
          }()
        } else {
          return nil
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func getValueFromJSCallbackAndWait(this: UnsafeRawPointer, getValue: bridge.Func_std__shared_ptr_Promise_double__) -> bridge.Result_std__shared_ptr_Promise_double___ {
    do {
      let __instance = cast(this)
      let __result = try __instance.getValueFromJSCallbackAndWait(getValue: { () -> () -> Promise<Double> in
        let __wrappedFunction = bridge.wrap_Func_std__shared_ptr_Promise_double__(getValue)
        return { () -> Promise<Double> in
          let __result = __wrappedFunction.call()
          return { () -> Promise<Double> in
            let __promise = Promise<Double>()
            let __resolver = { (__result: Double) in
              __promise.resolve(withResult: __result)
            }
            let __rejecter = { (__error: Error) in
              __promise.reject(withError: __error)
            }
            let __resolverCpp = { () -> bridge.Func_void_double in
              let __closureWrapper = Func_void_double(__resolver)
              return bridge.create_Func_void_double(__closureWrapper.toUnsafe())
            }()
            let __rejecterCpp = { () -> bridge.Func_void_std__exception_ptr in
              let __closureWrapper = Func_void_std__exception_ptr(__rejecter)
              return bridge.create_Func_void_std__exception_ptr(__closureWrapper.toUnsafe())
            }()
            let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_double__(__result)
            __promiseHolder.addOnResolvedListenerCopy(__resolverCpp)
            __promiseHolder.addOnRejectedListener(__rejecterCpp)
            return __promise
          }()
        }
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_double__ in
        let __promise = bridge.create_std__shared_ptr_Promise_double__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_double__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_double___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_double___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func getValueFromJsCallback(this: UnsafeRawPointer, callback: bridge.Func_std__shared_ptr_Promise_std__string__, andThenCall: bridge.Func_void_std__string) -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __instance = cast(this)
      let __result = try __instance.getValueFromJsCallback(callback: { () -> () -> Promise<String> in
        let __wrappedFunction = bridge.wrap_Func_std__shared_ptr_Promise_std__string__(callback)
        return { () -> Promise<String> in
          let __result = __wrappedFunction.call()
          return { () -> Promise<String> in
            let __promise = Promise<String>()
            let __resolver = { (__result: String) in
              __promise.resolve(withResult: __result)
            }
            let __rejecter = { (__error: Error) in
              __promise.reject(withError: __error)
            }
            let __resolverCpp = { () -> bridge.Func_void_std__string in
              let __closureWrapper = Func_void_std__string(__resolver)
              return bridge.create_Func_void_std__string(__closureWrapper.toUnsafe())
            }()
            let __rejecterCpp = { () -> bridge.Func_void_std__exception_ptr in
              let __closureWrapper = Func_void_std__exception_ptr(__rejecter)
              return bridge.create_Func_void_std__exception_ptr(__closureWrapper.toUnsafe())
            }()
            let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__string__(__result)
            __promiseHolder.addOnResolvedListener(__resolverCpp)
            __promiseHolder.addOnRejectedListener(__rejecterCpp)
            return __promise
          }()
        }
      }(), andThenCall: { () -> (String) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_std__string(andThenCall)
        return { (__valueFromJs: String) -> Void in
          __wrappedFunction.call(std.string(__valueFromJs))
        }
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func getCar(this: UnsafeRawPointer) -> bridge.Result_Car_ {
    do {
      let __instance = cast(this)
      let __result = try __instance.getCar()
      let __resultCpp = __result
      return bridge.create_Result_Car_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_Car_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func isCarElectric(this: UnsafeRawPointer, car: Car) -> bridge.Result_bool_ {
    do {
      let __instance = cast(this)
      let __result = try __instance.isCarElectric(car: car)
      let __resultCpp = __result
      return bridge.create_Result_bool_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_bool_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func getDriver(this: UnsafeRawPointer, car: Car) -> bridge.Result_std__optional_Person__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.getDriver(car: car)
      let __resultCpp = { () -> bridge.std__optional_Person_ in
        if let __unwrappedValue = __result {
          return bridge.create_std__optional_Person_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
      return bridge.create_Result_std__optional_Person__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__optional_Person__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func bounceCar(this: UnsafeRawPointer, car: Car) -> bridge.Result_Car_ {
    do {
      let __instance = cast(this)
      let __result = try __instance.bounceCar(car: car)
      let __resultCpp = __result
      return bridge.create_Result_Car_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_Car_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func jsStyleObjectAsParameters(this: UnsafeRawPointer, params: JsStyleStruct) -> bridge.Result_void_ {
    do {
      let __instance = cast(this)
      try __instance.jsStyleObjectAsParameters(params: params)
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func bounceWrappedJsStyleStruct(this: UnsafeRawPointer, value: WrappedJsStruct) -> bridge.Result_WrappedJsStruct_ {
    do {
      let __instance = cast(this)
      let __result = try __instance.bounceWrappedJsStyleStruct(value: value)
      let __resultCpp = __result
      return bridge.create_Result_WrappedJsStruct_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_WrappedJsStruct_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func bounceOptionalWrapper(this: UnsafeRawPointer, wrapper: OptionalWrapper) -> bridge.Result_OptionalWrapper_ {
    do {
      let __instance = cast(this)
      let __result = try __instance.bounceOptionalWrapper(wrapper: wrapper)
      let __resultCpp = __result
      return bridge.create_Result_OptionalWrapper_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_OptionalWrapper_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func bounceOptionalCallback(this: UnsafeRawPointer, value: OptionalCallback) -> bridge.Result_OptionalCallback_ {
    do {
      let __instance = cast(this)
      let __result = try __instance.bounceOptionalCallback(value: value)
      let __resultCpp = __result
      return bridge.create_Result_OptionalCallback_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_OptionalCallback_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func createArrayBuffer(this: UnsafeRawPointer) -> bridge.Result_std__shared_ptr_ArrayBuffer__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.createArrayBuffer()
      let __resultCpp = __result.getArrayBuffer()
      return bridge.create_Result_std__shared_ptr_ArrayBuffer__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_ArrayBuffer__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func createArrayBufferFromNativeBuffer(this: UnsafeRawPointer, copy: Bool) -> bridge.Result_std__shared_ptr_ArrayBuffer__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.createArrayBufferFromNativeBuffer(copy: copy)
      let __resultCpp = __result.getArrayBuffer()
      return bridge.create_Result_std__shared_ptr_ArrayBuffer__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_ArrayBuffer__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func copyBuffer(this: UnsafeRawPointer, buffer: ArrayBuffer) -> bridge.Result_std__shared_ptr_ArrayBuffer__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.copyBuffer(buffer: buffer)
      let __resultCpp = __result.getArrayBuffer()
      return bridge.create_Result_std__shared_ptr_ArrayBuffer__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_ArrayBuffer__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func getBufferLastItem(this: UnsafeRawPointer, buffer: ArrayBuffer) -> bridge.Result_double_ {
    do {
      let __instance = cast(this)
      let __result = try __instance.getBufferLastItem(buffer: buffer)
      let __resultCpp = __result
      return bridge.create_Result_double_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_double_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func setAllValuesTo(this: UnsafeRawPointer, buffer: ArrayBuffer, value: Double) -> bridge.Result_void_ {
    do {
      let __instance = cast(this)
      try __instance.setAllValuesTo(buffer: buffer, value: value)
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func createArrayBufferAsync(this: UnsafeRawPointer) -> bridge.Result_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer____ {
    do {
      let __instance = cast(this)
      let __result = try __instance.createArrayBufferAsync()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result.getArrayBuffer()) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func bounceArrayBuffer(this: UnsafeRawPointer, buffer: ArrayBuffer) -> bridge.Result_std__shared_ptr_ArrayBuffer__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.bounceArrayBuffer(buffer: buffer)
      let __resultCpp = __result.getArrayBuffer()
      return bridge.create_Result_std__shared_ptr_ArrayBuffer__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_ArrayBuffer__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func passVariant(this: UnsafeRawPointer, either: bridge.std__variant_bool__std__vector_double___std__vector_std__string___std__string__double_) -> bridge.Result_std__variant_std__string__double__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.passVariant(either: { () -> Variant_Bool__Double___String__String_Double in
        let __variant = either
        switch __variant.index() {
          case 0:
            let __actual = __variant.get_0()
            return .first(__actual)
          case 1:
            let __actual = __variant.get_1()
            return .second(__actual.map({ __item in __item }))
          case 2:
            let __actual = __variant.get_2()
            return .third(__actual.map({ __item in String(__item) }))
          case 3:
            let __actual = __variant.get_3()
            return .fourth(String(__actual))
          case 4:
            let __actual = __variant.get_4()
            return .fifth(__actual)
          default:
            fatalError("Variant can never have index \(__variant.index())!")
        }
      }())
      let __resultCpp = { () -> bridge.std__variant_std__string__double_ in
        switch __result {
          case .first(let __value):
            return bridge.create_std__variant_std__string__double_(std.string(__value))
          case .second(let __value):
            return bridge.create_std__variant_std__string__double_(__value)
        }
      }().variant
      return bridge.create_Result_std__variant_std__string__double__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__variant_std__string__double__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func getVariantEnum(this: UnsafeRawPointer, variant: bridge.std__variant_bool__OldEnum_) -> bridge.Result_std__variant_bool__OldEnum__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.getVariantEnum(variant: { () -> Variant_Bool_OldEnum in
        let __variant = variant
        switch __variant.index() {
          case 0:
            let __actual = __variant.get_0()
            return .first(__actual)
          case 1:
            let __actual = __variant.get_1()
            return .second(__actual)
          default:
            fatalError("Variant can never have index \(__variant.index())!")
        }
      }())
      let __resultCpp = { () -> bridge.std__variant_bool__OldEnum_ in
        switch __result {
          case .first(let __value):
            return bridge.create_std__variant_bool__OldEnum_(__value)
          case .second(let __value):
            return bridge.create_std__variant_bool__OldEnum_(__value)
        }
      }().variant
      return bridge.create_Result_std__variant_bool__OldEnum__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__variant_bool__OldEnum__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func getVariantWeirdNumbersEnum(this: UnsafeRawPointer, variant: bridge.std__variant_bool__WeirdNumbersEnum_) -> bridge.Result_std__variant_bool__WeirdNumbersEnum__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.getVariantWeirdNumbersEnum(variant: { () -> Variant_Bool_WeirdNumbersEnum in
        let __variant = variant
        switch __variant.index() {
          case 0:
            let __actual = __variant.get_0()
            return .first(__actual)
          case 1:
            let __actual = __variant.get_1()
            return .second(__actual)
          default:
            fatalError("Variant can never have index \(__variant.index())!")
        }
      }())
      let __resultCpp = { () -> bridge.std__variant_bool__WeirdNumbersEnum_ in
        switch __result {
          case .first(let __value):
            return bridge.create_std__variant_bool__WeirdNumbersEnum_(__value)
          case .second(let __value):
            return bridge.create_std__variant_bool__WeirdNumbersEnum_(__value)
        }
      }().variant
      return bridge.create_Result_std__variant_bool__WeirdNumbersEnum__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__variant_bool__WeirdNumbersEnum__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func getVariantObjects(this: UnsafeRawPointer, variant: bridge.std__variant_Car__Person_) -> bridge.Result_std__variant_Car__Person__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.getVariantObjects(variant: { () -> Variant_Car_Person in
        let __variant = variant
        switch __variant.index() {
          case 0:
            let __actual = __variant.get_0()
            return .first(__actual)
          case 1:
            let __actual = __variant.get_1()
            return .second(__actual)
          default:
            fatalError("Variant can never have index \(__variant.index())!")
        }
      }())
      let __resultCpp = { () -> bridge.std__variant_Car__Person_ in
        switch __result {
          case .first(let __value):
            return bridge.create_std__variant_Car__Person_(__value)
          case .second(let __value):
            return bridge.create_std__variant_Car__Person_(__value)
        }
      }().variant
      return bridge.create_Result_std__variant_Car__Person__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__variant_Car__Person__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func passNamedVariant(this: UnsafeRawPointer, variant: bridge.std__variant_std__string__Car_) -> bridge.Result_std__variant_std__string__Car__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.passNamedVariant(variant: { () -> NamedVariant in
        let __variant = variant
        switch __variant.index() {
          case 0:
            let __actual = __variant.get_0()
            return .first(String(__actual))
          case 1:
            let __actual = __variant.get_1()
            return .second(__actual)
          default:
            fatalError("Variant can never have index \(__variant.index())!")
        }
      }())
      let __resultCpp = { () -> bridge.std__variant_std__string__Car_ in
        switch __result {
          case .first(let __value):
            return bridge.create_std__variant_std__string__Car_(std.string(__value))
          case .second(let __value):
            return bridge.create_std__variant_std__string__Car_(__value)
        }
      }().variant
      return bridge.create_Result_std__variant_std__string__Car__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__variant_std__string__Car__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func passAllEmptyObjectVariant(this: UnsafeRawPointer, variant: bridge.std__variant_std__shared_ptr_HybridBaseSpec___OptionalWrapper_) -> bridge.Result_std__variant_std__shared_ptr_HybridBaseSpec___OptionalWrapper__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.passAllEmptyObjectVariant(variant: { () -> Variant__any_HybridBaseSpec__OptionalWrapper in
        let __variant = variant
        switch __variant.index() {
          case 0:
            let __actual = __variant.get_0()
            return .first({ () -> HybridBaseSpec in
              let __unsafePointer = bridge.get_std__shared_ptr_HybridBaseSpec_(__actual)
              return MemoryHelper.castUnsafe(__unsafePointer)
            }())
          case 1:
            let __actual = __variant.get_1()
            return .second(__actual)
          default:
            fatalError("Variant can never have index \(__variant.index())!")
        }
      }())
      let __resultCpp = { () -> bridge.std__variant_std__shared_ptr_HybridBaseSpec___OptionalWrapper_ in
        switch __result {
          case .first(let __value):
            return bridge.create_std__variant_std__shared_ptr_HybridBaseSpec___OptionalWrapper_({ () -> bridge.std__shared_ptr_HybridBaseSpec_ in
              return __value.getCxxPart()
            }())
          case .second(let __value):
            return bridge.create_std__variant_std__shared_ptr_HybridBaseSpec___OptionalWrapper_(__value)
        }
      }().variant
      return bridge.create_Result_std__variant_std__shared_ptr_HybridBaseSpec___OptionalWrapper__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__variant_std__shared_ptr_HybridBaseSpec___OptionalWrapper__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func bounceComplexVariant(this: UnsafeRawPointer, variant: bridge.std__variant_std__shared_ptr_ArrayBuffer___std__function_void_double____value_______WrappedJsStruct__std__chrono__system_clock__time_point__std__shared_ptr_Promise_double____std__shared_ptr_AnyMap__) -> bridge.Result_std__variant_std__shared_ptr_ArrayBuffer___std__function_void_double____value_______WrappedJsStruct__std__chrono__system_clock__time_point__std__shared_ptr_Promise_double____std__shared_ptr_AnyMap___ {
    do {
      let __instance = cast(this)
      let __result = try __instance.bounceComplexVariant(variant: { () -> CoreTypesVariant in
        let __variant = variant
        switch __variant.index() {
          case 0:
            let __actual = __variant.get_0()
            return .first(ArrayBuffer(__actual))
          case 1:
            let __actual = __variant.get_1()
            return .second({ () -> (Double) -> Void in
              let __wrappedFunction = bridge.wrap_Func_void_double(__actual)
              return { (__value: Double) -> Void in
                __wrappedFunction.call(__value)
              }
            }())
          case 2:
            let __actual = __variant.get_2()
            return .third(__actual)
          case 3:
            let __actual = __variant.get_3()
            return .fourth(Date(fromChrono: __actual))
          case 4:
            let __actual = __variant.get_4()
            return .fifth({ () -> Promise<Double> in
              let __promise = Promise<Double>()
              let __resolver = { (__result: Double) in
                __promise.resolve(withResult: __result)
              }
              let __rejecter = { (__error: Error) in
                __promise.reject(withError: __error)
              }
              let __resolverCpp = { () -> bridge.Func_void_double in
                let __closureWrapper = Func_void_double(__resolver)
                return bridge.create_Func_void_double(__closureWrapper.toUnsafe())
              }()
              let __rejecterCpp = { () -> bridge.Func_void_std__exception_ptr in
                let __closureWrapper = Func_void_std__exception_ptr(__rejecter)
                return bridge.create_Func_void_std__exception_ptr(__closureWrapper.toUnsafe())
              }()
              let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_double__(__actual)
              __promiseHolder.addOnResolvedListenerCopy(__resolverCpp)
              __promiseHolder.addOnRejectedListener(__rejecterCpp)
              return __promise
            }())
          case 5:
            let __actual = __variant.get_5()
            return .sixth(AnyMap(withCppPart: __actual))
          default:
            fatalError("Variant can never have index \(__variant.index())!")
        }
      }())
      let __resultCpp = { () -> bridge.std__variant_std__shared_ptr_ArrayBuffer___std__function_void_double____value_______WrappedJsStruct__std__chrono__system_clock__time_point__std__shared_ptr_Promise_double____std__shared_ptr_AnyMap__ in
        switch __result {
          case .first(let __value):
            return bridge.create_std__variant_std__shared_ptr_ArrayBuffer___std__function_void_double____value_______WrappedJsStruct__std__chrono__system_clock__time_point__std__shared_ptr_Promise_double____std__shared_ptr_AnyMap__(__value.getArrayBuffer())
          case .second(let __value):
            return bridge.create_std__variant_std__shared_ptr_ArrayBuffer___std__function_void_double____value_______WrappedJsStruct__std__chrono__system_clock__time_point__std__shared_ptr_Promise_double____std__shared_ptr_AnyMap__({ () -> bridge.Func_void_double in
              let __closureWrapper = Func_void_double(__value)
              return bridge.create_Func_void_double(__closureWrapper.toUnsafe())
            }())
          case .third(let __value):
            return bridge.create_std__variant_std__shared_ptr_ArrayBuffer___std__function_void_double____value_______WrappedJsStruct__std__chrono__system_clock__time_point__std__shared_ptr_Promise_double____std__shared_ptr_AnyMap__(__value)
          case .fourth(let __value):
            return bridge.create_std__variant_std__shared_ptr_ArrayBuffer___std__function_void_double____value_______WrappedJsStruct__std__chrono__system_clock__time_point__std__shared_ptr_Promise_double____std__shared_ptr_AnyMap__(__value.toCpp())
          case .fifth(let __value):
            return bridge.create_std__variant_std__shared_ptr_ArrayBuffer___std__function_void_double____value_______WrappedJsStruct__std__chrono__system_clock__time_point__std__shared_ptr_Promise_double____std__shared_ptr_AnyMap__({ () -> bridge.std__shared_ptr_Promise_double__ in
              let __promise = bridge.create_std__shared_ptr_Promise_double__()
              let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_double__(__promise)
              __value
                .then({ __result in __promiseHolder.resolve(__result) })
                .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
              return __promise
            }())
          case .sixth(let __value):
            return bridge.create_std__variant_std__shared_ptr_ArrayBuffer___std__function_void_double____value_______WrappedJsStruct__std__chrono__system_clock__time_point__std__shared_ptr_Promise_double____std__shared_ptr_AnyMap__(__value.cppPart)
        }
      }().variant
      return bridge.create_Result_std__variant_std__shared_ptr_ArrayBuffer___std__function_void_double____value_______WrappedJsStruct__std__chrono__system_clock__time_point__std__shared_ptr_Promise_double____std__shared_ptr_AnyMap___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__variant_std__shared_ptr_ArrayBuffer___std__function_void_double____value_______WrappedJsStruct__std__chrono__system_clock__time_point__std__shared_ptr_Promise_double____std__shared_ptr_AnyMap___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func createChild(this: UnsafeRawPointer) -> bridge.Result_std__shared_ptr_HybridChildSpec__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.createChild()
      let __resultCpp = { () -> bridge.std__shared_ptr_HybridChildSpec_ in
        return __result.getCxxPart()
      }()
      return bridge.create_Result_std__shared_ptr_HybridChildSpec__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_HybridChildSpec__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func createBase(this: UnsafeRawPointer) -> bridge.Result_std__shared_ptr_HybridBaseSpec__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.createBase()
      let __resultCpp = { () -> bridge.std__shared_ptr_HybridBaseSpec_ in
        return __result.getCxxPart()
      }()
      return bridge.create_Result_std__shared_ptr_HybridBaseSpec__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_HybridBaseSpec__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func createBaseActualChild(this: UnsafeRawPointer) -> bridge.Result_std__shared_ptr_HybridBaseSpec__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.createBaseActualChild()
      let __resultCpp = { () -> bridge.std__shared_ptr_HybridBaseSpec_ in
        return __result.getCxxPart()
      }()
      return bridge.create_Result_std__shared_ptr_HybridBaseSpec__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_HybridBaseSpec__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func bounceChild(this: UnsafeRawPointer, child: bridge.std__shared_ptr_HybridChildSpec_) -> bridge.Result_std__shared_ptr_HybridChildSpec__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.bounceChild(child: { () -> HybridChildSpec in
        let __unsafePointer = bridge.get_std__shared_ptr_HybridChildSpec_(child)
        return MemoryHelper.castUnsafe(__unsafePointer)
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_HybridChildSpec_ in
        return __result.getCxxPart()
      }()
      return bridge.create_Result_std__shared_ptr_HybridChildSpec__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_HybridChildSpec__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func bounceBase(this: UnsafeRawPointer, base: bridge.std__shared_ptr_HybridBaseSpec_) -> bridge.Result_std__shared_ptr_HybridBaseSpec__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.bounceBase(base: { () -> HybridBaseSpec in
        let __unsafePointer = bridge.get_std__shared_ptr_HybridBaseSpec_(base)
        return MemoryHelper.castUnsafe(__unsafePointer)
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_HybridBaseSpec_ in
        return __result.getCxxPart()
      }()
      return bridge.create_Result_std__shared_ptr_HybridBaseSpec__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_HybridBaseSpec__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func bounceChildBase(this: UnsafeRawPointer, child: bridge.std__shared_ptr_HybridChildSpec_) -> bridge.Result_std__shared_ptr_HybridBaseSpec__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.bounceChildBase(child: { () -> HybridChildSpec in
        let __unsafePointer = bridge.get_std__shared_ptr_HybridChildSpec_(child)
        return MemoryHelper.castUnsafe(__unsafePointer)
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_HybridBaseSpec_ in
        return __result.getCxxPart()
      }()
      return bridge.create_Result_std__shared_ptr_HybridBaseSpec__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_HybridBaseSpec__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func castBase(this: UnsafeRawPointer, base: bridge.std__shared_ptr_HybridBaseSpec_) -> bridge.Result_std__shared_ptr_HybridChildSpec__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.castBase(base: { () -> HybridBaseSpec in
        let __unsafePointer = bridge.get_std__shared_ptr_HybridBaseSpec_(base)
        return MemoryHelper.castUnsafe(__unsafePointer)
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_HybridChildSpec_ in
        return __result.getCxxPart()
      }()
      return bridge.create_Result_std__shared_ptr_HybridChildSpec__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_HybridChildSpec__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func callbackSync(this: UnsafeRawPointer, callback: bridge.Func_double) -> bridge.Result_double_ {
    do {
      let __instance = cast(this)
      let __result = try __instance.callbackSync(callback: { () -> () -> Double in
        let __wrappedFunction = bridge.wrap_Func_double(callback)
        return { () -> Double in
          let __result = __wrappedFunction.call()
          return __result
        }
      }())
      let __resultCpp = __result
      return bridge.create_Result_double_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_double_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func getIsViewBlue(this: UnsafeRawPointer, view: bridge.std__shared_ptr_HybridTestViewSpec_) -> bridge.Result_bool_ {
    do {
      let __instance = cast(this)
      let __result = try __instance.getIsViewBlue(view: { () -> HybridTestViewSpec in
        let __unsafePointer = bridge.get_std__shared_ptr_HybridTestViewSpec_(view)
        return MemoryHelper.castUnsafe(__unsafePointer)
      }())
      let __resultCpp = __result
      return bridge.create_Result_bool_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_bool_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func bounceExternalHybrid(this: UnsafeRawPointer, externalObject: bridge.std__shared_ptr_margelo__nitro__test__external__HybridSomeExternalObjectSpec_) -> bridge.Result_std__shared_ptr_margelo__nitro__test__external__HybridSomeExternalObjectSpec__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.bounceExternalHybrid(externalObject: { () -> HybridSomeExternalObjectSpec in
        let __unsafePointer = bridge.get_std__shared_ptr_margelo__nitro__test__external__HybridSomeExternalObjectSpec_(externalObject)
        return MemoryHelper.castUnsafe(__unsafePointer)
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_margelo__nitro__test__external__HybridSomeExternalObjectSpec_ in
        return __result.getCxxPart()
      }()
      return bridge.create_Result_std__shared_ptr_margelo__nitro__test__external__HybridSomeExternalObjectSpec__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_margelo__nitro__test__external__HybridSomeExternalObjectSpec__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func createInternalObject(this: UnsafeRawPointer) -> bridge.Result_std__shared_ptr_margelo__nitro__test__external__HybridSomeExternalObjectSpec__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.createInternalObject()
      let __resultCpp = { () -> bridge.std__shared_ptr_margelo__nitro__test__external__HybridSomeExternalObjectSpec_ in
        return __result.getCxxPart()
      }()
      return bridge.create_Result_std__shared_ptr_margelo__nitro__test__external__HybridSomeExternalObjectSpec__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_margelo__nitro__test__external__HybridSomeExternalObjectSpec__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public static func getNativeRefCount(this: UnsafeRawPointer) -> bridge.Result_double_ {
    do {
      let __instance = cast(this)
      let __result = try __instance.getNativeRefCount()
      let __resultCpp = __result
      return bridge.create_Result_double_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_double_(__exceptionPtr)
    }
  }
}
