///
/// Func_double.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules


/**
 * Wraps a Swift `() -> Double` as a class.
 * This class can be used from C++, e.g. to wrap the Swift closure as a `std::function`.
 */
public final class Func_double: UnsafeTransferable {
  public typealias bridge = margelo.nitro.test.bridge.swift

  private let closure: () -> Double

  public init(_ closure: @escaping () -> Double) {
    self.closure = closure
  }

  @inline(__always)
  public func call() -> Double {
    let __result: Double = self.closure()
    return __result
  }

  @inline(__always)
  public func toUnsafe() -> UnsafeMutableRawPointer {
    return self.toUnsafeRetained()
  }

  @inline(__always)
  public static func fromUnsafe(_ pointer: UnsafeMutableRawPointer) -> Func_double {
    return Self.fromUnsafeRetained(pointer)
  }
}
