///
/// Func_void_std__string.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules


/**
 * Wraps a Swift `(_ value: String) -> Void` as a class.
 * This class can be used from C++, e.g. to wrap the Swift closure as a `std::function`.
 */
public final class Func_void_std__string: UnsafeTransferable {
  public typealias bridge = margelo.nitro.test.bridge.swift

  private let closure: (_ value: String) -> Void

  public init(_ closure: @escaping (_ value: String) -> Void) {
    self.closure = closure
  }

  @inline(__always)
  public func call(value: std.string) -> Void {
    self.closure(String(value))
  }

  /**
   * Cast void* -> Func_void_std__string from C++
   */
  @inline(__always)
  public static func fromUnsafe(_ pointer: UnsafeMutableRawPointer) -> Func_void_std__string {
    return Self.fromUnsafeRetained(pointer)
  }
}
