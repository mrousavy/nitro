///
/// Car.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `Car`, backed by a C++ struct.
 */
public typealias Car = margelo.nitro.test.Car

public extension Car {
  private typealias bridge = margelo.nitro.test.bridge.swift

  /**
   * Create a new instance of `Car`.
   */
  init(year: Double, make: String, model: String, power: Double, powertrain: Powertrain, driver: Person?, passengers: [Person], isFast: Bool?, favouriteTrack: String?, performanceScores: [Double]) {
    self.init(year, std.string(make), std.string(model), power, powertrain, { () -> bridge.std__optional_Person_ in
      if let __unwrappedValue = driver {
        return bridge.create_std__optional_Person_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__vector_Person_ in
      var __vector = bridge.create_std__vector_Person_(passengers.count)
      for __item in passengers {
        __vector.push_back(__item)
      }
      return __vector
    }(), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = isFast {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = favouriteTrack {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__vector_double_ in
      var __vector = bridge.create_std__vector_double_(performanceScores.count)
      for __item in performanceScores {
        __vector.push_back(__item)
      }
      return __vector
    }())
  }

  var yearCached: Double? = nil
  var year: Double {
    @inline(__always)
    mutating get {
      if let yearCached {
        return yearCached
      }
      let __result = self.__year
      yearCached = __result
      return __result
    }
    @inline(__always)
    set {
      yearCached = newValue
      self.__year = newValue
    }
  }
  
  var makeCached: String? = nil
  var make: String {
    @inline(__always)
    mutating get {
      if let makeCached {
        return makeCached
      }
      let __result = String(self.__make)
      makeCached = __result
      return __result
    }
    @inline(__always)
    set {
      makeCached = newValue
      self.__make = std.string(newValue)
    }
  }
  
  var modelCached: String? = nil
  var model: String {
    @inline(__always)
    mutating get {
      if let modelCached {
        return modelCached
      }
      let __result = String(self.__model)
      modelCached = __result
      return __result
    }
    @inline(__always)
    set {
      modelCached = newValue
      self.__model = std.string(newValue)
    }
  }
  
  var powerCached: Double? = nil
  var power: Double {
    @inline(__always)
    mutating get {
      if let powerCached {
        return powerCached
      }
      let __result = self.__power
      powerCached = __result
      return __result
    }
    @inline(__always)
    set {
      powerCached = newValue
      self.__power = newValue
    }
  }
  
  var powertrainCached: Powertrain? = nil
  var powertrain: Powertrain {
    @inline(__always)
    mutating get {
      if let powertrainCached {
        return powertrainCached
      }
      let __result = self.__powertrain
      powertrainCached = __result
      return __result
    }
    @inline(__always)
    set {
      powertrainCached = newValue
      self.__powertrain = newValue
    }
  }
  
  var driverCached: Person?? = nil
  var driver: Person? {
    @inline(__always)
    mutating get {
      if let driverCached {
        return driverCached
      }
      let __result = self.__driver.value
      driverCached = __result
      return __result
    }
    @inline(__always)
    set {
      driverCached = newValue
      self.__driver = { () -> bridge.std__optional_Person_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_Person_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var passengersCached: [Person]? = nil
  var passengers: [Person] {
    @inline(__always)
    mutating get {
      if let passengersCached {
        return passengersCached
      }
      let __result = self.__passengers.map({ __item in __item })
      passengersCached = __result
      return __result
    }
    @inline(__always)
    set {
      passengersCached = newValue
      self.__passengers = { () -> bridge.std__vector_Person_ in
        var __vector = bridge.create_std__vector_Person_(newValue.count)
        for __item in newValue {
          __vector.push_back(__item)
        }
        return __vector
      }()
    }
  }
  
  var isFastCached: Bool?? = nil
  var isFast: Bool? {
    @inline(__always)
    mutating get {
      if let isFastCached {
        return isFastCached
      }
      let __result = { () -> Bool? in
        if bridge.has_value_std__optional_bool_(self.__isFast) {
          let __unwrapped = bridge.get_std__optional_bool_(self.__isFast)
          return __unwrapped
        } else {
          return nil
        }
      }()
      isFastCached = __result
      return __result
    }
    @inline(__always)
    set {
      isFastCached = newValue
      self.__isFast = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var favouriteTrackCached: String?? = nil
  var favouriteTrack: String? {
    @inline(__always)
    mutating get {
      if let favouriteTrackCached {
        return favouriteTrackCached
      }
      let __result = { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__favouriteTrack) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__favouriteTrack)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
      favouriteTrackCached = __result
      return __result
    }
    @inline(__always)
    set {
      favouriteTrackCached = newValue
      self.__favouriteTrack = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var performanceScoresCached: [Double]? = nil
  var performanceScores: [Double] {
    @inline(__always)
    mutating get {
      if let performanceScoresCached {
        return performanceScoresCached
      }
      let __result = self.__performanceScores.map({ __item in __item })
      performanceScoresCached = __result
      return __result
    }
    @inline(__always)
    set {
      performanceScoresCached = newValue
      self.__performanceScores = { () -> bridge.std__vector_double_ in
        var __vector = bridge.create_std__vector_double_(newValue.count)
        for __item in newValue {
          __vector.push_back(__item)
        }
        return __vector
      }()
    }
  }
}
