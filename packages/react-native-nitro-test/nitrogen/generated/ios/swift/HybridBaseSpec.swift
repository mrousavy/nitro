///
/// HybridBaseSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridBaseSpec``
public protocol HybridBaseSpec_protocol: HybridObject {
  // Properties
  var baseValue: Double { get }

  // Methods
  
}

public extension HybridBaseSpec_protocol {
  /// Default implementation of ``HybridObject.toString``
  func toString() -> String {
    return "[HybridObject Base]"
  }
}

open class HybridBaseSpec_base {
  public typealias bridge = margelo.nitro.test.bridge.swift
  private var _cxxPart: bridge.std__weak_ptr_HybridBaseSpec_ = .init()

  public init() { }
  
  open func getCxxPart() -> bridge.std__shared_ptr_HybridBaseSpec_ {
    let cachedCxxPart = self._cxxPart.lock()
    if Bool(fromCxx: cachedCxxPart) {
      return cachedCxxPart
    } else {
      let unsafe = Unmanaged.passRetained(self).toOpaque()
      let cxxPart = bridge.create_std__shared_ptr_HybridBaseSpec_(unsafe)
      _cxxPart = bridge.weakify_std__shared_ptr_HybridBaseSpec_(cxxPart)
      return cxxPart
    }
  }
}

public typealias HybridBaseSpec = HybridBaseSpec_protocol & HybridBaseSpec_base
