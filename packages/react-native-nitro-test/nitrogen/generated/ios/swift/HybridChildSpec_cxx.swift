///
/// HybridChildSpec_cxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges HybridChildSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
public class HybridChildSpec_cxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::test::bridge::swift`)
   * from `NitroTest-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.test.bridge.swift

  @inline(__always)
  private static func cast(_ this: UnsafeRawPointer) -> HybridChildSpec {
    return MemoryHelper.castUnsafe(this)
  }

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  @inline(__always)
  public static func getMemorySize(this: UnsafeRawPointer) -> Int {
    let __instance = cast(this)
    return MemoryHelper.getSizeOf(__instance) + __instance.memorySize
  }

  /**
   * Call dispose() on the Swift class.
   * This _may_ be called manually from JS.
   */
  @inline(__always)
  public static func dispose(this: UnsafeRawPointer) {
    let __instance = cast(this)
    __instance.dispose()
  }

  /**
   * Call toString() on the Swift class.
   */
  @inline(__always)
  public static func toString(this: UnsafeRawPointer) -> String {
    let __instance = cast(this)
    return __instance.toString()
  }

  /**
   * Call equals() on the Swift class.
   */
  @inline(__always)
  public static func equals(this: UnsafeRawPointer, other: UnsafeRawPointer) -> Bool {
    let __instance = cast(this)
    let __other = cast(other)
    return __instance === __other
  }

  // Properties
  @inline(__always)
  public static func getChildValue(this: UnsafeRawPointer) -> Double {
    let __instance = cast(this)
    let __value = __instance.childValue
    return __value
  }

  // Methods
  @inline(__always)
  public static func bounceVariant(this: UnsafeRawPointer, variant: bridge.std__variant_std__string__Car_) -> bridge.Result_std__variant_std__string__Car__ {
    do {
      let __instance = cast(this)
      let __result = try __instance.bounceVariant(variant: { () -> NamedVariant in
        let __variant = variant
        switch __variant.index() {
          case 0:
            let __actual = __variant.get_0()
            return .first(String(__actual))
          case 1:
            let __actual = __variant.get_1()
            return .second(__actual)
          default:
            fatalError("Variant can never have index \(__variant.index())!")
        }
      }())
      let __resultCpp = { () -> bridge.std__variant_std__string__Car_ in
        switch __result {
          case .first(let __value):
            return bridge.create_std__variant_std__string__Car_(std.string(__value))
          case .second(let __value):
            return bridge.create_std__variant_std__string__Car_(__value)
        }
      }().variant
      return bridge.create_Result_std__variant_std__string__Car__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__variant_std__string__Car__(__exceptionPtr)
    }
  }
}
