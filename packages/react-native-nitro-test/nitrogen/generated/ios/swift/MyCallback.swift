///
/// MyCallback.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `MyCallback`, backed by a C++ struct.
 */
public typealias MyCallback = margelo.nitro.test.MyCallback

public extension MyCallback {
  private typealias bridge = margelo.nitro.test.bridge.swift

  /**
   * Create a new instance of `MyCallback`.
   */
  init(onSimpleEvent: @escaping (_ message: String) -> Void, onMaybeData: @escaping (_ data: ArrayBuffer) -> Void) {
    self.init({ () -> bridge.Func_void_std__string in
      let __closureWrapper = Func_void_std__string(onSimpleEvent)
      return bridge.create_Func_void_std__string(__closureWrapper.toUnsafe())
    }(), { () -> bridge.Func_void_std__shared_ptr_ArrayBuffer_ in
      let __closureWrapper = Func_void_std__shared_ptr_ArrayBuffer_(onMaybeData)
      return bridge.create_Func_void_std__shared_ptr_ArrayBuffer_(__closureWrapper.toUnsafe())
    }())
  }

  var onSimpleEvent: (_ message: String) -> Void {
    @inline(__always)
    get {
      return { () -> (String) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_std__string(self.__onSimpleEvent)
        return { (__message: String) -> Void in
          __wrappedFunction.call(std.string(__message))
        }
      }()
    }
    @inline(__always)
    set {
      self.__onSimpleEvent = { () -> bridge.Func_void_std__string in
        let __closureWrapper = Func_void_std__string(newValue)
        return bridge.create_Func_void_std__string(__closureWrapper.toUnsafe())
      }()
    }
  }
  
  var onMaybeData: (_ data: ArrayBuffer) -> Void {
    @inline(__always)
    get {
      return { () -> (ArrayBuffer) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_std__shared_ptr_ArrayBuffer_(self.__onMaybeData)
        return { (__data: ArrayBuffer) -> Void in
          __wrappedFunction.call(__data)
        }
      }()
    }
    @inline(__always)
    set {
      self.__onMaybeData = { () -> bridge.Func_void_std__shared_ptr_ArrayBuffer_ in
        let __closureWrapper = Func_void_std__shared_ptr_ArrayBuffer_(newValue)
        return bridge.create_Func_void_std__shared_ptr_ArrayBuffer_(__closureWrapper.toUnsafe())
      }()
    }
  }
}
