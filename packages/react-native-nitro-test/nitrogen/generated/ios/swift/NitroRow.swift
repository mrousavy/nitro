///
/// NitroRow.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `NitroRow`, backed by a C++ struct.
 */
public typealias NitroRow = margelo.nitro.test.NitroRow

public extension NitroRow {
  private typealias bridge = margelo.nitro.test.bridge.swift

  /**
   * Create a new instance of `NitroRow`.
   */
  init(title: String, onPress: @escaping (_ checked: Bool?) -> Void) {
    self.init(std.string(title), { () -> bridge.Func_void_std__optional_bool_ in
      let __closureWrapper = Func_void_std__optional_bool_(onPress)
      return bridge.create_Func_void_std__optional_bool_(__closureWrapper.toUnsafe())
    }())
  }

  var title: String {
    @inline(__always)
    get {
      return String(self.__title)
    }
    @inline(__always)
    set {
      self.__title = std.string(newValue)
    }
  }
  
  var onPress: (_ checked: Bool?) -> Void {
    @inline(__always)
    get {
      return { () -> (Bool?) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_std__optional_bool_(self.__onPress)
        return { (__checked: Bool?) -> Void in
          __wrappedFunction.call({ () -> bridge.std__optional_bool_ in
            if let __unwrappedValue = __checked {
              return bridge.create_std__optional_bool_(__unwrappedValue)
            } else {
              return .init()
            }
          }())
        }
      }()
    }
    @inline(__always)
    set {
      self.__onPress = { () -> bridge.Func_void_std__optional_bool_ in
        let __closureWrapper = Func_void_std__optional_bool_(newValue)
        return bridge.create_Func_void_std__optional_bool_(__closureWrapper.toUnsafe())
      }()
    }
  }
}
