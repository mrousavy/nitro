///
/// HybridTestViewSpec_cxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges HybridTestViewSpec over to C++.
 * This does multiple things:
 *
 * 1. In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 * 2. To avoid exposing the whole inheritance chain to C++, we only expose the methods HybridTestViewSpec defines itself,
 *    otherwise C++ would see HybridTestViewSpec's base class and if that's an external symbol the build fails.
 * 3. We use void* to hold the Swift instance to avoid exposing the class to C++, this way we only see the static funcs.
 * 4. A lot of types have to be bridged from C++ to Swift and back - e.g. arrays or functions. This does all that.
 * 5. Since C++ cannot catch Swift errors, we wrap them in a Result<T> type here that holds either T or Error.
 */
public class HybridTestViewSpec_cxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::test::bridge::swift`)
   * from `NitroTest-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.test.bridge.swift

  @inline(__always)
  private static func cast(_ this: UnsafeRawPointer) -> HybridTestViewSpec {
    return MemoryHelper.castUnsafe(this)
  }

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  @inline(__always)
  public static func getMemorySize(this: UnsafeRawPointer) -> Int {
    let __instance = cast(this)
    return MemoryHelper.getSizeOf(__instance) + __instance.memorySize
  }

  /**
   * Call dispose() on the Swift class.
   * This _may_ be called manually from JS.
   */
  @inline(__always)
  public static func dispose(this: UnsafeRawPointer) {
    let __instance = cast(this)
    __instance.dispose()
  }

  /**
   * Call toString() on the Swift class.
   */
  @inline(__always)
  public static func toString(this: UnsafeRawPointer) -> String {
    let __instance = cast(this)
    return __instance.toString()
  }

  /**
   * Call equals() on the Swift class.
   */
  @inline(__always)
  public static func equals(this: UnsafeRawPointer, other: UnsafeRawPointer) -> Bool {
    let __instance = cast(this)
    let __other = cast(other)
    return __instance === __other
  }

  // Properties
  @inline(__always)
  public static func isBlue(this: UnsafeRawPointer) -> Bool {
    let __instance = cast(this)
    let __value = __instance.isBlue
    return __value
  }
  @inline(__always)
  public static func setIsBlue(this: UnsafeRawPointer, newValue: Bool) {
    let __instance = cast(this)
    __instance.isBlue = newValue
  }
  
  @inline(__always)
  public static func hasBeenCalled(this: UnsafeRawPointer) -> Bool {
    let __instance = cast(this)
    let __value = __instance.hasBeenCalled
    return __value
  }
  @inline(__always)
  public static func setHasBeenCalled(this: UnsafeRawPointer, newValue: Bool) {
    let __instance = cast(this)
    __instance.hasBeenCalled = newValue
  }
  
  @inline(__always)
  public static func getColorScheme(this: UnsafeRawPointer) -> Int32 {
    let __instance = cast(this)
    let __value = __instance.colorScheme
    return __value.rawValue
  }
  @inline(__always)
  public static func setColorScheme(this: UnsafeRawPointer, newValue: Int32) {
    let __instance = cast(this)
    __instance.colorScheme = margelo.nitro.test.ColorScheme(rawValue: newValue)!
  }
  
  @inline(__always)
  public static func getSomeCallback(this: UnsafeRawPointer) -> bridge.Func_void {
    let __instance = cast(this)
    let __value = __instance.someCallback
    return { () -> bridge.Func_void in
      let __closureWrapper = Func_void(__value)
      return bridge.create_Func_void(__closureWrapper.toUnsafeRetained())
    }()
  }
  @inline(__always)
  public static func setSomeCallback(this: UnsafeRawPointer, newValue: bridge.Func_void) {
    let __instance = cast(this)
    __instance.someCallback = { () -> () -> Void in
      let __wrappedFunction = bridge.wrap_Func_void(newValue)
      return { () -> Void in
        __wrappedFunction.call()
      }
    }()
  }

  // Methods
  @inline(__always)
  public static func someMethod(this: UnsafeRawPointer) -> bridge.Result_void_ {
    do {
      let __instance = cast(this)
      try __instance.someMethod()
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  public static func getView(this: UnsafeMutableRawPointer) -> UnsafeMutableRawPointer {
    let __instance = cast(this)
    return Unmanaged.passRetained(__instance.view).toOpaque()
  }
  
  public static func beforeUpdate(this: UnsafeMutableRawPointer) {
    let __instance = cast(this)
    __instance.beforeUpdate()
  }
  
  public static func afterUpdate(this: UnsafeMutableRawPointer) {
    let __instance = cast(this)
    __instance.afterUpdate()
  }
}
