///
/// HybridCallbackBuilderSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridCallbackBuilderSpec``
public protocol HybridCallbackBuilderSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  
}

/// See ``HybridCallbackBuilderSpec``
open class HybridCallbackBuilderSpec_base {
  private weak var cxxWrapper: HybridCallbackBuilderSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridCallbackBuilderSpec_cxx {
  #if DEBUG
    guard self is HybridCallbackBuilderSpec else {
      fatalError("`self` is not a `HybridCallbackBuilderSpec`! Did you accidentally inherit from `HybridCallbackBuilderSpec_base` instead of `HybridCallbackBuilderSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridCallbackBuilderSpec_cxx(self as! HybridCallbackBuilderSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the CallbackBuilder HybridObject.
 * Implement this protocol to create Swift-based instances of CallbackBuilder.
 * ```swift
 * class HybridCallbackBuilder : HybridCallbackBuilderSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridCallbackBuilderSpec = HybridCallbackBuilderSpec_protocol & HybridCallbackBuilderSpec_base
