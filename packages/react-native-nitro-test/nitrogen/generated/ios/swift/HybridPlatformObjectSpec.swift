///
/// HybridPlatformObjectSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridPlatformObjectSpec``
public protocol HybridPlatformObjectSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func getOSVersion() throws -> String
}

/// See ``HybridPlatformObjectSpec``
public extension HybridPlatformObjectSpec_protocol {
  /// Default implementation of ``HybridObject.toString``
  func toString() -> String {
    return "[HybridObject PlatformObject]"
  }
}

/// See ``HybridPlatformObjectSpec``
open class HybridPlatformObjectSpec_base {
  public typealias bridge = margelo.nitro.test.bridge.swift
  private var _cxxPart: bridge.std__weak_ptr_HybridPlatformObjectSpec_ = .init()

  public init() { }
  
  open func getCxxPart() -> bridge.std__shared_ptr_HybridPlatformObjectSpec_ {
    let cachedCxxPart = self._cxxPart.lock()
    if Bool(fromCxx: cachedCxxPart) {
      return cachedCxxPart
    } else {
      let unsafe = Unmanaged.passUnretained(self).toOpaque()
      let cxxPart = bridge.create_std__shared_ptr_HybridPlatformObjectSpec_(unsafe)
      _cxxPart = bridge.weakify_std__shared_ptr_HybridPlatformObjectSpec_(cxxPart)
      return cxxPart
    }
  }
}

/**
 * A Swift base-protocol (+ base class) representing the HybridObject "PlatformObject".
 * Implement this protocol to create Swift-based instances of PlatformObject.
 * ```swift
 * class HybridPlatformObject: HybridPlatformObjectSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridPlatformObjectSpec = HybridPlatformObjectSpec_protocol & HybridPlatformObjectSpec_base
