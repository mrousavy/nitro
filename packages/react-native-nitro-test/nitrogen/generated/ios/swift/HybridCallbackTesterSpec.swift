///
/// HybridCallbackTesterSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridCallbackTesterSpec``
public protocol HybridCallbackTesterSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func createBuilder(callback: MyCallback) throws -> (any HybridCallbackBuilderSpec)
}

/// See ``HybridCallbackTesterSpec``
open class HybridCallbackTesterSpec_base {
  private weak var cxxWrapper: HybridCallbackTesterSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridCallbackTesterSpec_cxx {
  #if DEBUG
    guard self is HybridCallbackTesterSpec else {
      fatalError("`self` is not a `HybridCallbackTesterSpec`! Did you accidentally inherit from `HybridCallbackTesterSpec_base` instead of `HybridCallbackTesterSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridCallbackTesterSpec_cxx(self as! HybridCallbackTesterSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the CallbackTester HybridObject.
 * Implement this protocol to create Swift-based instances of CallbackTester.
 * ```swift
 * class HybridCallbackTester : HybridCallbackTesterSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridCallbackTesterSpec = HybridCallbackTesterSpec_protocol & HybridCallbackTesterSpec_base
