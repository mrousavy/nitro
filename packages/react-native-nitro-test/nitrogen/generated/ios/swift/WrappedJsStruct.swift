///
/// WrappedJsStruct.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `WrappedJsStruct`, backed by a C++ struct.
 */
public typealias WrappedJsStruct = margelo.nitro.test.WrappedJsStruct

public extension WrappedJsStruct {
  private typealias bridge = margelo.nitro.test.bridge.swift

  /**
   * Create a new instance of `WrappedJsStruct`.
   */
  init(value: JsStyleStruct, items: [JsStyleStruct]) {
    self.init(value, items.withUnsafeBufferPointer { __pointer -> bridge.std__vector_JsStyleStruct_ in
      return bridge.copy_std__vector_JsStyleStruct_(__pointer.baseAddress!, items.count)
    })
  }

  var value: JsStyleStruct {
    @inline(__always)
    get {
      return self.__value
    }
    @inline(__always)
    set {
      self.__value = newValue
    }
  }
  
  var items: [JsStyleStruct] {
    @inline(__always)
    get {
      return { () -> [JsStyleStruct] in
        let __data = bridge.get_data_std__vector_JsStyleStruct_(self.__items)
        let __size = self.__items.size()
        return Array(UnsafeBufferPointer(start: __data, count: __size))
      }()
    }
    @inline(__always)
    set {
      self.__items = newValue.withUnsafeBufferPointer { __pointer -> bridge.std__vector_JsStyleStruct_ in
        return bridge.copy_std__vector_JsStyleStruct_(__pointer.baseAddress!, newValue.count)
      }
    }
  }
}
