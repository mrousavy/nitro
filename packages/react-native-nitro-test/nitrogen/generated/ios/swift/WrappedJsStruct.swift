///
/// WrappedJsStruct.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `WrappedJsStruct`, backed by a C++ struct.
 */
public typealias WrappedJsStruct = margelo.nitro.test.WrappedJsStruct

public extension WrappedJsStruct {
  private typealias bridge = margelo.nitro.test.bridge.swift

  /**
   * Create a new instance of `WrappedJsStruct`.
   */
  init(value: JsStyleStruct, items: [JsStyleStruct]) {
    self.init(value, { () -> bridge.std__vector_JsStyleStruct_ in
      var __vector = bridge.create_std__vector_JsStyleStruct_(items.count)
      for __item in items {
        __vector.push_back(__item)
      }
      return __vector
    }())
  }

  var valueCached: JsStyleStruct? = nil
  var value: JsStyleStruct {
    @inline(__always)
    mutating get {
      if let valueCached {
        return valueCached
      }
      let __result = self.__value
      valueCached = __result
      return __result
    }
    @inline(__always)
    set {
      self.__value = newValue
    }
  }
  
  var itemsCached: [JsStyleStruct]? = nil
  var items: [JsStyleStruct] {
    @inline(__always)
    mutating get {
      if let itemsCached {
        return itemsCached
      }
      let __result = self.__items.map({ __item in __item })
      itemsCached = __result
      return __result
    }
    @inline(__always)
    set {
      self.__items = { () -> bridge.std__vector_JsStyleStruct_ in
        var __vector = bridge.create_std__vector_JsStyleStruct_(newValue.count)
        for __item in newValue {
          __vector.push_back(__item)
        }
        return __vector
      }()
    }
  }
}
