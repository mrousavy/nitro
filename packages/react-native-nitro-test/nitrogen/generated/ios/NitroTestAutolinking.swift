///
/// NitroTestAutolinking.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

public final class NitroTestAutolinking {
  public typealias bridge = margelo.nitro.test.bridge.swift

  /**
   * Creates an instance of a Swift class that implements `HybridTestObjectSwiftKotlinSpec`,
   * and wraps it in a Swift class that can directly interop with C++ (`HybridTestObjectSwiftKotlinSpec_cxx`)
   *
   * This is generated by Nitrogen and will initialize the class specified
   * in the `"autolinking"` property of `nitro.json` (in this case, `HybridTestObjectSwift`).
   */
  public static func createTestObjectSwiftKotlin() -> bridge.std__shared_ptr_HybridTestObjectSwiftKotlinSpec_ {
    let hybridObject = HybridTestObjectSwift()
    return { () -> bridge.std__shared_ptr_HybridTestObjectSwiftKotlinSpec_ in
      let __cxxWrapped = hybridObject.getCxxWrapper()
      return __cxxWrapped.getCxxPart()
    }()
  }
  
  /**
   * Creates an instance of a Swift class that implements `HybridBaseSpec`,
   * and wraps it in a Swift class that can directly interop with C++ (`HybridBaseSpec_cxx`)
   *
   * This is generated by Nitrogen and will initialize the class specified
   * in the `"autolinking"` property of `nitro.json` (in this case, `HybridBase`).
   */
  public static func createBase() -> bridge.std__shared_ptr_HybridBaseSpec_ {
    let hybridObject = HybridBase()
    return { () -> bridge.std__shared_ptr_HybridBaseSpec_ in
      let __cxxWrapped = hybridObject.getCxxWrapper()
      return __cxxWrapped.getCxxPart()
    }()
  }
  
  /**
   * Creates an instance of a Swift class that implements `HybridChildSpec`,
   * and wraps it in a Swift class that can directly interop with C++ (`HybridChildSpec_cxx`)
   *
   * This is generated by Nitrogen and will initialize the class specified
   * in the `"autolinking"` property of `nitro.json` (in this case, `HybridChild`).
   */
  public static func createChild() -> bridge.std__shared_ptr_HybridChildSpec_ {
    let hybridObject = HybridChild()
    return { () -> bridge.std__shared_ptr_HybridChildSpec_ in
      let __cxxWrapped = hybridObject.getCxxWrapper()
      return __cxxWrapped.getCxxPart()
    }()
  }
  
  /**
   * Creates an instance of a Swift class that implements `HybridTestViewSpec`,
   * and wraps it in a Swift class that can directly interop with C++ (`HybridTestViewSpec_cxx`)
   *
   * This is generated by Nitrogen and will initialize the class specified
   * in the `"autolinking"` property of `nitro.json` (in this case, `HybridTestView`).
   */
  public static func createTestView() -> bridge.std__shared_ptr_HybridTestViewSpec_ {
    let hybridObject = HybridTestView()
    return { () -> bridge.std__shared_ptr_HybridTestViewSpec_ in
      let __cxxWrapped = hybridObject.getCxxWrapper()
      return __cxxWrapped.getCxxPart()
    }()
  }
}
