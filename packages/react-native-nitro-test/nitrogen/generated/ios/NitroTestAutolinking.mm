///
/// NitroTestAutolinking.mm
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#import <Foundation/Foundation.h>
#import <NitroModules/HybridObjectRegistry.hpp>
#import "NitroTest-Swift-Cxx-Umbrella.hpp"
#import <type_traits>

#include "HybridTestObjectCpp.hpp"
#include "HybridTestObjectSwiftKotlinSpecSwift.hpp"
#include "HybridBaseSpecSwift.hpp"
#include "HybridChildSpecSwift.hpp"
#include "HybridTestViewSpecSwift.hpp"

@interface NitroTestAutolinking : NSObject
@end

@implementation NitroTestAutolinking

+ (void) load {
  using namespace margelo::nitro;
  using namespace margelo::nitro::test;

  HybridObjectRegistry::registerHybridObjectConstructor(
    "TestObjectCpp",
    []() -> std::shared_ptr<HybridObject> {
      static_assert(std::is_default_constructible_v<HybridTestObjectCpp>,
                    "The HybridObject \"HybridTestObjectCpp\" is not default-constructible! "
                    "Create a public constructor that takes zero arguments to be able to autolink this HybridObject.");
      return std::make_shared<HybridTestObjectCpp>();
    }
  );
  HybridObjectRegistry::registerHybridObjectConstructor(
    "TestObjectSwiftKotlin",
    []() -> std::shared_ptr<HybridObject> {
      std::shared_ptr<margelo::nitro::test::HybridTestObjectSwiftKotlinSpec> hybridObject = NitroTest::NitroTestAutolinking::createTestObjectSwiftKotlin();
      return hybridObject;
    }
  );
  HybridObjectRegistry::registerHybridObjectConstructor(
    "Base",
    []() -> std::shared_ptr<HybridObject> {
      std::shared_ptr<margelo::nitro::test::HybridBaseSpec> hybridObject = NitroTest::NitroTestAutolinking::createBase();
      return hybridObject;
    }
  );
  HybridObjectRegistry::registerHybridObjectConstructor(
    "Child",
    []() -> std::shared_ptr<HybridObject> {
      std::shared_ptr<margelo::nitro::test::HybridChildSpec> hybridObject = NitroTest::NitroTestAutolinking::createChild();
      return hybridObject;
    }
  );
  HybridObjectRegistry::registerHybridObjectConstructor(
    "TestView",
    []() -> std::shared_ptr<HybridObject> {
      std::shared_ptr<margelo::nitro::test::HybridTestViewSpec> hybridObject = NitroTest::NitroTestAutolinking::createTestView();
      return hybridObject;
    }
  );
}

@end
