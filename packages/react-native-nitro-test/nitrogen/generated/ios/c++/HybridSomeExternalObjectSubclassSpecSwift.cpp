///
/// HybridSomeExternalObjectSubclassSpecSwift.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridSomeExternalObjectSubclassSpecSwift.hpp"
#include "NitroTest-Swift-Cxx-Umbrella.hpp"
#include <NitroModules/SwiftReferences.hpp>

namespace margelo::nitro::test {

  // pragma MARK: Constructor / Destructor
  HybridSomeExternalObjectSubclassSpecSwift::HybridSomeExternalObjectSubclassSpecSwift(void* NON_NULL /* unretained */ swiftPart):
    HybridObject(HybridSomeExternalObjectSubclassSpec::TAG),
    margelo::nitro::test::external::HybridSomeExternalObjectSpecSwift(swiftPart),
    _swiftPart(swiftPart) {
    SwiftReferences::retainOne(_swiftPart);
  }
  HybridSomeExternalObjectSubclassSpecSwift::~HybridSomeExternalObjectSubclassSpecSwift() {
    SwiftReferences::releaseOne(_swiftPart);
  }

  // pragma MARK: Base Methods
  size_t HybridSomeExternalObjectSubclassSpecSwift::getExternalMemorySize() noexcept {
    return NitroTest::HybridSomeExternalObjectSubclassSpec_cxx::getMemorySize(_swiftPart);
  }
  void HybridSomeExternalObjectSubclassSpecSwift::dispose() noexcept {
    return NitroTest::HybridSomeExternalObjectSubclassSpec_cxx::dispose(_swiftPart);
  }
  std::string HybridSomeExternalObjectSubclassSpecSwift::toString() {
    return NitroTest::HybridSomeExternalObjectSubclassSpec_cxx::toString(_swiftPart);
  }
  bool HybridSomeExternalObjectSubclassSpecSwift::equals(const std::shared_ptr<HybridObject>& other) {
    const auto& swiftOther = std::dynamic_pointer_cast<HybridSomeExternalObjectSubclassSpecSwift>(other);
    if (swiftOther == nullptr) {
      return false;
    }
    return NitroTest::HybridSomeExternalObjectSubclassSpec_cxx::equals(_swiftPart, swiftOther->getSwiftPart());
  }

  // pragma MARK: Properties
  

  // pragma MARK: Methods
  std::string HybridSomeExternalObjectSubclassSpecSwift::getSubclassedValue() {
    auto __result = NitroTest::HybridSomeExternalObjectSubclassSpec_cxx::getSubclassedValue(_swiftPart);
    if (__result.hasError()) [[unlikely]] {
      std::rethrow_exception(__result.error());
    }
    auto __value = std::move(__result.value());
    return __value;
  }

} // namespace margelo::nitro::test
