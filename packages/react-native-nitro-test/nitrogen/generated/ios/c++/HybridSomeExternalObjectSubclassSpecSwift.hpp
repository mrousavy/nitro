///
/// HybridSomeExternalObjectSubclassSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridSomeExternalObjectSubclassSpec.hpp"

// Forward declaration of `HybridSomeExternalObjectSubclassSpec_cxx` to properly resolve imports.
namespace NitroTest { class HybridSomeExternalObjectSubclassSpec_cxx; }

// Forward declaration of `HybridSomeExternalObjectSpecSwift` to properly resolve imports.
namespace margelo::nitro::test { class HybridSomeExternalObjectSpecSwift; }

#include <NitroTestExternal/HybridSomeExternalObjectSpecSwift.hpp>

#include "NitroTest-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::test {

  /**
   * The C++ part of HybridSomeExternalObjectSubclassSpec_cxx.swift.
   *
   * HybridSomeExternalObjectSubclassSpecSwift (C++) accesses HybridSomeExternalObjectSubclassSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridSomeExternalObjectSubclassSpec_cxx can directly inherit from the C++ class HybridSomeExternalObjectSubclassSpec
   * to simplify the whole structure and memory management.
   */
  class HybridSomeExternalObjectSubclassSpecSwift:
    public virtual HybridSomeExternalObjectSubclassSpec,
    public virtual NitroTest::HybridSomeExternalObjectSpecSwift {
  public:
    // Constructor from a Swift instance
    explicit HybridSomeExternalObjectSubclassSpecSwift(const NitroTest::HybridSomeExternalObjectSubclassSpec_cxx& swiftPart):
      HybridObject(HybridSomeExternalObjectSubclassSpec::TAG),
      NitroTest::HybridSomeExternalObjectSpecSwift(swiftPart),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroTest::HybridSomeExternalObjectSubclassSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }
    std::string toString() override {
      return _swiftPart.toString();
    }

  public:
    // Properties
    inline bool getIsSubclass() noexcept override {
      return _swiftPart.isSubclass();
    }

  public:
    // Methods
    

  private:
    NitroTest::HybridSomeExternalObjectSubclassSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::test
