///
/// HybridPlatformObjectSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridPlatformObjectSpec.hpp"

#include <string>

namespace margelo::nitro::test {

  /**
   * The C++ part of HybridPlatformObjectSpec_cxx.swift.
   *
   * HybridPlatformObjectSpecSwift (C++) accesses HybridPlatformObjectSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridPlatformObjectSpec_cxx can directly inherit from the C++ class HybridPlatformObjectSpec
   * to simplify the whole structure and memory management.
   */
  class HybridPlatformObjectSpecSwift: public virtual HybridPlatformObjectSpec {
  public:
    // Constructor from an unmanaged Swift instance. This retains +1
    explicit HybridPlatformObjectSpecSwift(void* NON_NULL /* unretained */ swiftPart);
    // Destructor calls release -1 in Swift
    ~HybridPlatformObjectSpecSwift() override;
    // Copy & Move is deleted
    HybridPlatformObjectSpecSwift(const HybridPlatformObjectSpecSwift&) = delete;
    HybridPlatformObjectSpecSwift(HybridPlatformObjectSpecSwift&&) = delete;

  public:
    // Get the Swift part
    inline void* NON_NULL getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Base HybridObject overrides
    size_t getExternalMemorySize() noexcept override;
    void dispose() noexcept override;
    std::string toString() override;
    bool equals(const std::shared_ptr<HybridObject>& other) override;

  public:
    // Properties
    

  public:
    // Methods
    std::string getOSVersion() override;

  private:
    void* NON_NULL /* retained */ _swiftPart;
  };

} // namespace margelo::nitro::test
