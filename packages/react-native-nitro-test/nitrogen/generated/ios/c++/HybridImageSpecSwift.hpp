///
/// HybridImageSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridImageSpec.hpp"

// Forward declaration of `HybridImageSpec_cxx` to properly resolve imports.
namespace NitroImage { class HybridImageSpec_cxx; }

// Forward declaration of `ImageSize` to properly resolve imports.
namespace margelo::nitro::image { struct ImageSize; }
// Forward declaration of `PixelFormat` to properly resolve imports.
namespace margelo::nitro::image { enum class PixelFormat; }
// Forward declaration of `ImageFormat` to properly resolve imports.
namespace margelo::nitro::image { enum class ImageFormat; }

#include "ImageSize.hpp"
#include "PixelFormat.hpp"
#include "ImageFormat.hpp"
#include <string>
#include <functional>

#include "NitroImage-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::image {

  /**
   * The C++ part of HybridImageSpec_cxx.swift.
   *
   * HybridImageSpecSwift (C++) accesses HybridImageSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridImageSpec_cxx can directly inherit from the C++ class HybridImageSpec
   * to simplify the whole structure and memory management.
   */
  class HybridImageSpecSwift: public virtual HybridImageSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridImageSpecSwift(const NitroImage::HybridImageSpec_cxx& swiftPart):
      HybridObject(HybridImageSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroImage::HybridImageSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    inline ImageSize getSize() noexcept override {
      auto __result = _swiftPart.getSize();
      return __result;
    }
    inline PixelFormat getPixelFormat() noexcept override {
      auto __result = _swiftPart.getPixelFormat();
      return static_cast<PixelFormat>(__result);
    }
    inline double getSomeSettableProp() noexcept override {
      return _swiftPart.getSomeSettableProp();
    }
    inline void setSomeSettableProp(double someSettableProp) noexcept override {
      _swiftPart.setSomeSettableProp(std::forward<decltype(someSettableProp)>(someSettableProp));
    }

  public:
    // Methods
    inline double toArrayBuffer(ImageFormat format) override {
      auto __result = _swiftPart.toArrayBuffer(static_cast<int>(format));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline void saveToFile(const std::string& path, const std::function<void(const std::string& /* path */)>& onFinished) override {
      auto __result = _swiftPart.saveToFile(path, onFinished);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }

  private:
    NitroImage::HybridImageSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::image
