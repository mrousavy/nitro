///
/// HybridTestObjectSwiftKotlinSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridTestObjectSwiftKotlinSpec.hpp"

// Forward declaration of `HybridTestObjectSwiftKotlinSpec` to properly resolve imports.
namespace margelo::nitro::test { class HybridTestObjectSwiftKotlinSpec; }
// Forward declaration of `Powertrain` to properly resolve imports.
namespace margelo::nitro::test { enum class Powertrain; }
// Forward declaration of `OldEnum` to properly resolve imports.
namespace margelo::nitro::test { enum class OldEnum; }
// Forward declaration of `Person` to properly resolve imports.
namespace margelo::nitro::test { struct Person; }
// Forward declaration of `Car` to properly resolve imports.
namespace margelo::nitro::test { struct Car; }
// Forward declaration of `MapWrapper` to properly resolve imports.
namespace margelo::nitro::test { struct MapWrapper; }
// Forward declaration of `SecondMapWrapper` to properly resolve imports.
namespace margelo::nitro::test { struct SecondMapWrapper; }
// Forward declaration of `ArrayBufferHolder` to properly resolve imports.
namespace NitroModules { class ArrayBufferHolder; }
// Forward declaration of `JsStyleStruct` to properly resolve imports.
namespace margelo::nitro::test { struct JsStyleStruct; }
// Forward declaration of `WrappedJsStruct` to properly resolve imports.
namespace margelo::nitro::test { struct WrappedJsStruct; }
// Forward declaration of `OptionalWrapper` to properly resolve imports.
namespace margelo::nitro::test { struct OptionalWrapper; }
// Forward declaration of `OptionalCallback` to properly resolve imports.
namespace margelo::nitro::test { struct OptionalCallback; }
// Forward declaration of `WeirdNumbersEnum` to properly resolve imports.
namespace margelo::nitro::test { enum class WeirdNumbersEnum; }
// Forward declaration of `HybridBaseSpec` to properly resolve imports.
namespace margelo::nitro::test { class HybridBaseSpec; }
// Forward declaration of `HybridChildSpec` to properly resolve imports.
namespace margelo::nitro::test { class HybridChildSpec; }
// Forward declaration of `HybridTestViewSpec` to properly resolve imports.
namespace margelo::nitro::test { class HybridTestViewSpec; }
// Forward declaration of `HybridSomeExternalObjectSpec` to properly resolve imports.
namespace margelo::nitro::test::external { class HybridSomeExternalObjectSpec; }

#include <memory>
#include "HybridTestObjectSwiftKotlinSpec.hpp"
#include <optional>
#include <string>
#include <vector>
#include "Powertrain.hpp"
#include "OldEnum.hpp"
#include <functional>
#include <variant>
#include "Person.hpp"
#include "Car.hpp"
#include <NitroModules/AnyMap.hpp>
#include <unordered_map>
#include "MapWrapper.hpp"
#include "SecondMapWrapper.hpp"
#include <NitroModules/Promise.hpp>
#include <exception>
#include <chrono>
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/ArrayBufferHolder.hpp>
#include "JsStyleStruct.hpp"
#include "WrappedJsStruct.hpp"
#include "OptionalWrapper.hpp"
#include "OptionalCallback.hpp"
#include "WeirdNumbersEnum.hpp"
#include "HybridBaseSpec.hpp"
#include "HybridChildSpec.hpp"
#include "HybridTestViewSpec.hpp"
#include <NitroTestExternal/HybridSomeExternalObjectSpec.hpp>

namespace margelo::nitro::test {

  /**
   * The C++ part of HybridTestObjectSwiftKotlinSpec_cxx.swift.
   *
   * HybridTestObjectSwiftKotlinSpecSwift (C++) accesses HybridTestObjectSwiftKotlinSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridTestObjectSwiftKotlinSpec_cxx can directly inherit from the C++ class HybridTestObjectSwiftKotlinSpec
   * to simplify the whole structure and memory management.
   */
  class HybridTestObjectSwiftKotlinSpecSwift: public virtual HybridTestObjectSwiftKotlinSpec {
  public:
    // Constructor from an unmanaged Swift instance. This retains +1
    explicit HybridTestObjectSwiftKotlinSpecSwift(void* NON_NULL /* unretained */ swiftPart);
    // Destructor calls release -1 in Swift
    ~HybridTestObjectSwiftKotlinSpecSwift() override;
    // Copy & Move is deleted
    HybridTestObjectSwiftKotlinSpecSwift(const HybridTestObjectSwiftKotlinSpecSwift&) = delete;
    HybridTestObjectSwiftKotlinSpecSwift(HybridTestObjectSwiftKotlinSpecSwift&&) = delete;

  public:
    // Get the Swift part
    inline void* NON_NULL getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    size_t getExternalMemorySize() noexcept override;
    void dispose() noexcept override;
    std::string toString() override;
    bool equals(const std::shared_ptr<HybridObject>& other) override;

  public:
    // Properties
    std::shared_ptr<HybridTestObjectSwiftKotlinSpec> getThisObject() noexcept override;
    std::optional<std::shared_ptr<HybridTestObjectSwiftKotlinSpec>> getOptionalHybrid() noexcept override;
    void setOptionalHybrid(const std::optional<std::shared_ptr<HybridTestObjectSwiftKotlinSpec>>& optionalHybrid) noexcept override;
    double getNumberValue() noexcept override;
    void setNumberValue(double numberValue) noexcept override;
    bool getBoolValue() noexcept override;
    void setBoolValue(bool boolValue) noexcept override;
    std::string getStringValue() noexcept override;
    void setStringValue(const std::string& stringValue) noexcept override;
    int64_t getBigintValue() noexcept override;
    void setBigintValue(int64_t bigintValue) noexcept override;
    std::optional<std::string> getStringOrUndefined() noexcept override;
    void setStringOrUndefined(const std::optional<std::string>& stringOrUndefined) noexcept override;
    std::optional<std::string> getStringOrNull() noexcept override;
    void setStringOrNull(const std::optional<std::string>& stringOrNull) noexcept override;
    std::optional<std::string> getOptionalString() noexcept override;
    void setOptionalString(const std::optional<std::string>& optionalString) noexcept override;
    std::optional<std::vector<std::string>> getOptionalArray() noexcept override;
    void setOptionalArray(const std::optional<std::vector<std::string>>& optionalArray) noexcept override;
    std::optional<Powertrain> getOptionalEnum() noexcept override;
    void setOptionalEnum(std::optional<Powertrain> optionalEnum) noexcept override;
    std::optional<OldEnum> getOptionalOldEnum() noexcept override;
    void setOptionalOldEnum(std::optional<OldEnum> optionalOldEnum) noexcept override;
    std::optional<std::function<void(double /* value */)>> getOptionalCallback() noexcept override;
    void setOptionalCallback(const std::optional<std::function<void(double /* value */)>>& optionalCallback) noexcept override;
    std::variant<std::string, double> getSomeVariant() noexcept override;
    void setSomeVariant(const std::variant<std::string, double>& someVariant) noexcept override;

  public:
    // Methods
    std::shared_ptr<HybridTestObjectSwiftKotlinSpec> newTestObject() override;
    std::variant<std::shared_ptr<HybridTestObjectSwiftKotlinSpec>, Person> getVariantHybrid(const std::variant<std::shared_ptr<HybridTestObjectSwiftKotlinSpec>, Person>& variant) override;
    void simpleFunc() override;
    double addNumbers(double a, double b) override;
    std::string addStrings(const std::string& a, const std::string& b) override;
    void multipleArguments(double num, const std::string& str, bool boo) override;
    std::vector<std::string> bounceStrings(const std::vector<std::string>& array) override;
    std::vector<double> bounceNumbers(const std::vector<double>& array) override;
    std::vector<Person> bounceStructs(const std::vector<Person>& array) override;
    std::string sumUpAllPassengers(const std::vector<Car>& cars) override;
    std::vector<Powertrain> bounceEnums(const std::vector<Powertrain>& array) override;
    void complexEnumCallback(const std::vector<Powertrain>& array, const std::function<void(const std::vector<Powertrain>& /* array */)>& callback) override;
    std::shared_ptr<AnyMap> createMap() override;
    std::shared_ptr<AnyMap> mapRoundtrip(const std::shared_ptr<AnyMap>& map) override;
    std::vector<std::string> getMapKeys(const std::shared_ptr<AnyMap>& map) override;
    std::unordered_map<std::string, std::variant<bool, double>> bounceMap(const std::unordered_map<std::string, std::variant<bool, double>>& map) override;
    std::unordered_map<std::string, std::string> extractMap(const MapWrapper& mapWrapper) override;
    double funcThatThrows() override;
    std::shared_ptr<Promise<void>> funcThatThrowsBeforePromise() override;
    void throwError(const std::exception_ptr& error) override;
    std::string tryOptionalParams(double num, bool boo, const std::optional<std::string>& str) override;
    std::string tryMiddleParam(double num, std::optional<bool> boo, const std::string& str) override;
    std::optional<Powertrain> tryOptionalEnum(std::optional<Powertrain> value) override;
    bool tryTrailingOptional(double num, const std::string& str, std::optional<bool> boo) override;
    std::chrono::system_clock::time_point add1Hour(std::chrono::system_clock::time_point date) override;
    std::chrono::system_clock::time_point currentDate() override;
    int64_t calculateFibonacciSync(double value) override;
    std::shared_ptr<Promise<int64_t>> calculateFibonacciAsync(double value) override;
    std::shared_ptr<Promise<void>> wait(double seconds) override;
    std::shared_ptr<Promise<void>> promiseThrows() override;
    std::shared_ptr<Promise<double>> promiseReturnsInstantly() override;
    std::shared_ptr<Promise<double>> promiseReturnsInstantlyAsync() override;
    std::shared_ptr<Promise<double>> awaitAndGetPromise(const std::shared_ptr<Promise<double>>& promise) override;
    std::shared_ptr<Promise<Car>> awaitAndGetComplexPromise(const std::shared_ptr<Promise<Car>>& promise) override;
    std::shared_ptr<Promise<void>> awaitPromise(const std::shared_ptr<Promise<void>>& promise) override;
    void callCallback(const std::function<void()>& callback) override;
    void callAll(const std::function<void()>& first, const std::function<void()>& second, const std::function<void()>& third) override;
    void callWithOptional(std::optional<double> value, const std::function<void(std::optional<double> /* maybe */)>& callback) override;
    std::shared_ptr<Promise<double>> callSumUpNTimes(const std::function<std::shared_ptr<Promise<double>>()>& callback, double n) override;
    std::shared_ptr<Promise<double>> callbackAsyncPromise(const std::function<std::shared_ptr<Promise<std::shared_ptr<Promise<double>>>>()>& callback) override;
    std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>> callbackAsyncPromiseBuffer(const std::function<std::shared_ptr<Promise<std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>>>>()>& callback) override;
    std::function<void(double /* value */)> getComplexCallback() override;
    void twoOptionalCallbacks(double value, const std::optional<std::function<void(double /* value */)>>& first, const std::optional<std::function<void(const std::string& /* value */)>>& second) override;
    std::shared_ptr<Promise<double>> getValueFromJSCallbackAndWait(const std::function<std::shared_ptr<Promise<double>>()>& getValue) override;
    std::shared_ptr<Promise<void>> getValueFromJsCallback(const std::function<std::shared_ptr<Promise<std::string>>()>& callback, const std::function<void(const std::string& /* valueFromJs */)>& andThenCall) override;
    Car getCar() override;
    bool isCarElectric(const Car& car) override;
    std::optional<Person> getDriver(const Car& car) override;
    Car bounceCar(const Car& car) override;
    void jsStyleObjectAsParameters(const JsStyleStruct& params) override;
    WrappedJsStruct bounceWrappedJsStyleStruct(const WrappedJsStruct& value) override;
    OptionalWrapper bounceOptionalWrapper(const OptionalWrapper& wrapper) override;
    OptionalCallback bounceOptionalCallback(const OptionalCallback& value) override;
    std::shared_ptr<ArrayBuffer> createArrayBuffer() override;
    std::shared_ptr<ArrayBuffer> createArrayBufferFromNativeBuffer(bool copy) override;
    std::shared_ptr<ArrayBuffer> copyBuffer(const std::shared_ptr<ArrayBuffer>& buffer) override;
    double getBufferLastItem(const std::shared_ptr<ArrayBuffer>& buffer) override;
    void setAllValuesTo(const std::shared_ptr<ArrayBuffer>& buffer, double value) override;
    std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>> createArrayBufferAsync() override;
    std::shared_ptr<ArrayBuffer> bounceArrayBuffer(const std::shared_ptr<ArrayBuffer>& buffer) override;
    std::variant<std::string, double> passVariant(const std::variant<bool, std::vector<double>, std::vector<std::string>, std::string, double>& either) override;
    std::variant<bool, OldEnum> getVariantEnum(const std::variant<bool, OldEnum>& variant) override;
    std::variant<bool, WeirdNumbersEnum> getVariantWeirdNumbersEnum(const std::variant<bool, WeirdNumbersEnum>& variant) override;
    std::variant<Car, Person> getVariantObjects(const std::variant<Car, Person>& variant) override;
    std::variant<std::string, Car> passNamedVariant(const std::variant<std::string, Car>& variant) override;
    std::variant<std::shared_ptr<HybridBaseSpec>, OptionalWrapper> passAllEmptyObjectVariant(const std::variant<std::shared_ptr<HybridBaseSpec>, OptionalWrapper>& variant) override;
    std::variant<std::shared_ptr<ArrayBuffer>, std::function<void(double /* value */)>, WrappedJsStruct, std::chrono::system_clock::time_point, std::shared_ptr<Promise<double>>, std::shared_ptr<AnyMap>> bounceComplexVariant(const std::variant<std::shared_ptr<ArrayBuffer>, std::function<void(double /* value */)>, WrappedJsStruct, std::chrono::system_clock::time_point, std::shared_ptr<Promise<double>>, std::shared_ptr<AnyMap>>& variant) override;
    std::shared_ptr<HybridChildSpec> createChild() override;
    std::shared_ptr<HybridBaseSpec> createBase() override;
    std::shared_ptr<HybridBaseSpec> createBaseActualChild() override;
    std::shared_ptr<HybridChildSpec> bounceChild(const std::shared_ptr<HybridChildSpec>& child) override;
    std::shared_ptr<HybridBaseSpec> bounceBase(const std::shared_ptr<HybridBaseSpec>& base) override;
    std::shared_ptr<HybridBaseSpec> bounceChildBase(const std::shared_ptr<HybridChildSpec>& child) override;
    std::shared_ptr<HybridChildSpec> castBase(const std::shared_ptr<HybridBaseSpec>& base) override;
    double callbackSync(const std::function<double()>& callback) override;
    bool getIsViewBlue(const std::shared_ptr<HybridTestViewSpec>& view) override;
    std::shared_ptr<margelo::nitro::test::external::HybridSomeExternalObjectSpec> bounceExternalHybrid(const std::shared_ptr<margelo::nitro::test::external::HybridSomeExternalObjectSpec>& externalObject) override;
    std::shared_ptr<margelo::nitro::test::external::HybridSomeExternalObjectSpec> createInternalObject() override;
    double getNativeRefCount() override;

  private:
    void* NON_NULL /* retained */ _swiftPart;
  };

} // namespace margelo::nitro::test
