///
/// HybridTestViewSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridTestViewSpec.hpp"

// Forward declaration of `ColorScheme` to properly resolve imports.
namespace margelo::nitro::test { enum class ColorScheme; }

#include "ColorScheme.hpp"
#include <functional>

namespace margelo::nitro::test {

  /**
   * The C++ part of HybridTestViewSpec_cxx.swift.
   *
   * HybridTestViewSpecSwift (C++) accesses HybridTestViewSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridTestViewSpec_cxx can directly inherit from the C++ class HybridTestViewSpec
   * to simplify the whole structure and memory management.
   */
  class HybridTestViewSpecSwift: public virtual HybridTestViewSpec {
  public:
    // Constructor from an unmanaged Swift instance. This retains +1
    explicit HybridTestViewSpecSwift(void* NON_NULL /* unretained */ swiftPart);
    // Destructor calls release -1 in Swift
    ~HybridTestViewSpecSwift() override;
    // Copy & Move is deleted
    HybridTestViewSpecSwift(const HybridTestViewSpecSwift&) = delete;
    HybridTestViewSpecSwift(HybridTestViewSpecSwift&&) = delete;

  public:
    // Get the Swift part
    inline void* NON_NULL getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    size_t getExternalMemorySize() noexcept override;
    void dispose() noexcept override;
    std::string toString() override;
    bool equals(const std::shared_ptr<HybridObject>& other) override;

  public:
    // Properties
    bool getIsBlue() noexcept override;
    void setIsBlue(bool isBlue) noexcept override;
    bool getHasBeenCalled() noexcept override;
    void setHasBeenCalled(bool hasBeenCalled) noexcept override;
    ColorScheme getColorScheme() noexcept override;
    void setColorScheme(ColorScheme colorScheme) noexcept override;
    std::function<void()> getSomeCallback() noexcept override;
    void setSomeCallback(const std::function<void()>& someCallback) noexcept override;

  public:
    // Methods
    void someMethod() override;

  private:
    void* NON_NULL /* retained */ _swiftPart;
  };

} // namespace margelo::nitro::test
