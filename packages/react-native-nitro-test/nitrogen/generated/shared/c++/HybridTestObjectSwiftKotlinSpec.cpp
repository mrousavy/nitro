///
/// HybridTestObjectSwiftKotlinSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridTestObjectSwiftKotlinSpec.hpp"

namespace margelo::nitro::test {

  void HybridTestObjectSwiftKotlinSpec::loadHybridMethods() {
    // load base methods/properties
    HybridObject::loadHybridMethods();
    // load custom methods/properties
    registerHybrids(this, [](Prototype& prototype) {
      prototype.registerHybridGetter(PropName::string("thisObject"), &HybridTestObjectSwiftKotlinSpec::getThisObject);
      prototype.registerHybridGetter(PropName::string("optionalHybrid"), &HybridTestObjectSwiftKotlinSpec::getOptionalHybrid);
      prototype.registerHybridSetter(PropName::string("optionalHybrid"), &HybridTestObjectSwiftKotlinSpec::setOptionalHybrid);
      prototype.registerHybridGetter(PropName::string("numberValue"), &HybridTestObjectSwiftKotlinSpec::getNumberValue);
      prototype.registerHybridSetter(PropName::string("numberValue"), &HybridTestObjectSwiftKotlinSpec::setNumberValue);
      prototype.registerHybridGetter(PropName::string("boolValue"), &HybridTestObjectSwiftKotlinSpec::getBoolValue);
      prototype.registerHybridSetter(PropName::string("boolValue"), &HybridTestObjectSwiftKotlinSpec::setBoolValue);
      prototype.registerHybridGetter(PropName::string("stringValue"), &HybridTestObjectSwiftKotlinSpec::getStringValue);
      prototype.registerHybridSetter(PropName::string("stringValue"), &HybridTestObjectSwiftKotlinSpec::setStringValue);
      prototype.registerHybridGetter(PropName::string("bigintValue"), &HybridTestObjectSwiftKotlinSpec::getBigintValue);
      prototype.registerHybridSetter(PropName::string("bigintValue"), &HybridTestObjectSwiftKotlinSpec::setBigintValue);
      prototype.registerHybridGetter(PropName::string("stringOrUndefined"), &HybridTestObjectSwiftKotlinSpec::getStringOrUndefined);
      prototype.registerHybridSetter(PropName::string("stringOrUndefined"), &HybridTestObjectSwiftKotlinSpec::setStringOrUndefined);
      prototype.registerHybridGetter(PropName::string("stringOrNull"), &HybridTestObjectSwiftKotlinSpec::getStringOrNull);
      prototype.registerHybridSetter(PropName::string("stringOrNull"), &HybridTestObjectSwiftKotlinSpec::setStringOrNull);
      prototype.registerHybridGetter(PropName::string("optionalString"), &HybridTestObjectSwiftKotlinSpec::getOptionalString);
      prototype.registerHybridSetter(PropName::string("optionalString"), &HybridTestObjectSwiftKotlinSpec::setOptionalString);
      prototype.registerHybridGetter(PropName::string("optionalArray"), &HybridTestObjectSwiftKotlinSpec::getOptionalArray);
      prototype.registerHybridSetter(PropName::string("optionalArray"), &HybridTestObjectSwiftKotlinSpec::setOptionalArray);
      prototype.registerHybridGetter(PropName::string("optionalEnum"), &HybridTestObjectSwiftKotlinSpec::getOptionalEnum);
      prototype.registerHybridSetter(PropName::string("optionalEnum"), &HybridTestObjectSwiftKotlinSpec::setOptionalEnum);
      prototype.registerHybridGetter(PropName::string("optionalOldEnum"), &HybridTestObjectSwiftKotlinSpec::getOptionalOldEnum);
      prototype.registerHybridSetter(PropName::string("optionalOldEnum"), &HybridTestObjectSwiftKotlinSpec::setOptionalOldEnum);
      prototype.registerHybridGetter(PropName::string("optionalCallback"), &HybridTestObjectSwiftKotlinSpec::getOptionalCallback);
      prototype.registerHybridSetter(PropName::string("optionalCallback"), &HybridTestObjectSwiftKotlinSpec::setOptionalCallback);
      prototype.registerHybridGetter(PropName::string("someVariant"), &HybridTestObjectSwiftKotlinSpec::getSomeVariant);
      prototype.registerHybridSetter(PropName::string("someVariant"), &HybridTestObjectSwiftKotlinSpec::setSomeVariant);
      prototype.registerHybridMethod(PropName::string("newTestObject"), &HybridTestObjectSwiftKotlinSpec::newTestObject);
      prototype.registerHybridMethod(PropName::string("getVariantHybrid"), &HybridTestObjectSwiftKotlinSpec::getVariantHybrid);
      prototype.registerHybridMethod(PropName::string("simpleFunc"), &HybridTestObjectSwiftKotlinSpec::simpleFunc);
      prototype.registerHybridMethod(PropName::string("addNumbers"), &HybridTestObjectSwiftKotlinSpec::addNumbers);
      prototype.registerHybridMethod(PropName::string("addStrings"), &HybridTestObjectSwiftKotlinSpec::addStrings);
      prototype.registerHybridMethod(PropName::string("multipleArguments"), &HybridTestObjectSwiftKotlinSpec::multipleArguments);
      prototype.registerHybridMethod(PropName::string("bounceStrings"), &HybridTestObjectSwiftKotlinSpec::bounceStrings);
      prototype.registerHybridMethod(PropName::string("bounceNumbers"), &HybridTestObjectSwiftKotlinSpec::bounceNumbers);
      prototype.registerHybridMethod(PropName::string("bounceStructs"), &HybridTestObjectSwiftKotlinSpec::bounceStructs);
      prototype.registerHybridMethod(PropName::string("bounceEnums"), &HybridTestObjectSwiftKotlinSpec::bounceEnums);
      prototype.registerHybridMethod(PropName::string("complexEnumCallback"), &HybridTestObjectSwiftKotlinSpec::complexEnumCallback);
      prototype.registerHybridMethod(PropName::string("createMap"), &HybridTestObjectSwiftKotlinSpec::createMap);
      prototype.registerHybridMethod(PropName::string("mapRoundtrip"), &HybridTestObjectSwiftKotlinSpec::mapRoundtrip);
      prototype.registerHybridMethod(PropName::string("getMapKeys"), &HybridTestObjectSwiftKotlinSpec::getMapKeys);
      prototype.registerHybridMethod(PropName::string("bounceMap"), &HybridTestObjectSwiftKotlinSpec::bounceMap);
      prototype.registerHybridMethod(PropName::string("extractMap"), &HybridTestObjectSwiftKotlinSpec::extractMap);
      prototype.registerHybridMethod(PropName::string("funcThatThrows"), &HybridTestObjectSwiftKotlinSpec::funcThatThrows);
      prototype.registerHybridMethod(PropName::string("funcThatThrowsBeforePromise"), &HybridTestObjectSwiftKotlinSpec::funcThatThrowsBeforePromise);
      prototype.registerHybridMethod(PropName::string("throwError"), &HybridTestObjectSwiftKotlinSpec::throwError);
      prototype.registerHybridMethod(PropName::string("tryOptionalParams"), &HybridTestObjectSwiftKotlinSpec::tryOptionalParams);
      prototype.registerHybridMethod(PropName::string("tryMiddleParam"), &HybridTestObjectSwiftKotlinSpec::tryMiddleParam);
      prototype.registerHybridMethod(PropName::string("tryOptionalEnum"), &HybridTestObjectSwiftKotlinSpec::tryOptionalEnum);
      prototype.registerHybridMethod(PropName::string("add1Hour"), &HybridTestObjectSwiftKotlinSpec::add1Hour);
      prototype.registerHybridMethod(PropName::string("currentDate"), &HybridTestObjectSwiftKotlinSpec::currentDate);
      prototype.registerHybridMethod(PropName::string("calculateFibonacciSync"), &HybridTestObjectSwiftKotlinSpec::calculateFibonacciSync);
      prototype.registerHybridMethod(PropName::string("calculateFibonacciAsync"), &HybridTestObjectSwiftKotlinSpec::calculateFibonacciAsync);
      prototype.registerHybridMethod(PropName::string("wait"), &HybridTestObjectSwiftKotlinSpec::wait);
      prototype.registerHybridMethod(PropName::string("promiseThrows"), &HybridTestObjectSwiftKotlinSpec::promiseThrows);
      prototype.registerHybridMethod(PropName::string("awaitAndGetPromise"), &HybridTestObjectSwiftKotlinSpec::awaitAndGetPromise);
      prototype.registerHybridMethod(PropName::string("awaitAndGetComplexPromise"), &HybridTestObjectSwiftKotlinSpec::awaitAndGetComplexPromise);
      prototype.registerHybridMethod(PropName::string("awaitPromise"), &HybridTestObjectSwiftKotlinSpec::awaitPromise);
      prototype.registerHybridMethod(PropName::string("callCallback"), &HybridTestObjectSwiftKotlinSpec::callCallback);
      prototype.registerHybridMethod(PropName::string("callAll"), &HybridTestObjectSwiftKotlinSpec::callAll);
      prototype.registerHybridMethod(PropName::string("callWithOptional"), &HybridTestObjectSwiftKotlinSpec::callWithOptional);
      prototype.registerHybridMethod(PropName::string("callSumUpNTimes"), &HybridTestObjectSwiftKotlinSpec::callSumUpNTimes);
      prototype.registerHybridMethod(PropName::string("callbackAsyncPromise"), &HybridTestObjectSwiftKotlinSpec::callbackAsyncPromise);
      prototype.registerHybridMethod(PropName::string("callbackAsyncPromiseBuffer"), &HybridTestObjectSwiftKotlinSpec::callbackAsyncPromiseBuffer);
      prototype.registerHybridMethod(PropName::string("getComplexCallback"), &HybridTestObjectSwiftKotlinSpec::getComplexCallback);
      prototype.registerHybridMethod(PropName::string("getValueFromJSCallbackAndWait"), &HybridTestObjectSwiftKotlinSpec::getValueFromJSCallbackAndWait);
      prototype.registerHybridMethod(PropName::string("getValueFromJsCallback"), &HybridTestObjectSwiftKotlinSpec::getValueFromJsCallback);
      prototype.registerHybridMethod(PropName::string("getCar"), &HybridTestObjectSwiftKotlinSpec::getCar);
      prototype.registerHybridMethod(PropName::string("isCarElectric"), &HybridTestObjectSwiftKotlinSpec::isCarElectric);
      prototype.registerHybridMethod(PropName::string("getDriver"), &HybridTestObjectSwiftKotlinSpec::getDriver);
      prototype.registerHybridMethod(PropName::string("jsStyleObjectAsParameters"), &HybridTestObjectSwiftKotlinSpec::jsStyleObjectAsParameters);
      prototype.registerHybridMethod(PropName::string("bounceWrappedJsStyleStruct"), &HybridTestObjectSwiftKotlinSpec::bounceWrappedJsStyleStruct);
      prototype.registerHybridMethod(PropName::string("bounceOptionalWrapper"), &HybridTestObjectSwiftKotlinSpec::bounceOptionalWrapper);
      prototype.registerHybridMethod(PropName::string("createArrayBuffer"), &HybridTestObjectSwiftKotlinSpec::createArrayBuffer);
      prototype.registerHybridMethod(PropName::string("createArrayBufferFromNativeBuffer"), &HybridTestObjectSwiftKotlinSpec::createArrayBufferFromNativeBuffer);
      prototype.registerHybridMethod(PropName::string("copyBuffer"), &HybridTestObjectSwiftKotlinSpec::copyBuffer);
      prototype.registerHybridMethod(PropName::string("getBufferLastItem"), &HybridTestObjectSwiftKotlinSpec::getBufferLastItem);
      prototype.registerHybridMethod(PropName::string("setAllValuesTo"), &HybridTestObjectSwiftKotlinSpec::setAllValuesTo);
      prototype.registerHybridMethod(PropName::string("createArrayBufferAsync"), &HybridTestObjectSwiftKotlinSpec::createArrayBufferAsync);
      prototype.registerHybridMethod(PropName::string("bounceArrayBuffer"), &HybridTestObjectSwiftKotlinSpec::bounceArrayBuffer);
      prototype.registerHybridMethod(PropName::string("passVariant"), &HybridTestObjectSwiftKotlinSpec::passVariant);
      prototype.registerHybridMethod(PropName::string("getVariantEnum"), &HybridTestObjectSwiftKotlinSpec::getVariantEnum);
      prototype.registerHybridMethod(PropName::string("getVariantWeirdNumbersEnum"), &HybridTestObjectSwiftKotlinSpec::getVariantWeirdNumbersEnum);
      prototype.registerHybridMethod(PropName::string("getVariantObjects"), &HybridTestObjectSwiftKotlinSpec::getVariantObjects);
      prototype.registerHybridMethod(PropName::string("passNamedVariant"), &HybridTestObjectSwiftKotlinSpec::passNamedVariant);
      prototype.registerHybridMethod(PropName::string("createChild"), &HybridTestObjectSwiftKotlinSpec::createChild);
      prototype.registerHybridMethod(PropName::string("createBase"), &HybridTestObjectSwiftKotlinSpec::createBase);
      prototype.registerHybridMethod(PropName::string("createBaseActualChild"), &HybridTestObjectSwiftKotlinSpec::createBaseActualChild);
      prototype.registerHybridMethod(PropName::string("bounceChild"), &HybridTestObjectSwiftKotlinSpec::bounceChild);
      prototype.registerHybridMethod(PropName::string("bounceBase"), &HybridTestObjectSwiftKotlinSpec::bounceBase);
      prototype.registerHybridMethod(PropName::string("bounceChildBase"), &HybridTestObjectSwiftKotlinSpec::bounceChildBase);
      prototype.registerHybridMethod(PropName::string("castBase"), &HybridTestObjectSwiftKotlinSpec::castBase);
      prototype.registerHybridMethod(PropName::string("callbackSync"), &HybridTestObjectSwiftKotlinSpec::callbackSync);
      prototype.registerHybridMethod(PropName::string("getIsViewBlue"), &HybridTestObjectSwiftKotlinSpec::getIsViewBlue);
      prototype.registerHybridMethod(PropName::string("bounceExternalHybrid"), &HybridTestObjectSwiftKotlinSpec::bounceExternalHybrid);
      prototype.registerHybridMethod(PropName::string("createInternalObject"), &HybridTestObjectSwiftKotlinSpec::createInternalObject);
    });
  }

} // namespace margelo::nitro::test
