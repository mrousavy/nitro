///
/// OptionalVariantWrapper.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIHelpers.hpp>)
#include <NitroModules/JSIHelpers.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `Car` to properly resolve imports.
namespace margelo::nitro::test { struct Car; }

#include <string>
#include "Car.hpp"
#include <variant>
#include <optional>

namespace margelo::nitro::test {

  /**
   * A struct which can be represented as a JavaScript object (OptionalVariantWrapper).
   */
  struct OptionalVariantWrapper {
  public:
    std::optional<std::variant<std::string, Car>> variant     SWIFT_PRIVATE;

  public:
    OptionalVariantWrapper() = default;
    explicit OptionalVariantWrapper(std::optional<std::variant<std::string, Car>> variant): variant(variant) {}
  };

} // namespace margelo::nitro::test

namespace margelo::nitro {

  // C++ OptionalVariantWrapper <> JS OptionalVariantWrapper (object)
  template <>
  struct JSIConverter<margelo::nitro::test::OptionalVariantWrapper> final {
    static inline margelo::nitro::test::OptionalVariantWrapper fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::test::OptionalVariantWrapper(
        JSIConverter<std::optional<std::variant<std::string, margelo::nitro::test::Car>>>::fromJSI(runtime, obj.getProperty(runtime, "variant"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::test::OptionalVariantWrapper& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "variant", JSIConverter<std::optional<std::variant<std::string, margelo::nitro::test::Car>>>::toJSI(runtime, arg.variant));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!nitro::isPlainObject(runtime, obj)) {
        return false;
      }
      if (!JSIConverter<std::optional<std::variant<std::string, margelo::nitro::test::Car>>>::canConvert(runtime, obj.getProperty(runtime, "variant"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
