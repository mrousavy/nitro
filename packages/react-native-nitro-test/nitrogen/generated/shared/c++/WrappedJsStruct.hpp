///
/// WrappedJsStruct.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `JsStyleStruct` to properly resolve imports.
namespace margelo::nitro::test { struct JsStyleStruct; }

#include "JsStyleStruct.hpp"
#include <vector>

namespace margelo::nitro::test {

  /**
   * A struct which can be represented as a JavaScript object (WrappedJsStruct).
   */
  struct WrappedJsStruct {
  public:
    JsStyleStruct value     SWIFT_PRIVATE;
    std::vector<JsStyleStruct> items     SWIFT_PRIVATE;

  public:
    WrappedJsStruct() = default;
    explicit WrappedJsStruct(JsStyleStruct value, std::vector<JsStyleStruct> items): value(value), items(items) {}
  };

} // namespace margelo::nitro::test

namespace margelo::nitro {

  // C++ WrappedJsStruct <> JS WrappedJsStruct (object)
  template <>
  struct JSIConverter<margelo::nitro::test::WrappedJsStruct> final {
    static inline margelo::nitro::test::WrappedJsStruct fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::test::WrappedJsStruct(
        JSIConverter<margelo::nitro::test::JsStyleStruct>::fromJSI(runtime, obj.getProperty(runtime, "value")),
        JSIConverter<std::vector<margelo::nitro::test::JsStyleStruct>>::fromJSI(runtime, obj.getProperty(runtime, "items"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::test::WrappedJsStruct& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "value", JSIConverter<margelo::nitro::test::JsStyleStruct>::toJSI(runtime, arg.value));
      obj.setProperty(runtime, "items", JSIConverter<std::vector<margelo::nitro::test::JsStyleStruct>>::toJSI(runtime, arg.items));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<margelo::nitro::test::JsStyleStruct>::canConvert(runtime, obj.getProperty(runtime, "value"))) return false;
      if (!JSIConverter<std::vector<margelo::nitro::test::JsStyleStruct>>::canConvert(runtime, obj.getProperty(runtime, "items"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
