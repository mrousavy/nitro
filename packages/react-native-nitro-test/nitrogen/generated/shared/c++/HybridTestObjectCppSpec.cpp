///
/// HybridTestObjectCppSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridTestObjectCppSpec.hpp"

namespace margelo::nitro::test {

  void HybridTestObjectCppSpec::loadHybridMethods() {
    // load base methods/properties
    HybridObject::loadHybridMethods();
    // load custom methods/properties
    registerHybrids(this, [](Prototype& prototype) {
      prototype.registerHybridGetter(PropName::string("someTuple"), &HybridTestObjectCppSpec::getSomeTuple);
      prototype.registerHybridSetter(PropName::string("someTuple"), &HybridTestObjectCppSpec::setSomeTuple);
      prototype.registerHybridGetter(PropName::string("thisObject"), &HybridTestObjectCppSpec::getThisObject);
      prototype.registerHybridGetter(PropName::string("optionalHybrid"), &HybridTestObjectCppSpec::getOptionalHybrid);
      prototype.registerHybridSetter(PropName::string("optionalHybrid"), &HybridTestObjectCppSpec::setOptionalHybrid);
      prototype.registerHybridGetter(PropName::string("numberValue"), &HybridTestObjectCppSpec::getNumberValue);
      prototype.registerHybridSetter(PropName::string("numberValue"), &HybridTestObjectCppSpec::setNumberValue);
      prototype.registerHybridGetter(PropName::string("boolValue"), &HybridTestObjectCppSpec::getBoolValue);
      prototype.registerHybridSetter(PropName::string("boolValue"), &HybridTestObjectCppSpec::setBoolValue);
      prototype.registerHybridGetter(PropName::string("stringValue"), &HybridTestObjectCppSpec::getStringValue);
      prototype.registerHybridSetter(PropName::string("stringValue"), &HybridTestObjectCppSpec::setStringValue);
      prototype.registerHybridGetter(PropName::string("bigintValue"), &HybridTestObjectCppSpec::getBigintValue);
      prototype.registerHybridSetter(PropName::string("bigintValue"), &HybridTestObjectCppSpec::setBigintValue);
      prototype.registerHybridGetter(PropName::string("stringOrUndefined"), &HybridTestObjectCppSpec::getStringOrUndefined);
      prototype.registerHybridSetter(PropName::string("stringOrUndefined"), &HybridTestObjectCppSpec::setStringOrUndefined);
      prototype.registerHybridGetter(PropName::string("stringOrNull"), &HybridTestObjectCppSpec::getStringOrNull);
      prototype.registerHybridSetter(PropName::string("stringOrNull"), &HybridTestObjectCppSpec::setStringOrNull);
      prototype.registerHybridGetter(PropName::string("optionalString"), &HybridTestObjectCppSpec::getOptionalString);
      prototype.registerHybridSetter(PropName::string("optionalString"), &HybridTestObjectCppSpec::setOptionalString);
      prototype.registerHybridGetter(PropName::string("optionalArray"), &HybridTestObjectCppSpec::getOptionalArray);
      prototype.registerHybridSetter(PropName::string("optionalArray"), &HybridTestObjectCppSpec::setOptionalArray);
      prototype.registerHybridGetter(PropName::string("optionalEnum"), &HybridTestObjectCppSpec::getOptionalEnum);
      prototype.registerHybridSetter(PropName::string("optionalEnum"), &HybridTestObjectCppSpec::setOptionalEnum);
      prototype.registerHybridGetter(PropName::string("optionalOldEnum"), &HybridTestObjectCppSpec::getOptionalOldEnum);
      prototype.registerHybridSetter(PropName::string("optionalOldEnum"), &HybridTestObjectCppSpec::setOptionalOldEnum);
      prototype.registerHybridGetter(PropName::string("optionalCallback"), &HybridTestObjectCppSpec::getOptionalCallback);
      prototype.registerHybridSetter(PropName::string("optionalCallback"), &HybridTestObjectCppSpec::setOptionalCallback);
      prototype.registerHybridGetter(PropName::string("someVariant"), &HybridTestObjectCppSpec::getSomeVariant);
      prototype.registerHybridSetter(PropName::string("someVariant"), &HybridTestObjectCppSpec::setSomeVariant);
      prototype.registerHybridMethod(PropName::string("getVariantTuple"), &HybridTestObjectCppSpec::getVariantTuple);
      prototype.registerHybridMethod(PropName::string("flip"), &HybridTestObjectCppSpec::flip);
      prototype.registerHybridMethod(PropName::string("passTuple"), &HybridTestObjectCppSpec::passTuple);
      prototype.registerHybridMethod(PropName::string("newTestObject"), &HybridTestObjectCppSpec::newTestObject);
      prototype.registerHybridMethod(PropName::string("getVariantHybrid"), &HybridTestObjectCppSpec::getVariantHybrid);
      prototype.registerHybridMethod(PropName::string("bounceCustomType"), &HybridTestObjectCppSpec::bounceCustomType);
      prototype.registerHybridMethod(PropName::string("simpleFunc"), &HybridTestObjectCppSpec::simpleFunc);
      prototype.registerHybridMethod(PropName::string("addNumbers"), &HybridTestObjectCppSpec::addNumbers);
      prototype.registerHybridMethod(PropName::string("addStrings"), &HybridTestObjectCppSpec::addStrings);
      prototype.registerHybridMethod(PropName::string("multipleArguments"), &HybridTestObjectCppSpec::multipleArguments);
      prototype.registerHybridMethod(PropName::string("bounceStrings"), &HybridTestObjectCppSpec::bounceStrings);
      prototype.registerHybridMethod(PropName::string("bounceNumbers"), &HybridTestObjectCppSpec::bounceNumbers);
      prototype.registerHybridMethod(PropName::string("bounceStructs"), &HybridTestObjectCppSpec::bounceStructs);
      prototype.registerHybridMethod(PropName::string("bounceEnums"), &HybridTestObjectCppSpec::bounceEnums);
      prototype.registerHybridMethod(PropName::string("complexEnumCallback"), &HybridTestObjectCppSpec::complexEnumCallback);
      prototype.registerHybridMethod(PropName::string("createMap"), &HybridTestObjectCppSpec::createMap);
      prototype.registerHybridMethod(PropName::string("mapRoundtrip"), &HybridTestObjectCppSpec::mapRoundtrip);
      prototype.registerHybridMethod(PropName::string("getMapKeys"), &HybridTestObjectCppSpec::getMapKeys);
      prototype.registerHybridMethod(PropName::string("bounceMap"), &HybridTestObjectCppSpec::bounceMap);
      prototype.registerHybridMethod(PropName::string("extractMap"), &HybridTestObjectCppSpec::extractMap);
      prototype.registerHybridMethod(PropName::string("funcThatThrows"), &HybridTestObjectCppSpec::funcThatThrows);
      prototype.registerHybridMethod(PropName::string("funcThatThrowsBeforePromise"), &HybridTestObjectCppSpec::funcThatThrowsBeforePromise);
      prototype.registerHybridMethod(PropName::string("throwError"), &HybridTestObjectCppSpec::throwError);
      prototype.registerHybridMethod(PropName::string("tryOptionalParams"), &HybridTestObjectCppSpec::tryOptionalParams);
      prototype.registerHybridMethod(PropName::string("tryMiddleParam"), &HybridTestObjectCppSpec::tryMiddleParam);
      prototype.registerHybridMethod(PropName::string("tryOptionalEnum"), &HybridTestObjectCppSpec::tryOptionalEnum);
      prototype.registerHybridMethod(PropName::string("add1Hour"), &HybridTestObjectCppSpec::add1Hour);
      prototype.registerHybridMethod(PropName::string("currentDate"), &HybridTestObjectCppSpec::currentDate);
      prototype.registerHybridMethod(PropName::string("calculateFibonacciSync"), &HybridTestObjectCppSpec::calculateFibonacciSync);
      prototype.registerHybridMethod(PropName::string("calculateFibonacciAsync"), &HybridTestObjectCppSpec::calculateFibonacciAsync);
      prototype.registerHybridMethod(PropName::string("wait"), &HybridTestObjectCppSpec::wait);
      prototype.registerHybridMethod(PropName::string("promiseThrows"), &HybridTestObjectCppSpec::promiseThrows);
      prototype.registerHybridMethod(PropName::string("awaitAndGetPromise"), &HybridTestObjectCppSpec::awaitAndGetPromise);
      prototype.registerHybridMethod(PropName::string("awaitAndGetComplexPromise"), &HybridTestObjectCppSpec::awaitAndGetComplexPromise);
      prototype.registerHybridMethod(PropName::string("awaitPromise"), &HybridTestObjectCppSpec::awaitPromise);
      prototype.registerHybridMethod(PropName::string("callCallback"), &HybridTestObjectCppSpec::callCallback);
      prototype.registerHybridMethod(PropName::string("callAll"), &HybridTestObjectCppSpec::callAll);
      prototype.registerHybridMethod(PropName::string("callWithOptional"), &HybridTestObjectCppSpec::callWithOptional);
      prototype.registerHybridMethod(PropName::string("callSumUpNTimes"), &HybridTestObjectCppSpec::callSumUpNTimes);
      prototype.registerHybridMethod(PropName::string("callbackAsyncPromise"), &HybridTestObjectCppSpec::callbackAsyncPromise);
      prototype.registerHybridMethod(PropName::string("callbackAsyncPromiseBuffer"), &HybridTestObjectCppSpec::callbackAsyncPromiseBuffer);
      prototype.registerHybridMethod(PropName::string("getComplexCallback"), &HybridTestObjectCppSpec::getComplexCallback);
      prototype.registerHybridMethod(PropName::string("getValueFromJSCallbackAndWait"), &HybridTestObjectCppSpec::getValueFromJSCallbackAndWait);
      prototype.registerHybridMethod(PropName::string("getValueFromJsCallback"), &HybridTestObjectCppSpec::getValueFromJsCallback);
      prototype.registerHybridMethod(PropName::string("getCar"), &HybridTestObjectCppSpec::getCar);
      prototype.registerHybridMethod(PropName::string("isCarElectric"), &HybridTestObjectCppSpec::isCarElectric);
      prototype.registerHybridMethod(PropName::string("getDriver"), &HybridTestObjectCppSpec::getDriver);
      prototype.registerHybridMethod(PropName::string("jsStyleObjectAsParameters"), &HybridTestObjectCppSpec::jsStyleObjectAsParameters);
      prototype.registerHybridMethod(PropName::string("bounceWrappedJsStyleStruct"), &HybridTestObjectCppSpec::bounceWrappedJsStyleStruct);
      prototype.registerHybridMethod(PropName::string("bounceOptionalWrapper"), &HybridTestObjectCppSpec::bounceOptionalWrapper);
      prototype.registerHybridMethod(PropName::string("createArrayBuffer"), &HybridTestObjectCppSpec::createArrayBuffer);
      prototype.registerHybridMethod(PropName::string("createArrayBufferFromNativeBuffer"), &HybridTestObjectCppSpec::createArrayBufferFromNativeBuffer);
      prototype.registerHybridMethod(PropName::string("copyBuffer"), &HybridTestObjectCppSpec::copyBuffer);
      prototype.registerHybridMethod(PropName::string("getBufferLastItem"), &HybridTestObjectCppSpec::getBufferLastItem);
      prototype.registerHybridMethod(PropName::string("setAllValuesTo"), &HybridTestObjectCppSpec::setAllValuesTo);
      prototype.registerHybridMethod(PropName::string("createArrayBufferAsync"), &HybridTestObjectCppSpec::createArrayBufferAsync);
      prototype.registerHybridMethod(PropName::string("bounceArrayBuffer"), &HybridTestObjectCppSpec::bounceArrayBuffer);
      prototype.registerHybridMethod(PropName::string("passVariant"), &HybridTestObjectCppSpec::passVariant);
      prototype.registerHybridMethod(PropName::string("getVariantEnum"), &HybridTestObjectCppSpec::getVariantEnum);
      prototype.registerHybridMethod(PropName::string("getVariantWeirdNumbersEnum"), &HybridTestObjectCppSpec::getVariantWeirdNumbersEnum);
      prototype.registerHybridMethod(PropName::string("getVariantObjects"), &HybridTestObjectCppSpec::getVariantObjects);
      prototype.registerHybridMethod(PropName::string("passNamedVariant"), &HybridTestObjectCppSpec::passNamedVariant);
      prototype.registerHybridMethod(PropName::string("createChild"), &HybridTestObjectCppSpec::createChild);
      prototype.registerHybridMethod(PropName::string("createBase"), &HybridTestObjectCppSpec::createBase);
      prototype.registerHybridMethod(PropName::string("createBaseActualChild"), &HybridTestObjectCppSpec::createBaseActualChild);
      prototype.registerHybridMethod(PropName::string("bounceChild"), &HybridTestObjectCppSpec::bounceChild);
      prototype.registerHybridMethod(PropName::string("bounceBase"), &HybridTestObjectCppSpec::bounceBase);
      prototype.registerHybridMethod(PropName::string("bounceChildBase"), &HybridTestObjectCppSpec::bounceChildBase);
      prototype.registerHybridMethod(PropName::string("castBase"), &HybridTestObjectCppSpec::castBase);
      prototype.registerHybridMethod(PropName::string("callbackSync"), &HybridTestObjectCppSpec::callbackSync);
      prototype.registerHybridMethod(PropName::string("getIsViewBlue"), &HybridTestObjectCppSpec::getIsViewBlue);
      prototype.registerHybridMethod(PropName::string("bounceExternalHybrid"), &HybridTestObjectCppSpec::bounceExternalHybrid);
      prototype.registerHybridMethod(PropName::string("createInternalObject"), &HybridTestObjectCppSpec::createInternalObject);
    });
  }

} // namespace margelo::nitro::test
