///
/// NitroRow.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIHelpers.hpp>)
#include <NitroModules/JSIHelpers.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>
#include <optional>
#include <functional>

namespace margelo::nitro::test {

  /**
   * A struct which can be represented as a JavaScript object (NitroRow).
   */
  struct NitroRow {
  public:
    std::string title     SWIFT_PRIVATE;
    std::function<void(std::optional<bool> /* checked */)> onPress     SWIFT_PRIVATE;

  public:
    NitroRow() = default;
    explicit NitroRow(std::string title, std::function<void(std::optional<bool> /* checked */)> onPress): title(title), onPress(onPress) {}
  };

} // namespace margelo::nitro::test

namespace margelo::nitro {

  // C++ NitroRow <> JS NitroRow (object)
  template <>
  struct JSIConverter<margelo::nitro::test::NitroRow> final {
    static inline margelo::nitro::test::NitroRow fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::test::NitroRow(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "title")),
        JSIConverter<std::function<void(std::optional<bool>)>>::fromJSI(runtime, obj.getProperty(runtime, "onPress"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::test::NitroRow& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "title", JSIConverter<std::string>::toJSI(runtime, arg.title));
      obj.setProperty(runtime, "onPress", JSIConverter<std::function<void(std::optional<bool>)>>::toJSI(runtime, arg.onPress));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!nitro::isPlainObject(runtime, obj)) {
        return false;
      }
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "title"))) return false;
      if (!JSIConverter<std::function<void(std::optional<bool>)>>::canConvert(runtime, obj.getProperty(runtime, "onPress"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
