import groovy.json.JsonSlurper

buildscript {
  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:8.8.1"
  }
}

apply plugin: "com.android.library"
apply plugin: 'org.jetbrains.kotlin.android'

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["Nitro_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["Nitro_" + name]).toInteger()
}

logger.warn("[Nitro] ðŸ”¥ Your app is boosted by nitro!")

android {
  namespace "com.margelo.nitro"

  ndkVersion getExtOrDefault("ndkVersion")
  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()

    externalNativeBuild {
      cmake {
        cppFlags "-frtti -fexceptions -Wall -Wextra -fstack-protector-all"
        arguments "-DANDROID_STL=c++_shared"

        buildTypes {
          debug {
            cppFlags "-O1 -g"
          }
          release {
            cppFlags "-O2"
          }
        }
      }
    }
  }

  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
    }
  }

  buildFeatures {
    buildConfig true
    prefab true
    prefabPublishing true
  }

  packagingOptions {
    excludes = [
            "META-INF",
            "META-INF/**",
            "**/libc++_shared.so",
            "**/libfbjni.so",
            "**/libjsi.so"
    ]
  }

  prefab {
    Nitro {
      headers "${project.buildDir}/headers/nitro/"
    }
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

dependencies {
  implementation 'com.facebook.fbjni:fbjni:0.2.2'
}

repositories {
  mavenCentral()
  google()
}

tasks.register('prepareHeaders', Copy) {
  from fileTree('./src/main/cpp').filter { it.isFile() }
  from fileTree('../cpp/').filter { it.isFile() }
  include "*.hpp"
  into "${project.buildDir}/headers/nitro/Nitro/"
  includeEmptyDirs = false
}

preBuild.dependsOn(prepareHeaders)
