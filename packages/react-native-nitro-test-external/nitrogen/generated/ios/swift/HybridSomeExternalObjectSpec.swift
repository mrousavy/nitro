///
/// HybridSomeExternalObjectSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridSomeExternalObjectSpec``
public protocol HybridSomeExternalObjectSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func getValue() throws -> String
}

/// See ``HybridSomeExternalObjectSpec``
open class HybridSomeExternalObjectSpec_base {
  private weak var cxxWrapper: HybridSomeExternalObjectSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridSomeExternalObjectSpec_cxx {
  #if DEBUG
    guard self is HybridSomeExternalObjectSpec else {
      fatalError("`self` is not a `HybridSomeExternalObjectSpec`! Did you accidentally inherit from `HybridSomeExternalObjectSpec_base` instead of `HybridSomeExternalObjectSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridSomeExternalObjectSpec_cxx(self as! HybridSomeExternalObjectSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the SomeExternalObject HybridObject.
 * Implement this protocol to create Swift-based instances of SomeExternalObject.
 * ```swift
 * class HybridSomeExternalObject : HybridSomeExternalObjectSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridSomeExternalObjectSpec = HybridSomeExternalObjectSpec_protocol & HybridSomeExternalObjectSpec_base
