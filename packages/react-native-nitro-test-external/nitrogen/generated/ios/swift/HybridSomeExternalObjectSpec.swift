///
/// HybridSomeExternalObjectSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridSomeExternalObjectSpec``
public protocol HybridSomeExternalObjectSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func getValue() throws -> String
}

public extension HybridSomeExternalObjectSpec_protocol {
  /// Default implementation of ``HybridObject.toString``
  func toString() -> String {
    return "[HybridObject SomeExternalObject]"
  }
}

open class HybridSomeExternalObjectSpec_base {
  public typealias bridge = margelo.nitro.test.external.bridge.swift
  private var _cxxPart: bridge.std__weak_ptr_HybridSomeExternalObjectSpec_ = .init()

  public init() { }
  
  open func getCxxPart() -> bridge.std__shared_ptr_HybridSomeExternalObjectSpec_ {
    let cachedCxxPart = self._cxxPart.lock()
    if Bool(fromCxx: cachedCxxPart) {
      return cachedCxxPart
    } else {
      let unsafe = self.toUnsafeRetained()
      let cxxPart = bridge.create_std__shared_ptr_HybridSomeExternalObjectSpec_(unsafe)
      _cxxPart = bridge.weakify_std__shared_ptr_HybridSomeExternalObjectSpec_(cxxPart)
      return cxxPart
    }
  }
}

public typealias HybridSomeExternalObjectSpec = HybridSomeExternalObjectSpec_protocol & HybridSomeExternalObjectSpec_base
