///
/// NitroTestExternal-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `HybridSomeExternalObjectSpec` to properly resolve imports.
namespace margelo::nitro::test::external { class HybridSomeExternalObjectSpec; }
// Forward declaration of `SomeExternalEnum` to properly resolve imports.
namespace margelo::nitro::test::external { enum class SomeExternalEnum; }
// Forward declaration of `SomeExternalStruct` to properly resolve imports.
namespace margelo::nitro::test::external { struct SomeExternalStruct; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridSomeExternalObjectSpec_cxx` to properly resolve imports.
namespace NitroTestExternal { class HybridSomeExternalObjectSpec_cxx; }

// Include C++ defined types
#include "HybridSomeExternalObjectSpec.hpp"
#include "SomeExternalEnum.hpp"
#include "SomeExternalStruct.hpp"
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <string>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::test::external::bridge::swift {

  // pragma MARK: std::function<void()>
  /**
   * Specialized version of `std::function<void()>`.
   */
  using Func_void = std::function<void()>;
  /**
   * Wrapper class for a `std::function<void()>`, this can be used from Swift.
   */
  class Func_void_Wrapper final {
  public:
    explicit Func_void_Wrapper(std::function<void()>&& func): _function(std::make_unique<std::function<void()>>(std::move(func))) {}
    inline void call() const noexcept {
      _function->operator()();
    }
  private:
    std::unique_ptr<std::function<void()>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void create_Func_void(void* NON_NULL swiftClosureWrapper) noexcept;
  inline Func_void_Wrapper wrap_Func_void(Func_void value) noexcept {
    return Func_void_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<HybridSomeExternalObjectSpec>
  /**
   * Specialized version of `std::shared_ptr<HybridSomeExternalObjectSpec>`.
   */
  using std__shared_ptr_HybridSomeExternalObjectSpec_ = std::shared_ptr<HybridSomeExternalObjectSpec>;
  std::shared_ptr<HybridSomeExternalObjectSpec> create_std__shared_ptr_HybridSomeExternalObjectSpec_(void* NON_NULL swiftUnsafePointer) noexcept;
  void* NON_NULL get_std__shared_ptr_HybridSomeExternalObjectSpec_(std__shared_ptr_HybridSomeExternalObjectSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<HybridSomeExternalObjectSpec>
  using std__weak_ptr_HybridSomeExternalObjectSpec_ = std::weak_ptr<HybridSomeExternalObjectSpec>;
  inline std__weak_ptr_HybridSomeExternalObjectSpec_ weakify_std__shared_ptr_HybridSomeExternalObjectSpec_(const std::shared_ptr<HybridSomeExternalObjectSpec>& strong) noexcept { return strong; }
  
  // pragma MARK: Result<std::string>
  using Result_std__string_ = Result<std::string>;
  inline Result_std__string_ create_Result_std__string_(const std::string& value) noexcept {
    return Result<std::string>::withValue(value);
  }
  inline Result_std__string_ create_Result_std__string_(const std::exception_ptr& error) noexcept {
    return Result<std::string>::withError(error);
  }
  
  // pragma MARK: Result<SomeExternalEnum>
  using Result_SomeExternalEnum_ = Result<SomeExternalEnum>;
  inline Result_SomeExternalEnum_ create_Result_SomeExternalEnum_(SomeExternalEnum value) noexcept {
    return Result<SomeExternalEnum>::withValue(std::move(value));
  }
  inline Result_SomeExternalEnum_ create_Result_SomeExternalEnum_(const std::exception_ptr& error) noexcept {
    return Result<SomeExternalEnum>::withError(error);
  }
  
  // pragma MARK: Result<SomeExternalStruct>
  using Result_SomeExternalStruct_ = Result<SomeExternalStruct>;
  inline Result_SomeExternalStruct_ create_Result_SomeExternalStruct_(const SomeExternalStruct& value) noexcept {
    return Result<SomeExternalStruct>::withValue(value);
  }
  inline Result_SomeExternalStruct_ create_Result_SomeExternalStruct_(const std::exception_ptr& error) noexcept {
    return Result<SomeExternalStruct>::withError(error);
  }

} // namespace margelo::nitro::test::external::bridge::swift
