///
/// JHybridSomeExternalObjectSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridSomeExternalObjectSpec.hpp"



#include <string>

namespace margelo::nitro::test::external {

  jni::local_ref<JHybridSomeExternalObjectSpec::jhybriddata> JHybridSomeExternalObjectSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridSomeExternalObjectSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridSomeExternalObjectSpec::initHybrid),
    });
  }

  size_t JHybridSomeExternalObjectSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridSomeExternalObjectSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  std::string JHybridSomeExternalObjectSpec::getValue() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getValue");
    auto __result = method(_javaPart);
    return __result->toStdString();
  }

} // namespace margelo::nitro::test::external
