///
/// JHybridSomeExternalObjectSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridSomeExternalObjectSpec.hpp"

// Forward declaration of `SomeExternalEnum` to properly resolve imports.
namespace margelo::nitro::test::external { enum class SomeExternalEnum; }
// Forward declaration of `SomeExternalStruct` to properly resolve imports.
namespace margelo::nitro::test::external { struct SomeExternalStruct; }

#include <string>
#include "SomeExternalEnum.hpp"
#include "JSomeExternalEnum.hpp"
#include "SomeExternalStruct.hpp"
#include "JSomeExternalStruct.hpp"
#include <functional>
#include "JFunc_void.hpp"

namespace margelo::nitro::test::external {

  jni::local_ref<JHybridSomeExternalObjectSpec::jhybriddata> JHybridSomeExternalObjectSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridSomeExternalObjectSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridSomeExternalObjectSpec::initHybrid),
    });
  }

  size_t JHybridSomeExternalObjectSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridSomeExternalObjectSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  std::string JHybridSomeExternalObjectSpec::toString() {
    static const auto method = javaClassStatic()->getMethod<jni::JString()>("toString");
    auto javaString = method(_javaPart);
    return javaString->toStdString();
  }

  // Properties
  

  // Methods
  std::string JHybridSomeExternalObjectSpec::getValue() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getValue");
    auto __result = method(_javaPart);
    return __result->toStdString();
  }
  SomeExternalEnum JHybridSomeExternalObjectSpec::bounceEnum(SomeExternalEnum value) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JSomeExternalEnum>(jni::alias_ref<JSomeExternalEnum> /* value */)>("bounceEnum");
    auto __result = method(_javaPart, JSomeExternalEnum::fromCpp(value));
    return __result->toCpp();
  }
  SomeExternalStruct JHybridSomeExternalObjectSpec::bounceStruct(const SomeExternalStruct& value) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JSomeExternalStruct>(jni::alias_ref<JSomeExternalStruct> /* value */)>("bounceStruct");
    auto __result = method(_javaPart, JSomeExternalStruct::fromCpp(value));
    return __result->toCpp();
  }

} // namespace margelo::nitro::test::external
