///
/// JSomeExternalStruct.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "SomeExternalStruct.hpp"

#include "JFunc_void.hpp"
#include <functional>

namespace margelo::nitro::test::external {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "SomeExternalStruct" and the the Kotlin data class "SomeExternalStruct".
   */
  struct JSomeExternalStruct final: public jni::JavaClass<JSomeExternalStruct> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/test/external/SomeExternalStruct;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct SomeExternalStruct by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    SomeExternalStruct toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldValue = clazz->getField<double>("value");
      double value = this->getFieldValue(fieldValue);
      static const auto fieldCallback = clazz->getField<JFunc_void::javaobject>("callback");
      jni::local_ref<JFunc_void::javaobject> callback = this->getFieldValue(fieldCallback);
      return SomeExternalStruct(
        value,
        [&]() -> std::function<void()> {
          if (callback->isInstanceOf(JFunc_void_cxx::javaClassStatic())) [[likely]] {
            auto downcast = jni::static_ref_cast<JFunc_void_cxx::javaobject>(callback);
            return downcast->cthis()->getFunction();
          } else {
            auto callbackRef = jni::make_global(callback);
            return [callbackRef]() -> void {
              return callbackRef->invoke();
            };
          }
        }()
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JSomeExternalStruct::javaobject> fromCpp(const SomeExternalStruct& value) {
      using JSignature = JSomeExternalStruct(double, jni::alias_ref<JFunc_void::javaobject>);
      static const auto clazz = javaClassStatic();
      static const auto create = clazz->getStaticMethod<JSignature>("fromCpp");
      return create(
        clazz,
        value.value,
        JFunc_void_cxx::fromCpp(value.callback)
      );
    }
  };

} // namespace margelo::nitro::test::external
